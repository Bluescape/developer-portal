<h1>Basic API Requests</h1>

<p>
    <em>
        This guide assumes you have obtained an access token from an authorized user. You can obtain an access token
        by completing the OAuth flow (see the <a href="/docs/page/app-auth">Application Authorization</a> guide).
    </em>
</p>
<p>
  If you are looking for the GraphQL section of this guide, click <a href="#working-with-graphql">here</a>.
</p>

<h3>The Base URL</h3>

<p>
    All API endpoints share the same base URL whether you are trying to access them through REST or GraphQL methods:
</p>

<pre>
<script type="text/javascript">
    document.write(apiBaseStr);
</script>
</pre>

<h4>Authorization Header</h4>

<p>
    All operations whether REST or GraphQL require an <strong>Authorization</strong> header based on the access tokens received from the
    OAuth flow. The value of this header should match the format of <span class="pre">Bearer &lt;access-token&gt;</span>.
</p>

<h2>Working with REST</h2>

<h3>Assembling a REST Request</h3>

<h4>URL</h4>

<p>
    A request URL is assembled from the base URL and the <strong>path</strong> information for an operation as found in
    the reference. For example, Add a User
    to an Organization is an operation with path <span
        class="pre">/organizations/&lt;organizationId&gt;/members</span>. Combining this path with the base URL gives us
    a request URL of:
</p>

<pre>
<script type="text/javascript">
    document.write(apiBaseStr + "/v3/organizations/&lt;organizationId&gt;/members");
</script>
</pre>

<h4>Parameters</h4>

<p>
    The path for the operation above, like many in the Bluescape API, contains a parameter. Adding a user to an
    organization requires we identify the organization to which the new user should be invited. To finish preparing this
    request URL, we must replace <span class="pre">&lt;organizationId&gt;</span> with a valid organization ID, such as
    one obtained from the List a User's
    Organizations operation. Replacing the parameter placeholder with a sample organization ID yields a request URL
    of:
</p>

<pre>
<script type="text/javascript">
    document.write(apiBaseStr + "/v3/organizations/eidzMVOsv4peKG-4DLKA/members");
</script>
</pre>

<p>
    In addition to path parameters, some requests will have query, body and form data parameters. Reviewing the
    documentation for Add a User to an Organization, we see that this operation has a JSON-format body parameter, with
    required <span class="pre">id</span>, <span class="pre">type</span> and <span class="pre">organizationRoleId</span> fields. When an operation requires a body parameter, be sure to send your
    request with a <span class="pre">Content-Type</span> header of <span class="pre">application/json</span>. When a
    form data parameter is expected, be sure to send your request with a <span class="pre">Content-Type</span> header of
    <span class="pre">multipart/form-data</span>. A valid body for this request looks like:
</p>

<pre>
{
  "id": "&lt;SET_USER_ID&gt;",
  "type": "&lt;SET_MEMBER_TYPE&gt;", #example: User
  "organizationRoleId": "&lt;SET_ORGANIZATION_ROLE_ID&gt;"
}
</pre>

<h4>Assembled Request</h4>

<p>
    Putting this all together, a request to Add a User to an Organization looks like:
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl -X POST <script type="text/javascript">document.write(apiBaseStr + "/v3/organizations/&lt;SET_ORGANIZATION_ID&gt;/members"); </script> \
  -H 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
  -H 'Content-Type: application/json' \
  -d '{
    "id": "&lt;SET_USER_ID&gt;",
    "type": "&lt;SET_MEMBER_TYPE&gt;", #example: User
    "organizationRoleId": "&lt;SET_ORGANIZATION_ROLE_ID&gt;"
  }'
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint 

portal = '<script type="text/javascript">document.write(apiBaseStr); </script>'
organizationId = '&lt;SET_ORGANIZATION_ID&gt';
API_version = 'v3'
API_endpoint = '/' + API_version + '/organizations/' + organizationId + '/members'
token = '&lt;SET_TOKEN&gt';
data_load = {
  "id": "&lt;SET_USER_ID&gt;",
  "type": "&lt;SET_MEMBER_TYPE&gt;", #example: User
  "organizationRoleId": "&lt;SET_ORGANIZATION_ROLE_ID&gt;"
}

the_request = requests.post(
    portal+API_endpoint,
    headers={"Authorization": "Bearer " + token,
            "Content-Type": "application/json"
            },
    json=data_load
)

json_response = the_request.json()
pprint.pprint(json_response)
</pre>
</p>

<a name="working-with-graphql" style="color:rgb(44, 45, 48)"><h2>Working with GraphQL</h2></a>

<h3>Assembling a GraphQL Query</h3>

<p>
    All GraphQL endpoints can be reached from the same URL, only the body of the request changes:
</p>

<pre>
<script type="text/javascript">
    document.write(apiBaseStr);
</script>/v3/graphql/
</pre>

<p> 
    Queries can act as methods by naming them, which allows them to be reused, and even pass parameters to them in order to specify certain fields.
    This query is calling the <span class="pre">/workspace/{workspaceId}/elements</span>endpoint in order to retrieve all of the elements within that workspace,
    while also specifying exactly the information that should be returned. In this case the query will return the <span class="pre">type</span>, 
    <span class="pre">id</span>, and <span class="pre">(x,y)</span> coordinates of all elements within the workspace.
    The structure of a basic GraphQL query is as follows: 
</p>

<pre>
query getElementsFromWorkspace($workspaceId: String!){
  elements(workspaceId: $workspaceId) {
    __typename
    id
    transform {
      x y
    }
  }
}   
</pre>

<p>
    These queries can be ran as-is with a tool such as Postman, or even by directly pasting them into the <script type="text/javascript">document.write('<a href="' + graphQLStr + '" target="_blank">GraphQL Playground</a>');</script>. 
</p>

<h4>Output</h4>

<pre>
{
  "data": {
    "elements": [
      {
        "__typename": "Shape",
        "id": "60340962fbfaf42d19ab103f",
        "transform": {
          "x": -2074.9296875,
          "y": -538.6084806720415
        }
      },
      {
        "__typename": "Text",
        "id": "6034096bfbfaf42d19ab1042",
        "transform": {
          "x": -3160.056219160557,
          "y": 557.3029262622199
        }
      },
    ]
  }
}
</pre>

<p>
    Queries can be extended even further in order to drill down into the API and detail exactly what information the developer is looking
    for. This is really where the benefits of GraphQL start to shine. The following depicts an example where the developer only wants to retrieve
    information on shapes in the workspace, and additionally, only wants the <span class="pre">id</span> fields of those shapes:
</p>

<pre>
query getElementsFromWorkspace($workspaceId: String!){
  elements(workspaceId: $workspaceId, type: Shape) {
    __typename
    id
  }
} 
</pre>

<h4>Output</h4>
<pre>
{
  "data": {
    "elements": [
      {
        "__typename": "Shape",
        "id": "60340962fbfaf42d19ab103f"
      }
    ]
  }
}
</pre>

<p>
    These are only the basics of what is possible with GraphQL queries. To find out more about working with them in Bluescape, 
    continue on to the next guides page on <a href="/docs/page/get-list-of-workspaces">Getting a list of Workspaces</a>.
</p>

<br />
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.


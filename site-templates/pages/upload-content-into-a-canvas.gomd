<h1>Upload content into a Canvas for v3</h1>
<p>
<b>Objective</b>: Upload content from a local drive into a workspace.
</p>
<p>
  The currently supported file extensions for uploading content to a Workspace are:

<table class="table table-striped">
        <tr>
          <td>Images</td>
          <td>png, jpeg, gif, tiff, pdf, docx, pptx, xlsx, doc, ppt, xls</td>
        </tr>
        <tr>
            <td>Documents</td>
            <td>doc, docx, ppt, pptx, xls, xlsx, pdf, docMime, docxMime, pptMime, pptxMime, xlsMime, xlsxMime, pdfMime</td>
        </tr>        
        <tr>
          <td>Videos</td>
          <td>mp4, mov, m4v, quicktime, mp4Mime, m4vMime, quicktimeMime</td>
        </tr>
</table>
 
This page contains the implementation details for <a href="#rest-v3">REST APIs v3</a> and for <a href="#graphql">GraphQL APIs</a>, and you can see the page with details for the <a href="/docs/page/upload-content-into-a-canvas-v2">v2 REST APIs</a>.<br />
Please check the previous guide in <a href="/docs/page/create-canvas-and-add-text" target="_BLANK">how to create a Canvas and add a Text Element</a> to see how to create a Canvas and obtain this new Canvas Id. You will need the Canvas Id to position the content to upload inside this Canvas.
</p>
<a name="rest-v3" class="internal-anchor"></a>
<p>
The upload of content into a workspace by APIs can be done in 2 ways:
<ul>
    <li>upload from local drive: <a href="#rest-upload-from-local-drive">REST implementation</a>, and GraphQL implementation.</li>
    <li>upload by URL: <a href="#rest-upload-using-URL">REST implementation</a> and <a href="#graphql-upload-by-url">GraphQL implementation</a></li>
</ul>

<a name="rest-upload-from-local-drive" class="internal-anchor"><h2>Upload from local using REST APIs</h2></a>
<p>
Upload from local
In REST APIs v3, the upload process from your local drive is divided in 3 steps:
<ol>
    <li>Create a zygote or placeholder for the file to upload. Here you will get the credentials to upload the file to a storage service, Amazon S3 in the example.</li>
    <li>Upload the image to Amazon S3</li>
    <li>Link the zygote or placeholder to the uploaded image: it finishes the upload into the workspace</li>
</ol>
</p>
<h4>STEP 1: Create zygote or placeholder for the file to upload</h4>

<p>
This is the first step of three for the upload, for both REST and GraphQL APIs. You will need to create a zygote or placeholder, in the workspace, for the file to upload. This step will generate the Id of the object and the credentials for doing the actual upload of the file. See the details below.
<h3>STEP 1, implementation using REST API</h3>
<table class="table table-striped">
        <tr>
          <td><b>REST API</b></td>
          <td>/v3/workspaces/&lt;workspaceId&gt;/elements</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>  
        <tr>
          <td><b>Comments</b></td>
          <td>&lt;CANVAS_ID&gt; is the ID of the preciously created canvas. This is the canvas where you want to add the uploaded content. The position of the content to upload will be in reference to the top-left corner of this Canvas.</td>
        </tr>
</table>
</p>
<p>
You need to specify the type of the file you will upload. Specify it in the <span class="pre">imageFormat</span> field, according to the specific type of image you are uploading.<br/>
You will also need to assign, the values for the <span class="pre">filename</span> and a <span class="pre">title</span> fields, set as "myImageToUpload.jpg" in the following example:
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
# The default "width" and "height" value is 1000. 
# If your image is smaller than 1000x1000 pixels, and "width" and "height" are not specified, 
# your image will be vertically and horizontally centered within a 1000x1000 placeholder space. 
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;SET_WORKSPACEID&gt;/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{
    "type": "Image",
    "filename": "myImageToUpload.jpg",
    "title": "myImageToUpload.jpg",
    "imageFormat": "jpg",
    "transform": { "x": 100, "y": 100, "scale": 1 }
  }'
</pre>
</p>

<p>
<pre class="lang lang-node">
const request = require('request-promise');
const fs = require('fs');

const token = '&lt;SET_TOKEN&gt;'
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspaceId = '&lt;WORKSPACE_ID&gt;';
const api_version = '/v3';
const filePath = '&lt;PATH_TO_IMAGE&gt;';

const request_headers = {
    'Authorization': "Bearer " + token,
    'Content-Type' : 'application/json'    
};

const zygote_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;';
// The default "width" and "height" value is 1000. 
// If your image is smaller than 1000x1000 pixels, and "width" and "height" are not specified, 
// your image will be vertically and horizontally centered within a 1000x1000 placeholder space.  
const zygote_body = {
    "type": "Image",
    "filename": "myImageToUpload.jpg",
    "title": "myImageToUpload.jpg",
    "imageFormat": "jpg",
    "transform": { "x": 100, "y": 100, "scale": 1 }
}
const zygote_options = {
    headers: request_headers,
    uri: zygote_endpoint,
    method: 'POST',
    json: zygote_body
}

const zygote_response = await request(zygote_options)
.catch(err => console.log(err))

console.log(zygote_response)
const zygote_data = zygote_response.data.content;
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(apiBaseStr); </script>'
workspaceId = '&lt;WORKSPACE_ID&gt;';
api_version = '/v3';
filePath = '&lt;PATH_TO_IMAGE&gt;';

request_headers = {
    'Authorization': "Bearer " + token,
    'Content-Type' : 'application/json'    
}

if __name__ == "__main__":
    zygote_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;'
    # The default "width" and "height" value is 1000. 
    # If your image is smaller than 1000x1000 pixels, and "width" and "height" are not specified, 
    # your image will be vertically and horizontally centered within a 1000x1000 placeholder space. 
    zygote_body = {
        "type": "Image",
        "filename": "myImageToUpload.jpg",
        "title": "myImageToUpload.jpg",
        "imageFormat": "jpg",
        "transform": { "x": 100, "y": 100, "scale": 1 }
    }

    zygote_request = requests.post(zygote_endpoint, headers = request_headers, json = zygote_body)
    zygote_response = zygote_request.json()
    pprint.pprint(zygote_response)

    zygote_data = zygote_response['data']['content']
</pre>
</p>

<p>
The response body you will get should look like this:
<pre>
{
    "data": {
        "content": {
            "uploadId": "60aed93111bf08bf22a2572a",
            "url": "https://s3.us-east-1.amazonaws.com/acceptance-new.public-assets.bluescape.com",
            "fields": {
                "key": "sessions/objects/GDUWtDvSZGtE868PBBk2/60aed93111bf08bf22a2572a.jpg",
                "bucket": "acceptance-new.public-assets.bluescape.com",
                "X-Amz-Algorithm": "AWS4-HMAC-SHA256",
                "X-Amz-Credential": "AKIZIVWWSYKG79KFMQJA/20210526/us-east-1/s3/aws4_request",
                "X-Amz-Date": "20210526T232643Z",
                "Policy": "eyJleHNpcmF0aW9uIjoiMjAyMS0wNS0yNlQyMzozMTo0MVoiLCJjb25kaXRpb25zIjpbWyJlcSIsIiRrZXkiLCJzZXNzaW9ucy9vYmplY3RzL0dEVVd0RHZTWkd0Nzg2OFBCQmsyLzYwYWVkOTMxMTdiZjA4YmYyMmEyNTcyYS5qcGciXSxbImNvbnRlbnQtbGVuZ3RoLXJhbmdlIiwwLDUyNDI4ODAwXSx7ImJ1Y2tldCI6ImFjY2VwdGFuY2Utbmv3LnB1YmxpYy1hc3NldHMuYmx1ZXNjYXBlLmNvbSJ9LHsiWC1BbXotQWxnb3JpdGhtIjoiQVdTNC1ITUFDLVNIQTI1NiJ9LHsiWC1BbXotQ3JlZGVudGlhbCI6IkFLSUFJVldXU1lLRzdES0ZNUUpBLzIwMjEwNTI2L3VzLWVhc3QtMS9zMy9hd3M0X3JlcXVlc3QifSx7IlgtQW16LURhdGUiOiIyMDIxMDUyNlQyMzI2NDFaIn1dfQ==",
                "X-Amz-Signature": "fd521d7b3416a12a9997a2e1a10408f7P8427d9d0ae01A53e65a926f0f07a56d"
            }
        },
        "image": {
            "id": "60aed93111bf08bf22a2572a",
            "zIndex": 1183,
            "transform": {
                "x": 300,
                "y": 100,
                "scaleX": 1,
                "scaleY": 1
            },
            "traits": {
                "http://bluescape.dev/zygote/v1/ingestionState": {
                    "http://bluescape.dev/zygote/v1/ingestionState/timestamp": 1622071601170,
                    "http://bluescape.dev/zygote/v1/ingestionState/stage": "transferring"
                }
            },
            "pinned": false,
            "comments": [],
            "width": 1000,
            "height": 1000,
            "title": "myImageToUpload.jpg",
            "filename": "myImageToUpload.jpg",
            "ingestionState": "transferring",
            "type": "Image",
            "asset": {
                "imageFormat": "jpeg"
            }
        }
    }
}
</pre>
</p>

<p>
At this moment, you will see a placeholder element in the workspace, in the position you specified, displaying a <i>"transferring"</i> message (as shown in the traits in the response body).<br />
From the response body, you will need to use the following fields for the next step:
<table class="table table-striped">
        <tr>
          <td><b>Field</b></td>
          <td><b>Description</b></td>
        </tr>
        <tr>
            <td>data/content/url</td>
            <td>Destination URL to where the file will be uploaded.</td>
        </tr> 
        <tr>
            <td>data/image/id</td>
            <td>This is the Id of the cygote/placeholder created for the file to upload. It is the final Id of the uploaded file.</td>
        </tr>        
        <tr>
          <td>data/content/fields</td>
          <td>These fields are the ones you will need to authenticate with S3 (or the repository you are using) and to upload the file.</td>
        </tr>
</table>

</p>

<h3>STEP 1, implementation using GraphQL API</h3>

<p>
For this first step, in GraphQL you can use the following mutations: <span class="pre">createDocument</span>, <span class="pre">createImage</span>, <span class="pre">createVideo</span>. <br />
In these mutations you will need to use the <span class="pre">filename</span> field to specify that it is an upload from your local drive, and provide the fullpath to the file to upload.
</p>

In the example below, see an example of how to create the zygote for an image, using the <span class="pre">createImage</span> mutation, providing a <span class="pre">"testimage.jpeg"</span> placeholder for the <span class="pre">title</span> and <span class="pre">filename</span> fields:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"#create Image from disk\n#imageFormat: jpeg, jpg, gif, png, tiff, tif, image/jpeg, image/gif, image/png, image/tiff\nmutation createImageFromDisk($ws: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $filename:String! $scale:Float) {\n    createImage(\n          workspaceId: $ws\n          input: {\n            title:$title\n            imageFormat: $imageFormat\n            filename:$filename\n            transform: {\n              x: $x\n              y: $y\n              scale:$scale\n            }\n    }) \n    #return values after creation:    \n    {\n        content{ uploadId url fields}\n        preview{uploadId url fields}\n        image{id width height ingestionState}\n    }\n}","variables":{"ws":"&lt;WORKSPACE_ID&gt;","title":"testimage.jpeg","filename":"testimage.jpeg","imageFormat":"jpeg","previewFormat":"jpeg","x":0,"y":0,"scale":1}}'
</pre>
</p>

<p>
<pre class="lang lang-node">
var request = require('request');
var options = {
  'method': 'POST',
  'url': 'https://api.apps.us.bluescape.com/v3/graphql',
  'headers': {
    'Authorization': 'Bearer &lt;SET_TOKEN&gt;',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    query: `#create Image from disk
#imageFormat: jpeg, jpg, gif, png, tiff, tif, image/jpeg, image/gif, image/png, image/tiff
mutation createImageFromDisk($ws: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $filename:String! $scale:Float) {
    createImage(
          workspaceId: $ws
          input: {
            title:$title
            imageFormat: $imageFormat
            filename:$filename
            transform: {
              x: $x
              y: $y
              scale:$scale
            }
    }) 
    #return values after creation:    
    {
        content{ uploadId url fields}
        preview{uploadId url fields}
        image{id width height ingestionState}
    }
}`,
    variables: {"ws":"&lt;WORKSPACE_ID&gt;","title":"testimage.jpeg","filename":"testimage.jpeg","imageFormat":"jpeg","previewFormat":"jpeg","x":0,"y":0,"scale":1}
  })
};
request(options, function (error, response) {
  if (error) throw new Error(error);
  console.log(response.body);
});

</pre>
</p>

<p>
<pre class="lang lang-python">
import requests

url = "https://api.apps.us.bluescape.com/v3/graphql"

payload="{\"query\":\"#create Image from disk\\n#imageFormat: jpeg, jpg, gif, png, tiff, tif, image/jpeg, image/gif, image/png, image/tiff\\nmutation createImageFromDisk($ws: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $filename:String! $scale:Float) {\\n    createImage(\\n          workspaceId: $ws\\n          input: {\\n            title:$title\\n            imageFormat: $imageFormat\\n            filename:$filename\\n            transform: {\\n              x: $x\\n              y: $y\\n              scale:$scale\\n            }\\n    }) \\n    #return values after creation:    \\n    {\\n        content{ uploadId url fields}\\n        preview{uploadId url fields}\\n        image{id width height ingestionState}\\n    }\\n}\",\"variables\":{\"ws\":\"&lt;WORKSPACE_ID&gt;\",\"title\":\"testimage.jpeg\",\"filename\":\"testimage.jpeg\",\"imageFormat\":\"jpeg\",\"previewFormat\":\"jpeg\",\"x\":0,\"y\":0,\"scale\":1}}"
headers = {
  'Authorization': 'Bearer &lt;SET_TOKEN&gt;',
  'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)

print(response.text)

</pre>
</p>




<h4>STEP 2: Upload the file to S3</h4>
<p>
In this step you will use the S3 credentials, generated in the previous step, to upload the file into S3.<br />
This step is the same for both REST and GraphQL APIs. The main difference will be how you provide the <span class="pre">"fields"</span> values to upload the file to S3.</br>
Please note that you will run an API call directly to  S3 (or the repository you are using), and the credentials for authentication and authorization for the upload are the ones provided in the previous step, in the <span class="pre">data/content/fields</span> block.
</p>
<p>
This is the command to run the upload of the file:
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request POST '&lt;SET-data/content/url&gt;' \
--form 'key="&lt;SET-data/content/field/key&gt;"' \
--form 'bucket="&lt;SET-data/content/field/bucket&gt;"' \
--form 'X-Amz-Algorithm="&lt;SET-data/content/field/X-Amz-Algorithm&gt;"' \
--form 'X-Amz-Credential="&lt;SET-data/content/field/X-Amz-Credential&gt;"' \
--form 'X-Amz-Date="&lt;SET-data/content/field/X-Amz-Date&gt;"' \
--form 'Policy="&lt;SET-data/content/field/Policy&gt;"' \
--form 'X-Amz-Signature="&lt;SET-data/content/field/X-Amz-Signature&gt;"' \
--form 'file=@"&lt;SET_FULL_PATH_TO_LOCAL_FILE"'
</pre>
</p>

<p>
<pre class="lang lang-node">
const uploadToBucket = async (upload_data, file) => {
    const uri = upload_data.url;
    console.log(`Uploading to bucket with url: ${uri}`);
    const formData = {
        key: upload_data.fields.key,
        bucket: upload_data.fields.bucket,
        'X-Amz-Algorithm': upload_data.fields['X-Amz-Algorithm'],
        'X-Amz-Credential': upload_data.fields['X-Amz-Credential'],
        'X-Amz-Date': upload_data.fields['X-Amz-Date'],
        Policy: upload_data.fields.Policy,
        'X-Amz-Signature': upload_data.fields['X-Amz-Signature'],
        file: {
        value: fs.createReadStream(filePath),
        options: {
            filename: file.filename,
            contentType: file.type + '/' + file.imageFormat
            },
        },
    };
    const options = {
        uri,
        method: 'POST',
        formData,
        resolveWithFullResponse: true
        };
    return await request(options)
};

const s3upload_response = await uploadToBucket(zygote_data, zygote_body)
    .catch(err => console.log(err))
    console.log(s3upload_response.statusCode)
</pre>
</p>

<p>
<pre class="lang lang-python">
print('Updateing to bucket with url: ' + zygote_data['url'])
formData = {
    'key': zygote_data['fields']['key'],
    'bucket': zygote_data['fields']['bucket'],
    'X-Amz-Algorithm': zygote_data['fields']['X-Amz-Algorithm'],
    'X-Amz-Credential': zygote_data['fields']['X-Amz-Credential'],
    'X-Amz-Date': zygote_data['fields']['X-Amz-Date'],
    'Policy': zygote_data['fields']['Policy'],
    'X-Amz-Signature': zygote_data['fields']['X-Amz-Signature'],
}

files = {'file': open(filePath, 'rb')}
s3upload_response = requests.post(zygote_data['url'], data=formData, files=files)
pprint.pprint(s3upload_response.status_code)
</pre>
</p>

<p>
This is how the command will look when using the data from Step 1:

<pre>
curl --location --request POST 'https://s3.us-east-1.amazonaws.com/acceptance-new.public-assets.bluescape.com' \
--form 'key="sessions/objects/GDUWtDvSZGtE868PBBk2/60aed93111bf08bf22a2572a.jpg"' \
--form 'bucket="acceptance-new.public-assets.bluescape.com"' \
--form 'X-Amz-Algorithm="AWS4-HMAC-SHA256"' \
--form 'X-Amz-Credential="AKIZIVWWSYKG79KFMQJA/20210526/us-east-1/s3/aws4_request"' \
--form 'X-Amz-Date="20210526T232643Z"' \
--form 'Policy="eyJleHNpcmF0aW9uIjoiMjAyMS0wNS0yNlQyMzozMTo0MVoiLCJjb25kaXRpb25zIjpbWyJlcSIsIiRrZXkiLCJzZXNzaW9ucy9vYmplY3RzL0dEVVd0RHZTWkd0Nzg2OFBCQmsyLzYwYWVkOTMxMTdiZjA4YmYyMmEyNTcyYS5qcGciXSxbImNvbnRlbnQtbGVuZ3RoLXJhbmdlIiwwLDUyNDI4ODAwXSx7ImJ1Y2tldCI6ImFjY2VwdGFuY2Utbmv3LnB1YmxpYy1hc3NldHMuYmx1ZXNjYXBlLmNvbSJ9LHsiWC1BbXotQWxnb3JpdGhtIjoiQVdTNC1ITUFDLVNIQTI1NiJ9LHsiWC1BbXotQ3JlZGVudGlhbCI6IkFLSUFJVldXU1lLRzdES0ZNUUpBLzIwMjEwNTI2L3VzLWVhc3QtMS9zMy9hd3M0X3JlcXVlc3QifSx7IlgtQW16LURhdGUiOiIyMDIxMDUyNlQyMzI2NDFaIn1dfQ=="' \
--form 'X-Amz-Signature="fd521d7b3416a12a9997a2e1a10408f7P8427d9d0ae01A53e65a926f0f07a56d"' \
--form 'file=@"/Users/pj/temp/docs/araucaria.jpg"'
</pre>
</p>

<p>
    <b>IMPORTANT</b>: If the upload process is successful, you will get a return code <span class="pre">204</span>, then proceed to the last step of the upload.
</p>

<h4>STEP 3: Link the zygote or placeholder to the uploaded file</h4>

<p>
The last step is to link the zygote or placeholder to the file we uploaded in the previous step. For this step we will need the id from <span class="pre">data/content/uploadId</span> generated in the response body in step 1.
</p>

<h4>STEP 3, implementation using REST API</h4>

<p>
<table class="table table-striped">
        <tr>
          <td><b>API</b></td>
          <td>/v3/workspaces/&lt;workspaceId&gt;/assets/uploads/&lt;uploadId&gt;</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>PUT</td>
        </tr>  
        <tr>
          <td><b>Comments</b></td>
          <td>&lt;uploadId&gt; is the element Id created in the first step of the upload.</td>
        </tr>
</table>
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request PUT '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;workspaceId&gt;/assets/uploads/&lt;uploadId&gt;' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{}'
</pre>
</p>

<p>
<pre class="lang lang-node">
const request = require('request-promise');

const upload_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/assets/uploads/' + zygote_response.data.content.uploadId
const upload_options = {
    headers: request_headers,
    uri: upload_endpoint,
    method: 'PUT',
    json: {},
    resolveWithFullResponse: true
}

const upload_response = await request(upload_options)
.catch(err => console.log(err))

console.log(upload_response.statusCode)
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests

upload_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/assets/uploads/' + zygote_data['uploadId']
upload_response = requests.put(upload_endpoint, headers= request_headers, json={})
pprint.pprint(upload_response.status_code)
</pre>
</p>

<h4>STEP 3, implementation using GraphQL API</h4>

<p>
Run the <span class="pre">"processAsset"</span> GraphQL mutation to finish the upload process:

<pre>
mutation linkUploadToZygote($workspaceId: String! $uploadID: String!) {
    processAsset( workspaceId:$workspaceId id:$uploadID input:{})
}
</pre>

and provide these variables:
<pre>
{
    "workspaceId": "&lt;WORKSPACE_ID&gt;",
    "uploadID": "&lt;uploadId&gt;"
}
</pre>

Here are examples of the implementation of the mutation:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"\nmutation myProcessAsset($ws: String! $uploadID: String!) {\n    processAsset( workspaceId:$ws id:$uploadID input:{\n    })\n}","variables":{"ws":"&lt;WORKSPACE_ID&gt;","uploadID":"&lt;uploadId&gt;"}}'
</pre>
</p>

<p>
<pre class="lang lang-node">
var request = require('request');
var options = {
  'method': 'POST',
  'url': '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql',
  'headers': {
    'Authorization': 'Bearer &lt;SET_TOKEN&gt;',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    query: `mutation myProcessAsset($ws: String! $uploadID: String!) {
    processAsset( workspaceId:$ws id:$uploadID input:{
    })
}`,
    variables: {"ws":"&lt;WORKSPACE_ID&gt;","uploadID":"&lt;uploadId&gt;"}
  })
};
request(options, function (error, response) {
  if (error) throw new Error(error);
  console.log(response.body);
});

</pre>
</p>

<p>
<pre class="lang lang-python">
import requests

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql"

payload="{\"query\":\"\\nmutation myProcessAsset($ws: String! $uploadID: String!) {\\n    processAsset( workspaceId:$ws id:$uploadID input:{\\n    })\\n}\",\"variables\":{\"ws\":\"&lt;WORKSPACE_ID&gt;\",\"uploadID\":\"&lt;uploadId&gt;\"}}"
headers = {
  'Authorization': 'Bearer &lt;SET_TOKEN&gt;',
  'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)

print(response.text)
</pre>
</p>


</p>


<a name="rest-upload-using-URL" class="internal-anchor"><h2>Upload by URL using REST APIs</h2></a>
<p>
An alternative method to upload content into a workspace is to upload by URL. You can use the URL pointing to a resource to upload it into a workspace.<br />
When should we use this "upload by URL" approach? When you integrate with external services that host images, videos and/or documents, and you want to access them (to view or download them),most of the time you are provided with a URL to those assets, not the actual binary object. Then, you can use that URL to access those assets to upload them directly into a workspace.
<table class="table table-striped">
        <tr>
          <td><b>API</b></td>
          <td>/v3/workspaces/&lt;workspaceId&gt;/elements</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>  
        <tr>
          <td><b>Comments</b></td>
          <td></td>
        </tr>
</table>
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
See the example below to learn how to upload an image by URL.
</p>

<p>
<pre class="lang lang-curl">
# If you do not define height and width, 
# the image will be centered in an squared area defined by whatever value is higher: width or height.
# This may lead to think that the image is wrongly positioned, not in the (x,y) position you specified.
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;SET_WORKSPACEID&gt;/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{
    "type": "Image",
    "transform": {
        "x": 50,
        "y": 50
    },
    "sourceUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG",
    "imageFormat": "jpg",
    "title": "Yosemite"
}'
</pre>
</p>

<p>
<pre class="lang lang-node">
const request = require('request-promise');

const token = '&lt;SET_TOKEN&gt;'
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspaceId = '&lt;WORKSPACE_ID&gt;';
const api_version = '/v3';

const request_headers = {
    'Authorization': "Bearer " + token,
    'Content-Type' : 'application/json'    
};

async function main() {
    const zygote_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;';
    const zygote_body = {
        "type": "Image",
        "title": "Yosemite",
        "imageFormat": "jpg",
        "transform": { "x": 50, "y": 50, "scale": 1 },
        "sourceUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG"
    }
    const zygote_options = {
        headers: request_headers,
        uri: zygote_endpoint,
        method: 'POST',
        json: zygote_body
    }

    const zygote_response = await request(zygote_options)
    .catch(err => console.log(err))

    answer = JSON.stringify(zygote_response);
    console.log(answer);
}

main();
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
workspaceId = '&lt;WORKSPACE_ID&gt;';
api_version = '/v3';

request_headers = {
    'Authorization': "Bearer " + token,
    'Content-Type' : 'application/json'    
}

if __name__ == "__main__":
    zygote_endpoint = portal + api_version + '/workspaces/' + workspaceId + '/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;'
    zygote_body = {
        "type": "Image",
        "title": "Yosemite view",
        "imageFormat": "jpg",
        "transform": { "x": 50, "y": 50, "scale": 1 },
        "sourceUrl": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG"
    }

    zygote_request = requests.post(zygote_endpoint, headers = request_headers, json = zygote_body)
    zygote_response = zygote_request.json()
    pprint.pprint(zygote_response)
</pre>
</p>
<p>
In the REST APIs, while the image is still uploading, the status is visible in the traits of the elements, as <span class="pre">"transfering"</span> in the response body. For example:
<pre>
{
  "data": {
    "image": {
      "id": "&lt;IMAGE_ID&gt;",
      ...
      "traits": {
        "http://bluescape.dev/zygote/v1/ingestionState": {
          "http://bluescape.dev/zygote/v1/ingestionState/timestamp": 1633481223994,
          "http://bluescape.dev/zygote/v1/ingestionState/stage": "transferring"
        }
      }
      ...
    }
  }
}
</pre>
Once the upload is completed, the traits will be empty, which means that the image upload is complete and you can access it in the workspace.
</p>

<p>
To upload video you will use the same API, but slightly different payload. The main changes are the value in <span class="pre">type</span> and use a <span class="pre">videoFormat</span> field instead of <span class="pre">imageFormate</span>. The example below is set to upload a .mov video:

<pre>
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;SET_WORKSPACEID&gt;/elements?relativeToOriginOf=&lt;CANVAS_ID&gt;' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{
    "type": "Video",
    "transform": {
        "x": 12000,
        "y": 200
    },
    "sourceUrl": "&lt;ADD_URL_TO_MOV_VIDEO&gt;",
    "videoFormat": "mov"
   
}'
</pre>
</p>

<a name="graphql-upload-by-url" class="internal-anchor"><h2>Upload by URL using GraphQL APIs</h2></a>
<p>
You can use the URL pointing to a resource to upload it into a workspace.<br />
When should we use this "upload by URL" approach? When you integrate with external services that host images, videos and/or documents, and you want to access them (to view or download them),most of the time you are provided with a URL to those assets, not the actual binary object. Then, you can use that URL to access those assets to upload them directly into a workspace.
</p>
<p>
Please note that &lt;CANVAS_ID&gt; is the ID of the preciously created canvas. This is the canvas where you want to add the uploaded content. The position of the content to upload will be in reference to the top-left corner of this Canvas.
You can use the following mutations: <span class="pre">createDocument</span>, <span class="pre">createImage</span>, <span class="pre">createVideo</span>.
To specify that you will sue a URL for the upload of the asset, you will need to use the <span class="pre">sourceUrl</span> field in the mutation, to specify the URL of the asset to upload.
</p>
<p>
Example of <span class="pre">createImage</span> mutation:
<pre>
mutation uploadImageFromURL($workspaceId: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $url:String! $scale:Float $idCanvasRelativeTo:String!) {
    createImage(
          workspaceId: $workspaceId, relativeToOriginOf: $idCanvasRelativeTo
          input: {
            title:$title
            imageFormat: $imageFormat
            sourceUrl: $url
            transform: {
              x: $x
              y: $y
              scale:$scale
            }
    }) 
    #return values after creation:
    {
        content{ uploadId url fields}
        preview{uploadId url fields}
        image{id width height ingestionState}
    }
}
</pre>

and these are the variables for the mutation above:
<pre>
{
    "workspaceId": "&lt;workspaceId&gt;",
    "idCanvasRelativeTo": "&lt;CANVAS_ID&gt;",
    "title":"&lt;title_or_filename&gt;",
    "imageFormat":"&lt;SEE_ALLOWED_TYPES_AT_THE_TOP_OF_THE_PAGE&gt;",
    "previewFormat":"&lt;SEE_ALLOWED_TYPES_AT_THE_TOP_OF_THE_PAGE&gt;",
    "url":"&lt;URL_POINTING_TO_THE_IMAGE_TO_UPLOAD&gt;",
    "x":&lt;X_COORDINATE&gt;,
    "y":&lt;Y_COORDINATE&gt;,
    "scale":&lt;SCALE_FACTOR&gt;
}
</pre>

</p>
Example of parameters to load an image:
<pre>
{
    "workspaceId": "&lt;workspaceID&gt;",
    "idCanvasRelativeTo": "&lt;CANVAS_ID&gt;",
    "title":"Yosemite, open view",
    "imageFormat":"jpeg",
    "previewFormat":"jpeg",
    "url":"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG",
    "x":0,
    "y":0,
    "scale":1
}
</pre>

<p>
    Here are implementation examples for the upload by URL using GraphQL and the sample image above:
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
    <pre class="lang lang-curl">
curl --location -g --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"mutation uploadImageFromURL($workspaceId: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $url:String! $scale:Float $idCanvasRelativeTo:String!) {\n    createImage(\n          workspaceId: $workspaceId, relativeToOriginOf: $idCanvasRelativeTo\n          input: {\n            title:$title\n            imageFormat: $imageFormat\n            sourceUrl: $url\n            transform: {\n              x: $x\n              y: $y\n              scale:$scale\n            }\n    }) \n    #return values after creation:\n    {\n        content{ uploadId url fields}\n        preview{uploadId url fields}\n        image{id width height ingestionState}\n    }\n}","variables":{"ws":"&lt;WORKSPACE_ID&gt;","idCanvasRelativeTo": "&lt;CANVAS_ID&gt;","title":"Yosemite, grand view","imageFormat":"jpeg","previewFormat":"gif","url":"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG","x":0,"y":0,"scale":1}}'    
    </pre>
</p>

<p>
<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql"
const token = "&lt;SET_TOKEN&gt;"
const query =
    `mutation uploadImageFromURL($workspaceId: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $url:String! $scale:Float $idCanvasRelativeTo: String!) {
        createImage(
              workspaceId: $workspaceId, relativeToOriginOf: $idCanvasRelativeTo
              input: {
                title:$title
                imageFormat: $imageFormat
                sourceUrl: $url
                transform: {
                  x: $x
                  y: $y 
                  scale:$scale
                }
        }) 
        #return values after creation:
        {
            content{ uploadId url fields}
            preview{uploadId url fields}
            image{id width height ingestionState}
        }
    }`
const variables = {
    "workspaceId": "&lt;WORKSPACE_ID&gt;",
    "idCanvasRelativeTo": "&lt;CANVAS_ID&gt;",
    "title": "Yosemite, open view",
    "imageFormat": "jpeg",
    "previewFormat": "jpeg",
    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG",
    "x": 0,
    "y": 0,
    "scale": 1
}
const uploadImageByURL = async () => {
    try {
        const response = await axios.post(url,
            {
                query: query,
                variables: variables
            },
            { headers: { "Authorization": "Bearer " + token } })

        answerData = JSON.stringify(response.data);
        console.log(answerData);
        return response
    }
    catch (error) {
        console.error(error)
    }
}

uploadImageByURL();
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

'''
Required modules:
   requests 2.22.0
'''

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql"
token = "&lt;SET_TOKEN&gt;"
query = """
    mutation uploadImageFromURL($workspaceId: String! $x:Float! $y:Float! $title:String! $imageFormat:ImageFormatInput! $url:String! $scale:Float $idCanvasRelativeTo: String!) {
        createImage(
              workspaceId: $workspaceId, relativeToOriginOf: $idCanvasRelativeTo
              input: {
                title:$title
                imageFormat: $imageFormat
                sourceUrl: $url
                transform: {
                  x: $x
                  y: $y 
                  scale:$scale
                }
        }) 
        #return values after creation:
        {
            content{ uploadId url fields}
            preview{uploadId url fields}
            image{id width height ingestionState}
        }
    }
    """

variables = {
    "workspaceId": "&lt;WORKSPACE_ID&gt;",
    "idCanvasRelativeTo": "&lt;CANVAS_ID&gt;",
    "title": "Yosemite, open view",
    "imageFormat": "jpeg",
    "previewFormat": "jpeg",
    "url": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Yosemite_nat_park_valley_view.JPG/1200px-Yosemite_nat_park_valley_view.JPG",
    "x": 0,
    "y": 0,
    "scale": 1
}

def makeQuery():
    response = requests.post(url,
                             headers={"Authorization": "Bearer " + token
                                      },
                             json={
                                 'query': query,
                                 'variables': variables
                             })
    return response.json()

if __name__ == "__main__":
    response = makeQuery()
    pprint.pprint(response)

</pre>
</p>

<p>
The immediate answer is an <span class="pre">"ingestionState": "transferring"</span> status, it means that the upload has started: 

<pre>
{
  "data": {
    "createImage": {
      "content": null,
      "preview": null,
      "image": {
        "id": "615c7d676c89c876cd079349",
        "width": 1000,
        "height": 1000,
        "ingestionState": "transferring"
      }
    }
  }
}
</pre>
</p>

<a name="graphqlCheckIngestionStatus" class="internal-anchor"><h2>Review the upload Ingestion Status using GraphQL APIs</h2></a>

<p>
To verify that an image has been successfully uploaded, you can verify the  value of the <span class="pre">ingestionState</span> field of a particular image, using the image id:

<pre>
query checkStatusImageIngestion ($workspace: String! $imageId: String!){
    elements(workspaceId:$workspace type:Image id:$imageId) {
    	... on Image {
          id
          __typename
          ingestionState
         }
  }
}
</pre>

</p>
<p>
Use these variables:

<pre>
{
  "workspace": "&lt;WORKSPACE_ID&gt;",
  "imageId" : "&lt;IMAGE_ID&gt;"

}
</pre>
</p>
<p>
The response will inform you of the current status of the ingestion of the upload (image, video or document). For example, for an image for which the upload has been completed:

<pre>
{
  "data": {
    "elements": [
      {
        "id": "&lt;IMAGE_ID&gt;",
        "__typename": "Image",
        "ingestionState": "complete_success"
      }
    ]
  }
}
</pre>

</p>

<p>
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.
</p>

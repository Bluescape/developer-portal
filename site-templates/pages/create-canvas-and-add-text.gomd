<h1>Create a Canvas and add a Text Element to it for v3</h1>

<p>
<b>Objective</b>: Create a new Canvas in your Workspace and add a Text element to this new Canvas. You will learn how to get the IDs of newly created objects within your Workspace, and how to use them to associate other objects with them. You will need the <span class="pre">workspaceId</span>.<br />  
This page contains the implementation details for <a href="#rest">v3 REST APIs</a> and for <a href="#graphql">v3 GraphQL APIs</a>. You can also see the example for <a href="/docs/page/create-canvas-and-add-text-v2">v2 REST APIs</a>.
</p>

<a name="rest" class="internal-anchor"><h2>Implementation using REST APIs</h2></a>

<h4>Create Canvas</h4>

<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v3/workspaces/&lt;workspaceId&gt;/elements</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>
        <!-- 
        <tr>
            <td><b>Developer Portal URL</b></td>
            <td><a href="/reference/apis#Canvas:postWorkspacesElementsCanvasByWorkspaceid">[[developerPortalHost]]/reference/apis#Canvas:postWorkspacesElementsCanvasByWorkspaceid</a></td>
        </tr>
        -->
        <tr>
          <td><b>Body</b></td>
            <td>
            <pre>
{
&nbsp;&nbsp;&nbsp;&nbsp; "type": "Canvas",
&nbsp;&nbsp;&nbsp;&nbsp; "name": "&lt;SET_CANVAS_NAME&gt;"
}</pre>
            </td>
        </tr>
        <tr>
          <td><b>Comments</b></td>
          <td>You need to know the workspace ID.</td>
        </tr>
</table>

<h4>Create Text within Canvas</h4>

<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v3/workspaces/&lt;workspaceId&gt;/elements</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>
        <!-- 
        <tr>
            <td><b>Developer Portal URL</b</td>
            <td><a href="/reference/apis#Notes:postWorkspacesElementsCanvasNotesByWorkspaceidCanvasid">[[developerPortalHost]]/reference/apis#Notes:postWorkspacesElementsCanvasNotesByWorkspaceidCanvasid</a></td>
        </tr>
        -->
        <tr>
            <td><b>Body</b></td>
            <td>
            <pre>
{
&nbsp;&nbsp;&nbsp;&nbsp; "type": "Text",
&nbsp;&nbsp;&nbsp;&nbsp; "text": "&lt;SET_TEXT&gt;"
}</pre>
            </td>
        </tr>
        <tr>
          <td><b>Comments</b></td>
          <td>You need to ensure that the Text's size fits within the Canvas' boundaries. You also need to ensure that the Text's position falls within the Canvas' boundaries. </br>
              If you need to change the dimensions or position of the Text, you'll need to add extra parameters in the Body of your request. </br>
              <b>To change the dimensions of the Text object, the body should look like this:</b></br>
              <pre>{
&nbsp;&nbsp;&nbsp;&nbsp; "type": "Text",
&nbsp;&nbsp;&nbsp;&nbsp; "text": "&lt;SET_TEXT&gt;",
&nbsp;&nbsp;&nbsp;&nbsp; "style": {"width": "&lt;SET_WIDTH&gt", "height": "&lt;SET_HEIGHT&gt"}
}</pre>
              
              By specifying the <b>relativeToOriginOf</b> query parameter in the endpoint, /v3/workspaces/{workspaceId}/elements<b>?relativeToOriginOf={CANVAS_ID}</b>, the position of the text content will be relative to the top-left corner of the Canvas.</br>
              <b>To change the position of the Text, the body should look like this:</b></br>
            <pre> 
{
&nbsp;&nbsp;&nbsp;&nbsp; "type": "Text",
&nbsp;&nbsp;&nbsp;&nbsp; "text": "&lt;SET_TEXT&gt;",
&nbsp;&nbsp;&nbsp;&nbsp; "transform": {"x": "&lt;SET_X&gt;", "y": "&lt;SET_Y&gt;"}
}</pre>   

              <b>To change the font of the Text, the body should look like this: </b></br>
            <pre> 
{
&nbsp;&nbsp;&nbsp;&nbsp; "type": "Text",
&nbsp;&nbsp;&nbsp;&nbsp; "text": "&lt;SET_TEXT&gt;",
&nbsp;&nbsp;&nbsp;&nbsp; "style": {"fontSize": "&lt;SET_SIZE&gt"}
}</pre>   
You can place the <span class='pre'>style</span> and <span class='pre'>transform</span> parameters into the body of the request to change the dimensions, position and font simultaneously.       

               </br>
          </td>       
        </tr> 
</table> </br>
<b>NOTE:</b> For this basic example, the above "Comments" section is not applicable.

<h2>Code sample</h2>

<p>
    See below code samples in Python and Node.js.
</p>


<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-python">
# Python Code (python 3.5+)
import requests
import datetime
import pprint

'''

Required modules:
    requests 2.22.0

'''

token = '&lt;SET_TOKEN&gt;'        

if __name__ == "__main__":
    portal = '<script type="text/javascript">document.write(apiBaseStr); </script>' 
    workspaceId = '&lt;SET_WORKSPACE_ID&gt;'  # REMEMBER TO ADD WORKSPACE ID

    # Create new Canvas
    # Path:     /v3/workspaces/&lt;workspaceId&gt;/elements

    API_endpoint = '/v3/workspaces/' + workspaceId + '/elements'

    timestamp = datetime.datetime.now()

    data_load = {
        "type": "Canvas",
        "name": "&lt;SET_CANVAS_NAME&gt;"
    }

    the_request = requests.post(
        portal + API_endpoint,
        headers={"Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                    },
        json=data_load
    )

    json_response = the_request.json()
    # pprint.pprint(json_response) 

    canvasId = json_response['data']['id']


    # Add Text to a canvas  
    # Path: 	/v3/workspaces/&lt;workspaceId&gt;/elements

    API_endpoint = '/v3/workspaces/' + workspaceId + '/elements' + '?relativeToOriginOf=' + canvasId
    params = ''

    timestamp = datetime.datetime.now()

    # The X and Y coordinates for objects within a Canvas are relative to the top left corner of the Canvas
    data_load = {
        "type": "Text",
        "text": "&lt;SET_TEXT&gt;"
    }

    the_request = requests.post(
        portal + API_endpoint,
        headers={"Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                    },
        json=data_load
    )

    json_response = the_request.json()

    pprint.pprint(json_response)

    textId = json_response['data']['id']
</pre>
</p>

<p>
<pre class="lang lang-node">
// Node.js Javascript
/*

How to run:
node this_script_name.js

Requires "axios" module (0.19.0), run:
npm install axios

website: https://github.com/axios/axios

*/

var axios = require('axios');

const token = '&lt;SET_TOKEN&gt;';
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspaceId = '&lt;SET_WORKSPACE_ID&gt;';
const api_version = 'v3';
var api_endpoint = '/workspaces/' + workspaceId + '/elements';

function runRequest(portal,api_version,api_endpoint,the_method,data_load) {
    var request_values = {
        url : portal + '/' + api_version + api_endpoint,
        method : the_method ,
        headers : {
            'Authorization': "Bearer " + token,
            'Content-Type' : 'application/json'    
        },
        data : data_load,
    };

    let req = axios(request_values)
            .catch(error => { 
                console.error('ERROR processing ' + portal + '/' + api_version + api_endpoint);
                console.error(error.message); 
                console.error(error.response.data);
                return Promise.reject(error);
            });;
    
    return req;
}

async function runAPIRequests() {
    try {

        // Create canvas

        api_endpoint = '/workspaces/' + workspaceId + '/elements';
        the_method = 'POST';
        var currtime = new Date().toISOString().slice(0,16).replace('T',' ');

        data_load = {
            "type": "Canvas",
            "name": "&lt;SET_CANVAS_NAME&gt;"
        }
        
        var canvas_creation = await runRequest(portal,api_version,api_endpoint,the_method,data_load);

        const canvasId = canvas_creation.data.data.id;
        console.log("canvas ID: " + canvasId);

        // Now add Text to the Canvas

        currtime = new Date().toISOString().slice(0,16).replace('T',' ');

        api_endpoint = '/workspaces/' + workspaceId + '/elements' + '?relativeToOriginOf=' + canvasId
        method = 'POST';
        data_load = {
            "type": "Text",
            "text": "&lt;SET_TEXT&gt;"
        }


        var text_creation = await runRequest(portal,api_version,api_endpoint,the_method,data_load);

        var textId = text_creation.data.data.id;
        console.log('Text ID: ' + textId);

    } catch (error) {
        console.error('ERROR:');
        console.error(error.message);
    }
}

// Run the requests
runAPIRequests();
</pre>
</p>


<h2>OUTPUT</h2>

<p>
Each time you run a POST API, you will get back a Response Body with the properties of the newly created object. Within this data you can get the object ID and other important information.
</p>


<table class="table table-striped">
        <tr>
            <td><b>Element</b></td>
            <td><b>Json</b></td>
        </tr>
        <tr>
            <td>Element ID</td>
            <td>['data']['id']</td>
        </tr>
        <tr>
            <td>Element Type</td>
            <td>['data']['type']</td>
        </tr>
        <tr>
            <td>Element Position and Size</td>
            <td>['data']['transform']</td>
        </tr>
      
      </table>


<h3>Output Json sample</h3>

<h4>Canvas creation</h4>

From this response, you can obtain the newly created Canvas ID: ['data']['id']
<pre>
{
    "data": {
        "id": "600223e68de4a9001c434fe4",
        "zIndex": 36,
        "transform": {
            "x": 0,
            "y": 0
        },
        "traits": null,
        "pinned": false,
        "type": "Canvas",
        "name": "Test Canvas",
        "style": {
            "width": 1000,
            "height": 1000,
            "borderColor": {
                "r": 238,
                "g": 85,
                "b": 80,
                "a": 1
            }
        }
    }
}
</pre>

<h4>Text Creation</h4>
<pre>
{
    "data": {
        "id": "604abe996a3fdb001f7cec3b",
        "zIndex": 0,
        "transform": {
            "x": 0,
            "y": 0,
            "scaleX": 1,
            "scaleY": 1
        },
        "traits": null,
        "pinned": false,
        "type": "Text",
        "text": "Text Example",
        "style": {
            "width": 256,
            "height": 298,
            "fontWeight": "normal",
            "textTransform": "none",
            "fontSize": 64,
            "fontFamily": "Dosis",
            "fontStyle": "normal",
            "color": {
                "r": 234,
                "g": 62,
                "b": 53,
                "a": 1
            },
            "backgroundColor": {
                "r": 0,
                "g": 0,
                "b": 0,
                "a": 1
            }
        }
    }
}
</pre>

<a name="graphql" class="internal-anchor"><h2>Implementation using v3 GraphQL APIs</h2></a>

<p>
    To begin, you will need to create a Canvas in your Workspace that can be used to group your elements in. To do this, you will need only the WorkspaceID
    in which you want to create the Canvas. For information on how to get this, see our previous guide on <a href="/docs/page/get-list-of-workspaces#graphql">Getting a List of Workspaces using GraphQL</a>.
    The information you'll need returned from this call is only the (x,y) coordinates of where it is placed, so that you can
    add a Text element to the Canvas in the next step. Many additional properties can be given to the Canvas upon creation, but it will be kept simple
    for the sake of this introduction. This can be specified in a relatively simple query as follows:
</p>

<pre>
mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
    createCanvas(workspaceId: $workspaceId, input: $input) {
        __typename
        name
        id
        transform { x y }
    }
}
</pre>
<p>
    Notice that this is a <i>mutation</i> operation and not a query. This is because it is a Create request instead of just retrieving data, similar to
    creating a POST request instead of a GET in typical REST APIs. This can be called with the following example parameters:
</p>

<pre>
{
    "workspaceId": "&lt;SET_WORKSPACEID&gt;",
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100}
    }
}
</pre>

<h3>Output</h3>

<pre>
{
    "data": {
        "createCanvas": {
            "__typename": "Canvas",
            "name": "Example Canvas",
            "id": "606216cdebc71453d4d758bf",
            "transform": {
                "x": 100,
                "y": 100
            }
        }
    }
}
</pre>
<p>
In the output above, the value of "id" will change every time that you run the <span class="pre">createCanvas</span> mutation.
</p>
<p>
    You can now create a Text element within the newly created Canvas. To do this, construct another query to create a Text element.
    You will need to ensure that the Text position and size fit within the canvas. For that, we can provide de ID of the Canvas we just created as the value for <span class="pre">relativeToOriginOf</span> in the new mutation. We will use that Canvas as the starting point for the <span class="pre">x,y</span> position in <span class="pre">transform</span>, where the position will be relative to the top-left corner of the Canvas. If you do not use the <span class="pre">relativeToOriginOf</span> parameter, then the <span class="pre">x,y</span> position is absolute to the center of the workspace.<br/>
    Also, the <span class="pre">style</span> parameters give you the ability to define additional properties such as <span class="pre">height</span>, <span class="pre">width</span>, and <span class="pre">font</span>.
</p>

<pre>
mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
    createText(workspaceId: $workspaceId, relativeToOriginOf: $idRelativeTo, input: $input) {
        __typename
        id
        text
        transform {x y }
    }
}      
</pre>
<p>
    Which can be ran with parameters such as: 
</p>
<pre>
{
    "workspaceId": "&lt;SET_WORKSPACEID&gt;",
    "idRelativeTo" : "&lt;SET_CANVAS_ID&gt;"
    "input": {
        "text": "Example text inside canvas",
        "transform": {
            "x": 150,
            "y": 150,
            "scaleX": 1,
            "scaleY": 1
        },
        "style": {
            "height": 100,
            "width": 300,
            "fontFamily": "Helvetica",
            "fontSize": 24
        }
    }
}
</pre>

<h2>Code sample</h2>

<p>
    See below for full code examples of this implementation in Python and Node.js.
</p>

<div class="lang-selector">
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(apiBaseStr);</script>/v3/graphql/"
const token = "&lt;SET_TOKEN&gt;"
const workspaceId = "&lt;SET_WORKSPACEID&gt;"

const makeQuery = async (query, params) => {
    try {
        const response = await axios.post(url,
            {
                query: query,
                variables: params
            }, 
            {headers: {"Authorization": "Bearer " + token}
        })
        return response.data
    }
    catch(error) {
        console.error(error)
    }
}

async function startProcess() {

    const canvasQuery = 
        `mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
            createCanvas(workspaceId: $workspaceId, input: $input) {
                __typename
                name
                id
                transform { x y }
            }
        }`

    const canvasParams = {
        "workspaceId": workspaceId,
        "input": {
            "name": "Example Canvas",
            "transform": {
                "x": 100,
                "y": 100
                }
            }
        
        }
    const canvasResponse = await makeQuery(canvasQuery, canvasParams);
    console.log(canvasResponse);

    canvasID = canvasResponse.data.id; 

    const textQuery =
        `mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
            createText(workspaceId: $workspaceId, relativeToOriginOf: $idRelativeTo, input: $input) {
            __typename
            id
            text
            transform { x y }
            }
        }`

    const textParams = {
        "workspaceId": workspaceId,
        "idRelativeTo" : canvasID,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": 50,
                "y": 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }

    const textResponse = await makeQuery(textQuery, textParams);
    console.log(textResponse);
}

startProcess();
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/"
token = "&lt;SET_TOKEN&gt;"
workspaceId = "&lt;SET_WORKSPACEID&gt;"

def makeQuery(query, params):

    response = requests.post(url, 
    headers={"Authorization": "Bearer " + token
    },
    json={
            'query': query,
            'variables': params
        })

    return response.json()

if __name__ == "__main__":
    canvasQuery = """
    mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
        createCanvas(workspaceId: $workspaceId, input: $input) {
            __typename
            name
            id
            transform { x y }
        }
    }
    """

    canvasParams = {
    "workspaceId": workspaceId,
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100
            }
        }
    }

    canvasResponse = makeQuery(canvasQuery, canvasParams)
    pprint.pprint(canvasResponse)

    canvasID = canvasResponse['data']['id']

    textQuery = """
    mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
        createText(workspaceId: $workspaceId, relativeToOriginOf: $idRelativeTo, input: $input) {
            __typename
            id
            text
            transform { x y }
        }
    }
    """
    textParams = {
        "workspaceId": workspaceId,
        "idRelativeTo" : canvasID,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": 50,
                "y": 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }
    
    textResponse = makeQuery(textQuery, textParams)
    pprint.pprint(textResponse)
</pre>
</p>

<br />
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.



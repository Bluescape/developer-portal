<h1>Create a Canvas and add a Text Element to it</h1>

<p>
<b>Objective</b>: Create a new Canvas in your Workspace and add a Text element to this new Canvas. You will learn how to get the IDs of newly created objects within your Workspace, and how to use them to associate other objects with them. You will need the <span class="pre">workspaceId</span>.<br />  
This page contains the implementation details for <a href="#rest">v2 REST APIs</a> and for <a href="#graphql">v3 GraphQL APIs</a>.
</p>

<a name="rest" class="internal-anchor"><h2>Implementation using REST APIs</h2></a>

<h4>Create Canvas</h4>

<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v2/workspaces/&lt;SET_WORKSPACEID&gt;/elements/canvas</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>
        <tr>
          <td><b>Comments</b></td>
          <td>You need to know the workspace ID.</td>
        </tr>
</table>

<h4>Create Text within Canvas</h4>
<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v2/workspaces/&lt;SET_WORKSPACEID&gt;/elements/canvas/&lt;canvas_id&gt;/text</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>POST</td>
        </tr>
        <tr>
            <td><b>Comments</b></td>
            <td>You need to know the Canvas ID</td>
        </tr>        
</table> 
</br>
<!-- 
<b>NOTE:</b> For this basic example, the above "Comments" section is not applicable.
-->
<h2>Code sample</h2>

<p>
    See below code samples in Python and Node.js.
</p>


<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-python">
## Python Code (python 3.5+)
import requests
import datetime
import pprint

'''

Required modules:
    requests 2.22.0

'''

token = '&lt;SET_TOKEN&gt;'        

if __name__ == "__main__":
    portal = 'https://api.apps.us.bluescape.com' 
    workspace_uid = '&lt;SET_WORKSPACE_ID&gt;'  # REMEMBER TO ADD WORKSPACE UID

    # Create new Canvas
    # Path:     /v2/workspaces/<workspace_uid>/elements/canvas

    API_endpoint = '/v2/workspaces/' + workspace_uid + '/elements/canvas'

    timestamp = datetime.datetime.now()

    data_load = {
        'x': 10000,
        'y': 1000,
        'width': 4000,
        'height': 4000,
        'name': "New Canvas - Creation time: " + str(timestamp),
        'borderColor': 'Yellow'
    }

    the_request = requests.post(
        portal + API_endpoint,
        headers={"Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                    },
        json=data_load
    )

    json_response = the_request.json()
    # pprint.pprint(json_response) 

    canvas_id = json_response['canvas']['id']

    # Add a Note to a canvas  
    # Path: 	/v2/workspaces/<workspace_uid>/elements/canvas/<canvas_id>/text

    API_endpoint = '/v2/workspaces/' + workspace_uid + '/elements/canvas/' + canvas_id + '/text'
    params = ''

    timestamp = datetime.datetime.now()

    # The X and Y coordinates for objects within a Canvas are relative to the top left corner of the Canvas
    data_load = {
        "x": 400,
        "y": 400,
        "text": "Hello! New Text, added at " + str(timestamp)
    }

    the_request = requests.post(
        portal + API_endpoint,
        headers={"Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                    },
        json=data_load
    )

    json_response = the_request.json()

    pprint.pprint(json_response)

    text_id = json_response['text']['id']
</pre>
</p>

<p>
<pre class="lang lang-node">
// Node.js Javascript
/*

How to run:
node this_script_name.js

Requires "axios" module (0.19.0), run:
npm install axios

website: https://github.com/axios/axios

*/

var axios = require('axios');

const token = '&lt;SET_TOKEN&gt;';
const portal = 'https://api.apps.us.bluescape.com';
const workspace_uid = '&lt;SET_WORKSPACE_ID&gt;';
const api_version = 'v2';
var api_endpoint = '/workspaces/' + workspace_uid + '/elements/images';

function runRequest(portal,api_version,api_endpoint,the_method,data_load) {
    var request_values = {
        url : portal + '/' + api_version + api_endpoint,
        method : the_method ,
        headers : {
            'Authorization': "Bearer " + token,
            'Content-Type' : 'application/json'    
        },
        data : data_load,
    };

    let req = axios(request_values)
            .catch(error => { 
                console.error('ERROR processing ' + portal + '/' + api_version + api_endpoint);
                console.error(error.message); 
                console.error(error.response.data);
                return Promise.reject(error);
            });;
    
    return req;
}

async function runAPIRequests() {
    try {

        // Create canvas

        api_endpoint = '/workspaces/' + workspace_uid + '/elements/canvas';
        the_method = 'POST';
        var currtime = new Date().toISOString().slice(0,16).replace('T',' ');

        data_load = {
            'x': 1000,
            'y': 1000,
            'width': 4000,
            'height': 4000,
            'name': "New Canvas - Creation time: " + currtime ,
            'borderColor': 'Yellow'
        }
        
        var canvas_creation = await runRequest(portal,api_version,api_endpoint,the_method,data_load);

        const canvas_id = canvas_creation.data.canvas.id;

        console.log("canvas ID: " + canvas_id);

        // Now add a Note to the Canvas

        currtime = new Date().toISOString().slice(0,16).replace('T',' ');

        api_endpoint = '/workspaces/' + workspace_uid + '/elements/canvas/' + canvas_id + '/text'
        method = 'POST';
        data_load = {
            "x": 400,
            "y": 400,
            "text": "Hello! New Text, added at " + currtime
        }


        var text_creation = await runRequest(portal,api_version,api_endpoint,the_method,data_load);

        var text_id = text_creation.data.note.id;

        console.log('Text ID: ' + text_id);

    } catch (error) {
        console.error('ERROR:');
        console.error(error.message);
    }
}

// Run the requests
runAPIRequests();
</pre>
</p>


<h2>OUTPUT</h2>


      
</table>
<!-- v3
<table class="table table-striped">
        <tr>
            <td><b>Element</b></td>
            <td><b>Json</b></td>
        </tr>
        <tr>
            <td>Element ID</td>
            <td>['data']['id']</td>
        </tr>
        <tr>
            <td>Element Type</td>
            <td>['data']['type']</td>
        </tr>
        <tr>
            <td>Element Position and Size</td>
            <td>['data']['transform']</td>
        </tr>
      
</table>
-->


<h3>Output Json sample</h3>

<h4>Canvas creation</h4>
<p>
From this answer you can obtain the newly created Canvas ID: ['canvas']['id'] 
<pre>
{'canvas': {'borderColor': 'Yellow',
            'height': 4000,
            'id': '5d3f40a660c139001477f4ea',
            'name': 'New Canvas - Creation time: 2019-07-29 11:53:26.290894',
            'order': 215,
            'width': 4000,
            'x': 10000,
            'y': 1000}
}    
</pre>
</p>

<h4>Text creation</h4>

<pre>
{
    "text": {
        "id": "60b9bfb39ce614001754291b",
        "workspace_id": "F1rv19jfopwAbjgQVKLY",
        "x": 1000,
        "y": 900,
        "width": 600,
        "height": 400,
        "text": "Hello! New Text, added at 2021-05-26T23:26:43Z",
        "fontSize": 64,
        "fontFamily": "Dosis",
        "fontColor": "#0000FF",
        "fontWeight": "normal",
        "fontStyle": "normal",
        "textTransform": "inherit",
        "backgroundColor": "#FFFFFF",
        "pin": false,
        "order": 1
    }
}  
</pre>


<!-- v3
From this response, you can obtain the newly created Canvas ID: ['data']['id']
<pre>
{
    "data": {
        "id": "600223e68de4a9001c434fe4",
        "zIndex": 36,
        "transform": {
            "x": 0,
            "y": 0
        },
        "traits": null,
        "pinned": false,
        "type": "Canvas",
        "name": "Test Canvas",
        "style": {
            "width": 1000,
            "height": 1000,
            "borderColor": {
                "r": 238,
                "g": 85,
                "b": 80,
                "a": 1
            }
        }
    }
}
</pre>

<h4>Text Creation</h4>
<pre>
{
    "data": {
        "id": "604abe996a3fdb001f7cec3b",
        "zIndex": 0,
        "transform": {
            "x": 0,
            "y": 0,
            "scaleX": 1,
            "scaleY": 1
        },
        "traits": null,
        "pinned": false,
        "type": "Text",
        "text": "Text Example",
        "style": {
            "width": 256,
            "height": 298,
            "fontWeight": "normal",
            "textTransform": "none",
            "fontSize": 64,
            "fontFamily": "Dosis",
            "fontStyle": "normal",
            "color": {
                "r": 234,
                "g": 62,
                "b": 53,
                "a": 1
            },
            "backgroundColor": {
                "r": 0,
                "g": 0,
                "b": 0,
                "a": 1
            }
        }
    }
}
</pre>
-->

<a name="graphql" class="internal-anchor"><h2>Implementation using v3 GraphQL APIs</h2></a>

<p>
    To begin, you will need to create a Canvas in your Workspace that can be used to group your elements in. To do this, you will need only the WorkspaceID
    in which you want to create the Canvas. For information on how to get this, see our previous guide on <a href="/docs/page/get-list-of-workspaces#graphql">Getting a List of Workspaces using GraphQL</a>.
    The information you'll need returned from this call is only the (x,y) coordinates of where it is placed, so that you can
    add a Text element to the Canvas in the next step. Many additional properties can be given to the Canvas upon creation, but it will be kept simple
    for the sake of this introduction. This can be specified in a relatively simple query as follows:
</p>

<pre>
mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
    createCanvas(workspaceId: $workspaceId, input: $input) {
        __typename
        name
        id
        transform { x y }
    }
}
</pre>
<p>
    Notice that this is a <i>mutation</i> operation and not a query. This is because it is a Create request instead of just retrieving data, similar to
    creating a POST request instead of a GET in typical REST APIs. This can be called with the following example parameters:
</p>

<pre>
{
    "workspaceId": "&lt;SET_WORKSPACEID&gt;",
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100}
    }
}
</pre>

<h3>Output</h3>

<pre>
{
    "data": {
        "createCanvas": {
            "__typename": "Canvas",
            "name": "Example Canvas",
            "id": "606216cdebc71453d4d758bf",
            "transform": {
                "x": 100,
                "y": 100
            }
        }
    }
}
</pre>

<p>
    With this you are able to extract the <span class="pre">x,y</span> coordinates which were returned in the previous response. You can now create a
    Text element within the newly created Canvas. To do this, construct another query to create a Text element, and specify these parameters.
    You will need to ensure that the Text position and size fit within the canvas. This can be done by defining the <span class="pre">transform</span>
    parameter, which allows you to specify the position of the Text element, as well as the <span class="pre">style</span> parameter which gives the ability
    to define additional properties such as <span class="pre">height</span>, <span class="pre">width</span>, and <span class="pre">font</span>.
</p>

<pre>
mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
    createText(workspaceId: $workspaceId, input: $input) {
        __typename
        id
        text
        transform {x y }
    }
}      
</pre>
<p>
    Which can be ran with parameters such as: 
</p>
<pre>
{
    "workspaceId": "&lt;SET_WORKSPACEID&gt;",
    "input": {
        "text": "Example text inside canvas",
        "transform": {
            "x": 150,
            "y": 150,
            "scaleX": 1,
            "scaleY": 1
        },
        "style": {
            "height": 100,
            "width": 300,
            "fontFamily": "Helvetica",
            "fontSize": 24
        }
    }
}
</pre>

<h2>Code sample</h2>

<p>
    See below for full code examples of this implementation in Python and Node.js.
</p>

<div class="lang-selector">
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(apiBaseStr);</script>/v3/graphql/"
const token = "&lt;SET_TOKEN&gt;"
const workspaceId = "&lt;SET_WORKSPACEID&gt;"

const makeQuery = async (query, params) => {
    try {
        const response = await axios.post(url,
            {
                query: query,
                variables: params
            }, 
            {headers: {"Authorization": "Bearer " + token}
        })
        return response.data
    }
    catch(error) {
        console.error(error)
    }
}

async function startProcess() {

    const canvasQuery = 
        `mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
            createCanvas(workspaceId: $workspaceId, input: $input) {
                __typename
                name
                id
                transform { x y }
            }
        }`

    const canvasParams = {
        "workspaceId": workspaceId,
        "input": {
            "name": "Example Canvas",
            "transform": {
                "x": 100,
                "y": 100
                }
            }
        
        }
    const canvasResponse = await makeQuery(canvasQuery, canvasParams);
    console.log(canvasResponse);

    canvasX = canvasResponse.data.createCanvas.transform.x;
    canvasY = canvasResponse.data.createCanvas.transform.y;

    const textQuery =
        `mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
            createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
            }
        }`

    const textParams = {
        "workspaceId": workspaceId,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": canvasX + 50,
                "y": canvasY + 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }

    const textResponse = await makeQuery(textQuery, textParams);
    console.log(textResponse);
}

startProcess();
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/"
token = "&lt;SET_TOKEN&gt;"
workspaceId = "&lt;SET_WORKSPACEID&gt;"

def makeQuery(query, params):

    response = requests.post(url, 
    headers={"Authorization": "Bearer " + token
    },
    json={
            'query': query,
            'variables': params
        })

    return response.json()

if __name__ == "__main__":
    canvasQuery = """
    mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
        createCanvas(workspaceId: $workspaceId, input: $input) {
            __typename
            name
            id
            transform { x y }
        }
    }
    """

    canvasParams = {
    "workspaceId": workspaceId,
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100
            }
        }
    }

    canvasResponse = makeQuery(canvasQuery, canvasParams)
    pprint.pprint(canvasResponse)

    canvasX = canvasResponse['data']['createCanvas']['transform']['x']
    canvasY = canvasResponse['data']['createCanvas']['transform']['y']

    textQuery = """
    mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
        createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
        }
    }
    """
    textParams = {
        "workspaceId": workspaceId,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": canvasX + 50,
                "y": canvasY + 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }
    
    textResponse = makeQuery(textQuery, textParams)
    pprint.pprint(textResponse)
</pre>
</p>

<br />
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.



<h1>Traits: API for elements traits</h1>

<p>
    <table style="background-color: #FFFFA5">
        <tr>
            <td style="padding:15px">   
                    <b><center>NOTICE</center>
                        <br />
                        The version <span class="pre">/v3/</span> Beta release does not include REST API support for Traits, they are currently implemented only by GraphQL APIs. Traits will be released with REST API support in a future release for <span class="pre">/v3/</span>.
                    <br /> <br />
                    </b>
            </td>
        </tr>
    </table>
</p> 

<!--
<h4> The following documentation is still valid for use with <span class="pre">v2</span> API endpoints: </h4>
-->

<h2>What are Traits?</h2>
<p>Traits are a new feature that allows developers to associate metadata to objects within a workspace via a REST API. Traits are open-ended metadata for workspace objects. For example, if you upload assets (images, documents, etc.) that belong to a specific project, you can add that project information as Traits to each asset in the workspace. Later, you could download those assets, and the data in the Traits of each asset will provide insight to the original project data.</p>

<h2>Highlights of Traits</h2>
    <p>Important points regarding Traits:
        <ul>
            <li>Traits are always represented as a JSON array.</li>
            <li>Unlike Bluescape comments, traits can be specified on object creation.</li>
            <li>Any number of traits can be associated with a workspace object, forming an ordered list.</li>
            <li>Similarly to Bluescape comments, traits are append-only, i.e., traits can only grow monotonically over time, <b>they cannot be deleted</b>.</li>
        </ul>

    </p>


    <h3>To what elements can I associate a Trait?</h3>
    <p>
            Traits may be associated with the following workspace elements (object_type):
            <ul>
                <li>Notes</li>
                <li>Canvas</li>
                <li>Browsers</li>
                <li>Documents</li>
                <li>Images</li>
                <li>Strokes</li>
                <li>Text</li>
            </ul>
            </p>
            <p>
            Traits may be associated with a workspace element upon its creation, or at a later time, until the deletion of the element. The following element types currently support trait association upon element creation:
            <ul>
                <li>Notes</li>
                <li>Canvas</li>
                <li>Browsers</li>
                <li>Strokes</li>
                <li>Text</li>
            </ul>
            </p>

    <h3>Trait structure</h3>
    <p>
            In every request and response of the Bluescape REST API operating on elements of the supported types, traits are represented as a JSON array. Each item in the array must conform to the JSON-LD specification (<a href="https://json-ld.org/" target="_blank">https://json-ld.org/</a>). While the JSON-LD specification contains a rich set of features for data modeling, their use is not necessary. The only relevant constraint imposed by the JSON-LD specification is that every JSON property name must either:
            <ul>
                <li>be a Uniform Resource Locator (URI)</li>
                <li>be a JSON-LD keyword - one of 13 reserved names starting with the "@" symbol</li>
                <li>resolve to a URI, this if you are using the "@context" keyword</li> 
            </ul>
        <br />
        <b>IMPORTANT</b>: If traits do not conform to this structure, traits API calls will produce HTTP error response <span
        class="pre">400 Bad Request</span>.
        <br />
        <br />
        API clients are encouraged to choose the HTTP URI schema to reduce the possibility of inadvertent namespace collisions, and use a base URI derived from the DNS name of their organization, thus enabling multiple organizations to cooperatively share the traits namespace. For instance, the traits specified above can be augmented by another organization. See example below:
    </p>
    <p>
        Example of the data load: </br>
For v2:
<pre>
{
    // trait from framework A
    "http://acme.com/file-data/name":  “background-test-1.jpg”,
    "http://acme.com/file-data/version": "1.0.4-First-review"
},
{ // trait from framework B
    "http://ajax.com/project/": {
        "http://ajax.com/project/owner": "Joe Smith",
        "http://ajax.com/project/deadline": "2019Q4"
    },
    "http://ajax.com/project/name": "Lorem Ipsum, the Return"
}
</pre>

For V3:
<pre>
{
    context: "http://schema.org/", 
    content: {
        name: "hello world", 
        id: "ID-1234"
}
</pre>

</p>

<h2>How to implement Traits?</h2>

<p>
This page contains the implementation details for <a href="#rest">v2 REST APIs</a> and for <a href="#graphql">v3 GraphQL APIs</a>.
</p>

<a name="rest" class="internal-anchor"><h2>Implementation using REST APIs</h2></a>

<h3>Add Traits when creating an element, REST API</h3>
    <p>
       As mentioned above, you can add Traits to an element at the creation moment if the element is one of the following ones:
        <ul>
                <li>Notes</li>
                <li>Canvas</li>
                <li>Browsers</li>
                <li>Strokes</li>
                <li>Text</li>
            </ul>

    </p>
    <p>
        You will need to add the JSON Array as a <span
        class="pre">'traits'</span> field in the data load. For example, when creating a Canvas, you can add Traits as in the example below:
<pre>
{
    "x": 10000,
    "y": 1000,
    "width": 4000,
    "height": 4000,
    "name": "New Canvas",
    "borderColor": "Yellow",
    "traits" : [{"http://acme.com/project": "Lorem Ipsum, The Return"},{"http://acme.com/project/review" : "First Review, gathering Feedback"}]
}
</pre>
    </p>

<h3>Add Traits to an existing element, REST API</h3>
    <p>

        <table class="table table-striped">
                <tr>
                  <td><b>Endpoint</b></td>
                  <td>/v2/workspaces/&lt;workspaceId&gt;/elements/&lt;object_type&gt;/&lt;object_id&gt;/traits</td>
                </tr>
                <tr>
                    <td><b>Method</b></td>
                    <td>POST</td>
                </tr>
                <tr>
                  <td><b>Comments</b></td>
                  <td>If traits do not conform to the specified structure, Traits API calls will produce HTTP error response <span
                    class="pre">400 Bad Request</span>.</td>
                </tr>
        </table>
        <br />
    
        When adding Traits to an object, you will need to provide a JSON Array in the body of the API request. An example of the data load body for adding Traits to an image object would be:
<pre>
[{
    "http://acme.com/picture/title": "Sand dunes picture",
    "http://acme.com/picture/description": "Sand Dunes, big, light on one side, shadow on the other side",
    "http://acme.com/picture/tags": ["sand dunes","light","desert","blue sky","yellow sand","sand"]
}]
</pre>
    </p>

    
<h3>Get a list of the Traits in an object, REST API</h3>
<p>
        <table class="table table-striped">
                <tr>
                  <td><b>Endpoint</b></td>
                  <td>/v2/workspaces/&lt;workspaceId&gt;/elements/&lt;object_type&gt;/&lt;object_id&gt;/traits</td>
                </tr>
                <tr>
                    <td><b>Method</b></td>
                    <td>GET</td>
                </tr>
                <tr>
                  <td><b>Comments</b></td>
                  <td></td>
                </tr>
        </table>


    </p>


<h3>Cannot Delete/Edit Traits in v2 REST APIs: alternative</h3>
   
<p>       
        As previously mentioned, the traits of an element are never deleted during its lifetime, and all the traits association is cumulative. However, the API client is free to interpret cumulative traits associations as updates or deletions. For instance, another traits association may result in the traits array becoming this:
<pre>
[
    { "http://acme.com/bluescape#assetId": "869C287E-59BB-4319-9261-F791F659C54A" },
    { "http://ajax.com/bscp#assetId": "98d03812452e0b6cabdbde5eff14e89f" },
    { "http://acme.com/bluescape#assetId": null }]
</pre>
    <br />
        The API client using the <span class="pre">"http://acme.com"</span> prefix is free to interpret such associations as a deletion of the assetId property of the associated <span class="pre">bluescape#assetId</span> element by processing the values from older to newer (top to bottom in this example), being <span class="pre">null</span> the newest value to use.
</p>  

<a name="graphql" class="internal-anchor"><h2>Implementation using v3 GraphQL APIs</h2></a>

<p>
In v3 GraphQL traits, you have 2 options to specify the JSON-LD keyword in the Traits declaration: <span class="pre">context</span> and <span class="pre">vocab</span>. The table below provides more details about them.
</p>
<table class="table table-striped">
                <tr>
                  <td><b>JSON-LD keyword</b></td>
                  <td><b>Details<b></td>
                  <td><b>Example<b></td>
                </tr>
                <tr>
                    <td>context</td>
                    <td>URI to append as a prefix to the content to be specified.<br/>
                    <b>MUST</b> resolve to an actual URL.</td>
                    <td>
<pre>
{
    context: "http://schema.org/", 
    content: {
        name: "Project - POC Data", 
        id: "RSE-12333"
}
</pre>                    
                    </td>
                </tr>
                <tr>
                  <td><b>vocab</b></td>
                  <td>URI to append as a prefix to the content to be specified. <br/>
                  Must have a URI syntax, but does not need to resolve to an actual URL.<br />
                  Useful when you want to add metadata that may not be associated with a specific URL.</td>
                  <td>
<pre>
{
    vocab: "http://POC-0001.org/", 
    content: {
        name: "Project - POC Data", 
        id: "RSE-12333"
}
</pre>                    
                    </td>
                </tr>
        </table>

<h3>Add Traits when creating an element, GraphQL API</h3>

<pre>
mutation createShapeWithTraits($ws: String! $textContent:String!) {
    createShape(
        workspaceId: $ws
        input: {
        text:$textContent
        traits:{context: "http://schema.org/", 
                content: {
                    name: "shape with traits", 
                    shape: "ellipse"
                    }
                }
        kind: Ellipse           
        style: {
            width:2000 height:2000 strokeWidth: 5 
            fillColor: {
                r:255 g:100 b:255 a:1}
        }
        transform: {x:0 y:0}
        })
    {id kind traits}
    }
</pre>

with the following variables:
<pre>
{
    "workspace": "`<`workspaceId`>`",
    "textContent" : "New shape, with traits!"
}
</pre>

In the Response body, see how the traits have been created:
<pre>
{
    "data": {
        "createShape": {
            "id": "609b03f90a2389b24d65b9cd",
            "kind": "Ellipse",
            "traits": {
                "http://schema.org/name": "shape with traits",
                "http://schema.org/shape": "ellipse"
            }
        }
    }
}
</pre>

<h3>Add Traits to an existing element, GraphQL API</h3>

<table class="table table-striped">
        <tr>
            <td><b>Mutation</b></td>
            <td>addTraits<td>
        </tr>
</table>

<pre>
mutation addTraitsToElement($workspace: String!, $id:String!) {
  traits: addTraits(
    workspaceId: $workspace,
    id: $id, 
    compactOutput:false,
    input: {
            context: "http://schema.org/", 
            content: {
                project: "Special Project", 
                projectId : "&lt;ADD-PROJECT-ID&gt;"
                }
            }
    )
}
</pre>
with the following variables:
<pre>
{
    "workspace": "&lt;workspaceId&gt;",
    "id" : "&lt;elementId&gt;"
}
</pre>

<h3>Overwrite the values of the Traits in an object, GraphQL API</h3>
<p>
    <b>New in v3 GraphQL Traits</b>: You can overwrite the values of the Traits.<br />
    Previously, in v2, when you add a new value to a previously defined Trait, you got a list of all the values you have set for that specific value, and needed to loop through those values and select the newest one (the laters at the bottom of the list).<br />
    Now, in v3 GraphQL Traits, you always get the latest value specified for a Trait, that simple.<br />
    For example, if for the previous example of how to add traits to an object, you run a new mutation to change the name of the "project" Trait to <b>"Special Project - NEW CASE"</b>, by this mutation:
<pre>
mutation addTraitsToElement($workspace: String!, $id:String!) {
  traits: addTraits(
    workspaceId: $workspace,
    id: $id, 
    compactOutput:false,
    input: {
            context: "http://schema.org/", 
            content: {
                project: "Special Project - NEW CASE", 
                }
            }
    )
}
</pre>
    Then, when you examine the Traits values you will see that value as the new value of the Trait:
<pre>
{
    "data": {
        "elements": [
            {
                "id": "&lt;elementId&gt;",
                "traits": {
                    "@id": "brn:ws:GDUWtDvSZGt7868PBBk2:609ede3c8f071b0018495fd9",
                    "http://schema.org/projectId": "Special Project - NEW CASE",
                    "http://schema.org/projectName": "&lt;ADD-PROJECT-ID&gt;",
                }
            }
        ]
    }
}
</pre>
Please note the new <span class="pre">"@id"</span> property. It specifies that a Traits has been updated.

</pre>

</p>
<h3>Get a list of the Traits in an object, GraphQL API</h3>

<table class="table table-striped">
        <tr>
            <td><b>Query</b></td>
            <td>elements<td>
        </tr>
</table>
<p>
Example:
<pre>
query getTraitsOfElementById($workspaceId: String!, $id:String!){
    elements(workspaceId: $workspaceId id:$id ) {
        type: __typename
        id
        traits        
    }
}
</pre>
with the following variables: 

<pre>
{
    "workspace": "&lt;workspaceId&gt;",
    "id" : "&lt;elementId&gt;"
}
</pre>
</p>

<p>
The response body will show you the traits:
<pre>
{
    "data": {
        "elements": [
            {
                "__typename": "&lt;element-type&gt;",
                "id": "&lt;elementId&gt;",
                "traits": {
                    "@id": "brn:ws:GDUWtDvSZGt7868PBBk2:609ede3c8f071b0018495fd9",
                    "http://schema.org/projectId": "SOME-ID 3",
                    "http://schema.org/projectName": "mega project title 3",
                }
            }
        ]
    }
}
</pre>

</p>
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.
</p>

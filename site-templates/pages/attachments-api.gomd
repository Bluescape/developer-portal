<h1>Attachments APIs</h1>

<h2>What are Attachments?</h2>
<p>Attachments allow the user to pair together two elements so that they act as a single, interactable object.</p>

<p>
    In a Bluescape Workspace, a user has the ability to manually drag an element A on top of an element B in order to form a link between the two, to group them. Now whenever the user selects or moves one element, the other will be selected and moved as well. 
    The Attachments APIs allow for a programmatic way to perform these attachment operations.
<p>
    Coordinates can be specified in order to determine where the element to attach will be placed on the base element. It is important to note that when providing coordinates, these inputs will be relative to the base element they are being attached to. 
    For example, if the user specifies the element to be attached at [0,0] this will place the attachment at the top left corner of the base element, and <i>not</i> at the center of the workspace.
</p>

<p>    
    When executing an Attachments API, the user will see the source element be moved onto the base element specified. When deleting an Attachment (or detaching), the user will see the detached element in the same position, but it is not attached to the surface.<br/>
    <b>NOTE</b>: The object to which an element is attached is referred as the <span class="pre">surface</span> in this page.
</p>
<p>
    Please review the page for <a href="/docs/page/attachments-api-v2">attachment APIs in v2</a>.
</p>

<h2>Table of Contents:</h2>

<p>
    <a href="#allowed-types">Allowed Elements and Surfaces for Attachments</a> <br />
    <a href="#how-to-implement-rest">How to Implement Attachments APIs: REST APIs</a> <br />
        <a href="#create-attachment" style="margin-left:15px;">1. Create: attachment an element to another element, REST</a> <br />
        <a href="#get-attachments" style="margin-left:15px;">2. Get: list all attachments of an element, REST</a> <br />
        <a href="#delete-attachment" style="margin-left:15px;">3. Detach: remove attachment of an element, REST</a> <br />
    <a href="#how-to-implement-graphql">How to Implement Attachments APIs: GraphQL APIs</a> <br />
        <a href="#create-attachment-graphql" style="margin-left:15px;">A. Create: attachment an element to another element, GraphQL</a> <br />
        <a href="#get-attachments-graphql" style="margin-left:15px;">B. Get: list all attachments of an element, GraphQL</a> <br />
        <a href="#detach-attachments-graphql" style="margin-left:15px;">C. Detach: remove attachment of an element, GraphQL</a> <br />
    <!-- <a href="#use-case-example">Use Case Example</a> <br />  -->
</p>

<a name="allowed-types" class="internal-anchor"><h3>Allowed Elements and Surfaces for Attachments</h3></a>
<p>
    The elements to which you can attach other elements are in the following list:
    <table class="table table-striped">
                <tr>
                    <td><b>Attachable objects</b></td>
                    <td><b>Surfaces (elements to which attachable object can attach to)</b></td>
                </tr>
                <tr>
                    <td>
                        <ul>
                            <li>Text</li>
                            <li>LegacyNote</li>
                            <li>Image</li>
                            <li>Document</li>
                            <li>Browser</li>
                            <li>Video</li>
                            <li>Stroke</li>
                            <li>Shape</li>
                            <li>Line</li>
                            <li>Window</li>
                            <li>Whiteboard</li>
                            <li>LinkedDocument</li>
                        </ul>
                    </td>
                    <td>
                        <ul>
                            <li>Browser</li>
                            <li>Document</li>
                            <li>Image</li>
                            <li>Note</li>
                            <li>Shape</li>
                            <li>Video</li>
                            <li>Window</li>                            
                        </ul>
                    </td>
                </tr>
        </table>
</p>

<a name="how-to-implement-rest" class="internal-anchor"><h2>How to Implement Attachments APIs: REST APIs</h2></a>

<a name="create-attachment" class="internal-anchor"><h3>Create: attach one element to another, REST</h3></a>
    <p>
        <table class="table table-striped">
                <tr>
                    <td><b>Endpoint</b></td>
                    <td>/v3/workspaces/&lt;workspace_uid&gt;/elements/&lt;surface_id&gt;/attachments</td>
                </tr>
                <tr>
                    <td><b>Method</b></td>
                    <td>POST</td>
                </tr>
                <tr>
                <td><b>Comments</b></td>
                <td>Specify in the payload the Id of the element you want to attach to, the element indicated with &lt;surface_id&gt;.</td>
                </tr>
        </table>
    </p>
<p>
    
Sample Request:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<pre class="lang lang-node">
var request = require('request');

const token = '&lt;SET_TOKEN&gt;';
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspace_uid = '&lt;SET_WORKSPACE_UID&gt;';
const api_version = 'v3';
var api_endpoint = '/' + api_version + '/workspaces/' + workspace_uid + '/elements/';

function runRequest(portal,api_endpoint,method,data_load) {
    return new Promise((resolve, reject) => {
        var request_values = {
            uri : portal + api_endpoint ,
            method : method ,
            headers : {
                'Authorization': "Bearer " + token,
                'Content-Type' : 'application/json'    
            },
            body : data_load,
            json: true
        };

        request(request_values, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // Print out the result
                console.log("Successful request. Body response: " + JSON.stringify(body,null,"     ")); 
                } else {
                reject('Invalid status code &lt;' + response.statusCode + '&gt;');
                }
                resolve(body);
        })

    });
}

async function runAPIRequests() {
    api_endpoint = '/v3' + '/workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments'

    data_load = {
        'attachment': "&lt;SET_SOURCE_ID&gt;",
        'transform' : {'x':10, 'y': 10}
    }

    method = 'POST';

    try {
        var uploadResponse = await runRequest(portal,api_endpoint,method,data_load);
    } catch (error) {
        console.error('ERROR  attaching ');
        console.error(error);
    }
}
runAPIRequests();
    
</pre>

<pre class="lang lang-python">
import requests
from requests.exceptions import HTTPError
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(apiBaseStr); </script>'

workspace_uid = '&lt;SET_WORKSPACE_UID&gt;'
api_version = '/v3/'

if __name__ == "__main__":

    API_endpoint = API_endpoint = portal + api_version + 'workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments'

    data_load = {
        'attachment': '&lt;SET_SOURCE_ID&gt;',     # Example showing how to use the filter_by field
        'transform' : {
            'x' : 10,
            'y' : 10
        }
    }

    the_request = requests.post(
            API_endpoint,
            headers={"Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
            json = data_load
        )

    json_response = the_request.json()
    pprint.pprint(json_response)
</pre>

<pre class="lang lang-curl">
curl -X POST <script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;SET_WORKSPACE_ID&gt;/elements/&lt;SET_SURFACE_ID&gt;/attachments \
-H 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
-H 'Content-Type: application/json' \
-d '{
    "attachment" : "&lt;SET_ID_OF_ELEMENT_TO_ATTACH_TO_SURFACE_ID&gt;",
    "transform" : {
        "x": 10,
        "y": 10
    }

}'
</pre>    

<br/>
Sample Response Body:
<pre>
{
    "data": {
        "id": "&lt;ID_OF_ATTACHED_ELEMENT&gt;"
    }
}
</pre>
</p>

<a name="get-attachments" class="internal-anchor"><h3>Get: list all attachments of an element</h3></a>
<p>
<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v3/workspaces/&lt;workspace_uid&gt;/elements/&lt;surface_id&gt;/attachments</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>GET</td>
        </tr>
        <tr>
          <td><b>Comments</b></td>
          <td></td>
        </tr>
</table>
</p>

<p>

<p>Sample Request:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div></p>

<pre class="lang lang-node">
var request = require('request');

const token = &lt;SET_TOKEN&gt;;
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspace_uid = '&lt;SET_WORKSPACE_UID&gt;';
const api_version = 'v3';
var api_endpoint = '/' + api_version + '/workspaces/' + workspace_uid + '/elements/attachments';

function runRequest(portal,api_endpoint,method,data_load) {
    return new Promise((resolve, reject) => {
        var request_values = {
            uri : portal + api_endpoint ,
            method : method ,
            headers : {
                'Authorization': "Bearer " + token,
                'Content-Type' : 'application/json'    
            },
            body : data_load,
            json: true
        };

        request(request_values, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // Print out the result
                console.log("Successful request. Body response: " + JSON.stringify(body,null,"     ")); 
                } else {
                    reject('Invalid status code &lt;' + response.statusCode + '&gt;'); 
                }
                resolve(body);
        })

    });
}

async function runAPIRequests() {
    api_endpoint = '/v3' + '/workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments'

    method = 'GET';

    try {
        var uploadResponse = await runRequest(portal,api_endpoint,method);
    } catch (error) {
        console.error('ERROR getting attachments ');
        console.error(error);
    }
}
runAPIRequests();  
</pre>

<pre class="lang lang-python">
import requests
from requests.exceptions import HTTPError
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(apiBaseStr); </script>'
workspace_uid = '&lt;SET_WORKSPACE_UID&gt;'
api_version = '/v3/'


if __name__ == "__main__":
    API_endpoint = portal + api_version + 'workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments'

    the_request = requests.get(
            API_endpoint,
            headers={"Authorization": "Bearer " + token
                    }
        )

    json_response = the_request.json()
    pprint.pprint(json_response)
</pre>

<pre class="lang lang-curl">
curl -X GET <script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;workspace_uid&gt;/elements/&lt;SET_SURFACE_ID&gt;/attachments \
-H 'Authorization: Bearer &lt;SET_TOKEN&gt;' 
</pre>
<br />

Sample Response Body with the list of attachments an object has:
    <ul>
        <li>This is the list of elements attached to the element &lt;surface_id&gt;:</li>
    </ul>
<pre>
{
    "data": [
        {
            "id": "&lt;ID_OF_ATTACHED_ELEMENT&gt;",
            "zIndex": 1357,
            "transform": {
                "x": 10,
                "y": 10,
                "scaleX": 1,
                "scaleY": 1
            },
            "pinned": false,
            "comments": [],
            "surface": "&lt;surface_id&gt;",
            "type": "Text",
            "text": "Text to Attach",
            "style": {
                ...
            },
            "blocks": [
                ...
            ]
        }
    ]
}
</pre>
</p>

<a name="delete-attachment" class="internal-anchor"><h3>Detach: remove attachment of an element, REST</h3></a>
<p>
To detach an element (remove it from being attached to a surface), you will need to use the following API:
<table class="table table-striped">
        <tr>
          <td><b>Endpoint</b></td>
          <td>/v3/workspaces/&lt;workspace_uid&gt;/elements/&lt;surface_id&gt;/attachments/&lt;element_id&gt;</td>
        </tr>
        <tr>
            <td><b>Method</b></td>
            <td>DELETE</td>
        </tr>
        <tr>
          <td><b>Comments</b></td>
          <td>Here you will remove the element with Id <span class="pre">element_id</span> from the surface with Id <span class="pre">surface_id</span>.</td>
        </tr>
</table>
</br>

<p>Sample Request:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div></p>

<pre class="lang lang-node">
var request = require('request');

const token = &lt;SET_TOKEN&gt;;
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const workspace_uid = '&lt;SET_WORKSPACE_UID&gt;';
const api_version = 'v3';
var api_endpoint = '/' + api_version + '/workspaces/' + workspace_uid + '/elements/attachments';

function runRequest(portal,api_endpoint,method,data_load) {
    return new Promise((resolve, reject) => {
        var request_values = {
            uri : portal + api_endpoint ,
            method : method ,
            headers : {
                'Authorization': "Bearer " + token,
                'Content-Type' : 'application/json'    
            },
            json: true
        };

        request(request_values, function (error, response, body) {
            if (!error && response.statusCode == 200) {
                // Print out the result
                console.log("Successful request. Body response: " + JSON.stringify(body,null,"     ")); 
                } else {
                reject('Invalid status code &lt;' + response.statusCode + '&gt;'); 
                }
                resolve(body);
        })

    });
}
async function runAPIRequests() {
    api_endpoint = '/v3' + '/workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments/&lt;ATTACHMENT_ID&gt;'

    method = 'DELETE';

    try {
        var uploadResponse = await runRequest(portal,api_endpoint,method);
    } catch (error) {
        console.error('ERROR deleting attachment ');
        console.error(error);
    }
}
runAPIRequests();
</pre>

<pre class="lang lang-python">
import requests
from requests.exceptions import HTTPError
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(apiBaseStr); </script>'
workspace_uid = '&lt;SET_WORKSPACE_UID&gt;'
api_version = '/v3/'


if __name__ == "__main__":
    API_endpoint = portal + api_version + 'workspaces/' + workspace_uid + '/elements/&lt;SET_SURFACE_ID&gt;/attachments/&lt;ATTACHMENT_ID&gt;'

    the_request = requests.delete(
            API_endpoint,
            headers={"Authorization": "Bearer " + token
                    }
        )

    # Successful response is HTTP 204
    pprint.pprint(the_request.status_code)
    
</pre>

<pre class="lang lang-curl">
curl -X DELETE <script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;workspace_uid&gt;/elements/&lt;SET_SURFACE_ID&gt;/attachments/&lt;attachment_id&gt; \
-H 'Authorization: Bearer &lt;SET_TOKEN&gt;'
</pre>

<p>
<br />

The Response Body, after deleting the attachments in an element, will return an status HTTP 204: no content. It means that the operation was executed successfully.
</p>
<p>
<pre>
{
  "message": "Attachment {source_id} has been removed from the surface {surface_id}"
}  
</pre>
</p>

<a name="create-attachment-graphql" class="internal-anchor"><h3>Create: attach one element to another, GraphQL</h3></a>
    <p>
    In graphQL, you perform the attachment of an element to another element (surface) by setting the ID of the surface element in the <span class="pre">surface</span> field when creating or updating an element.<br />
    The example below shows how to attach a Text element to another element on creation, using the <span class="pre">createText</span> mutation, or later by updating it with the <span class="pre">updateText</span> mutation.
        <table class="table table-striped">
                <tr>
                    <td><b>mutation</b></td>
                    <td>createText or updateText</td>
                </tr>
                <tr>
                    <td><b>Method</b></td>
                    <td>POST</td>
                </tr>
                <tr>
                <td><b>Comments</b></td>
                <td><ul>
                        <li>Specify in the payload the Id of the element you want to attach to, the element indicated with &lt;surface_id&gt;.</li>
                        <li>The positioning of attachment is relative to top-left corner of the surface</li> 
                    </ul>
                </td>
                </tr>
        </table>
    </p>
<p>
<p>
Here is the example for an attachment when creating a Text element:
<pre>
mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
    createText(workspaceId: $workspaceId, input: $input) {
        id
    }
}    
</pre>

using these variables:

<pre>
{
    "workspaceId" : "&lt;SET_WORKSPACE_UID&gt;",
    "input" : {       
        "transform" : { "x": 10, "y":10 },
        "text" : "This text is attached",
        "surface": "&lt;SET_SURFACE_ID&gt;"
    }
}
</pre>

</p>
    
Sample Request:
<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(graphQLStr); </script>"
const token = "&lt;SET_TOKEN&gt;"
const workspaceId = "&lt;SET_WORKSPACEID&gt;"

const textMutation = 
    `mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
            createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
            }
        }`
const variables = {   
    "workspaceId": workspaceId,
    "input": {
        "text": "This text is attached",
        "surface": "&lt;SET_SURFACE_ID&gt;",
        "transform": {
            "x": 10,
            "y": 10
        }
    }
}

const attachText = async () => {
    try {
        const response = await axios.post(url,
            {
                query: textMutation,
                variables: variables
            }, 
            {headers: {"Authorization": "Bearer " + token}})
        
        console.log(response.data);
        return response
    }
    catch(error) {
        console.error(error)
    }
}

attachText();
    
</pre>

<pre class="lang lang-python">
import requests
from requests.exceptions import HTTPError
import pprint

token = '&lt;SET_TOKEN&gt;'
portal = '<script type="text/javascript">document.write(graphQLStr); </script>'

workspaceId = '&lt;SET_WORKSPACE_UID&gt;'

if __name__ == "__main__":

    API_endpoint = portal

    textMutation = """
    mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
        createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
        }
    }
    """

    graphqlVariables = {
        "workspaceId": workspaceId,
        "input": {
            "text": "This text is attached",
            "surface": "&lt;SET_SURFACE_ID&gt;",
            "transform": {
                "x": 10,
                "y": 10
            }
        }
    }

    the_request = requests.post(
            API_endpoint,
            headers={"Authorization": "Bearer " + token,
                        "Content-Type": "application/json"
                    },
            json={
                "query": textMutation,
                "variables": graphqlVariables
            }
        )

    json_response = the_request.json()
    pprint.pprint(json_response)
</pre>

<pre class="lang lang-curl">
curl --location --request POST '<script type="text/javascript">document.write(graphQLStr); </script>' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){\n        createText(workspaceId: $workspaceId, input: $input) {\n            __typename\n            id\n            text\n            transform { x y }\n        }\n    }","variables":{"workspaceId":"&lt;SET_WORKSPACE_UID&gt;","input":{"text":"This text is attached","surface":"&lt;SET_SURFACE_ID&gt;","transform":{"x":10,"y":10}}}}'
</pre>    

Sample Response Body:
<pre>
{
    "data": {
        "id": "&lt;ID_OF_ATTACHED_ELEMENT&gt;"
    }
}
</pre>
</p>

<a name="how-to-implement-rest" class="internal-anchor"><h2>How to Implement Attachments APIs: GRAPHQL APIs</h2></a>


<a name="get-attachments-graphql" class="internal-anchor"><h3>Get: list all attachments of an element, GraphQL</h3></a>
<p>
    <table class="table table-striped">
            <tr>
                <td><b>query</b></td>
                <td>elements</td>
            </tr>
            <tr>
                <td><b>Method</b></td>
                <td>POST</td>
            </tr>
            <tr>
            <td><b>Comments</b></td>
            <td></td>
            </tr>
    </table>
    </p>
<p>
<p>
Here is the example a query to get the details of the attachments for an element. For this example, we added the settings to list the attachment details for an Image, but you can extend it to any specific element you want:

<pre>
query getDetailsOfAttachments($workspaceId: String! $elementId: String!){
    elements(workspaceId: $workspaceId  id: $elementId) {
        type: __typename        
        id
        transform {
            x
            y
        }

        ... on Image {
          attachments {
            id
            type: __typename
            transform {x y}
            ... on Text {
              text
            }
          }
        }
    }
}
</pre>

using these variables:

<pre>
{
    "workspaceId" : "&lt;SET_WORKSPACE_UID&gt;",
    "elementId" : "&lt;SET_SURFACE_ID&gt;"
}
</pre>

</p>

<a name="detach-attachments-graphql" class="internal-anchor"><h3>Detach: remove an element's attachments, GraphQL</h3></a>
<p>
    In graphQL, to detach or remove an element's attachment, you need to set the surface field to the value of the Id of the workspace where you are working. This will need to be done using an update mutation.<br />
    The example below shows how to detach a Text element from the surface it is attached to. We will use the <span class="pre">updateText</span> mutation.
    <table class="table table-striped">
            <tr>
                <td><b>mutation</b></td>
                <td>updateText</td>
            </tr>
            <tr>
                <td><b>Method</b></td>
                <td>POST</td>
            </tr>
            <tr>
            <td><b>Comments</b></td>
            <td>You will need to know the Id of the Text object to detach</td>
            </tr>
    </table>
    </p>
<p>
<p>
Here is the example a query to get the details of the attachments for an element. For this example, we added the settings to list the attachment details for an Image, but you can extend it to any specific element you want:

<pre>
mutation detachTextElement($workspaceId: String!  $textElementId: String!) {
  updateText(workspaceId: $workspaceId , id: $textElementId, input: {
    surface: $workspaceId
  })
  {
    id
  }
  
}
</pre>

using these variables:

<pre>
{
    "workspaceId" : "&lt;SET_WORKSPACE_UID&gt;",
    "textElementId" : "&lt;SET_TEXT_ELEMENT_ID_TO_DETACH&gt;"
}
</pre>
</p>


<p>
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.
</p>






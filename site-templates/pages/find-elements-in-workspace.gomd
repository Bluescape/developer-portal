<h1>How to find elements in a workspace</h1>
<p>
<b>Objective</b>: find elements in the workspace that match a specific text string.  This is done to get properties of that element, to edit it or to delete it. Also, you may want to find a specific canvas to retrieve its content or to add more elements to it.<br />

This page contains the implementation details for <a href="#rest">v3 REST APIs</a> and for <a href="#graphql">v3 GraphQL APIs</a>.
</p>

<a name="rest" class="internal-anchor"><h2>Implementation using REST APIs</h2></a>
<p>
In v3 we have access to a <span class="pre">search</span> API. This API allows to run a search for a string and we will get all the objects matching that string in their text content.
</p>

<table class="table table-striped">
  <tr>
    <td><b>Endpoint</b></td>
    <td>/v3/workspaces/&lt;workspaceId&gt;/search</td>
  </tr>
  <tr>
      <td><b>Method</b></td>
      <td>POST</td>
  </tr>  
  <tr>
    <td><b>Comments</b></td>
    <td>Searches a workspace with a query string, can filter by element types.<br/>
    <b>IMPORTANT</b>: currently this search API does not match or search the content of Comments in elements.<br />
    The output contains a <span class="pre">"matchText"</span> field that shows what is the text matching the search query.
    </td>
  </tr>
</table>
<p>
    You can specify what type of elements are included in the search. If you want to search only on Image, Shape and Text elements, you can specify the <span class="pre">"filterTypes"</span> field with those values, as in this example of the request body:

<pre>
{
  "filterTypes": [
    "Image", "Shape", "Text"
  ],
  "orderDirection": "desc",
  "query": "<STRING_TO_MATCH>"
} 
</pre>

</p>

<p>
     If you want to run a search for all the elements in the workspace, and not for a specific set, then simply remove the <span class="pre">"filterTypes"</span> key in the body request of the API call. 

<pre>
{
  "orderDirection": "desc",
  "query": "<STRING_TO_MATCH>" 
}
</pre>

</p>

<p>
Below there is an example of the response body of this API. The search was for "January 2021", for Canvas elements. The output contains 2 results. 
<ul>
    <li>The <span class="pre">"matchText"</span> field shows the text that matched the search query.</li>
    <li>The <span class="pre">"element"</span> key contains the properties of each matched element.</li>
    <li>The values for the <span class="pre">"id"</span> fields are only examples, they will be different in your workspace.</li>
</ul>
Now you can process the results or run a new search with a search query with more specific terms (for example "January 2021 summary data"). 
</p>

<p>
<pre>
{
    "data": [
        {
            "matchText": "January 2021 reports: summary data",
            "score": 0.046,
            "element": {
                "id": "5ef27790ff5317444e00052a",
                "zIndex": 1330,
                "transform": {
                    "x": 115610.49999999997,
                    "y": -33618,
                    "scaleX": 1,
                    "scaleY": 1
                },
                "pinned": false,
                "comments": [],
                "type": "Canvas",
                "name": "January 2021 reports: summary data",
                "style": {
                    "width": 47914,
                    "height": 25208,
                    "borderColor": {
                        "r": 238, "g": 85, "b": 80, "a": 1
                    }
                }
            }
        },
        {
            "matchText": "January 2021: all projects",
            "score": 0.032,
            "element": {
                "id": "617c44b4b9575c0c10e783c9",
                "zIndex": 2963,
                "transform": {
                    "x": 60092,
                    "y": -34409,
                    "scaleX": 1,
                    "scaleY": 1
                },
                "pinned": false,
                "comments": [],
                "type": "Canvas",
                "name": "January 2021: all projects",
                "style": {
                    "width": 43243,
                    "height": 20170,
                    "borderColor": {
                        "r": 153, "g": 198, "b": 255, "a": 1
                    }
                }
            }
        }
    ]
}
</pre>
</p>


<h2>Code sample</h2>

<p>
    See below code samples for a search on a string, restricted to Canvas elements, to list the content of a specific Canvas. Here we are assuming there will be a single matching result (only 1 Canvas has the name we are trying to match) and then we will list the content of that Canvas.
</p>


<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/workspaces/&lt;workspaceId&gt;/search' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--data-raw '{
  "filterTypes": [
    "Canvas"
  ],
  "orderDirection": "desc",
  "query": "&lt;STRING_TO_MATCH&gt"
}'
# if you want to get a shorter version of the results of the search, add the following line at to the script above, after "}'":
# | jq . | egrep "(matchText|\"id\"|type)" 
</pre>
</p>

<p>
<pre class="lang lang-python">
# Python Code (python 3.5+)
import requests
import datetime
import pprint

'''

Required modules:
    requests 2.22.0

'''

token = '<SET_TOKEN>'        

if __name__ == "__main__":
    portal = 'https://api.' 
    workspaceId = '&lt;SET_WORKSPACE_ID&gt;'  # REMEMBER TO ADD THE WORKSPACE ID

    # Run search
    # Path: /v3/workspaces/<workspaceId>/search

    API_endpoint = '/v3/workspaces/' + workspaceId + '/elements'

    timestamp = datetime.datetime.now()

    data_load = {
        "filterTypes": [
            "Canvas"
        ],
        "orderDirection": "desc",
        "query": "&lt;STRING_TO_MATCH&gt"
    }

    the_request = requests.post(
        portal + API_endpoint,
        headers={"Authorization": "Bearer " + token,
                    "Content-Type": "application/json"
                    },
        json=data_load
    )

    json_response = the_request.json()
    pprint.pprint(json_response)  
</pre>
</p>

<p>
<pre class="lang lang-node">
// Node.js Javascript   
/*

How to run:
node this_script_name.js

Requires "axios" module (0.19.0), run:
npm install axios

website: https://github.com/axios/axios

*/

var axios = require('axios');

const token = '<SET_TOKEN>';
const portal = 'https://api.';
const workspaceId = '&lt;SET_WORKSPACE_ID&gt;';
const api_version = 'v3';
const api_endpoint = '/workspaces/' + workspaceId + '/search';

data_load = {
    "filterTypes": [
        "Canvas"
    ],
    "orderDirection": "desc",
    "query": "&lt;STRING_TO_MATCH&gt;"
}

var request_values = {
    url: portal + '/' + api_version + api_endpoint,
    method : 'POST' ,
    headers : {
        'Authorization': "Bearer " + token,
        'Content-Type' : 'application/json'    
    },
    data : data_load,
};

axios(request_values)
    .then(function (response) {
        if (response.status == 200)
        {
            console.log("Success");
            console.log(response.data);
        }
    })
    .catch (function (error) {
        console.log('Error: ' + error.message);
    });             
</pre>        
</p>


<h2>OUTPUT</h2>

<p>
What you should get: JSON with the list of all elements matching the search query. In this example we run a search for Canvas containing  "January 2021". This is the request body:
</p>
<pre>
{
  "filterTypes": [
    "Canvas"
  ],
  "orderDirection": "desc",
  "query": "January 2021"
}
</pre>


<a name="graphql" class="internal-anchor"><h2>Implementation using GraphQL APIs</h2></a>
<p>
In GraphQl we currently do not have a search API. The approach here is to run a query for the type of element you want, and then loop through the list of results looking for the specific element matching the string you are after. 
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
# Uses 'jq' to filter the results, to filter the string to match: | jq '.data.elements[] | select(.name|test("&lt;STRING_TO_MATCH&gt"))'
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql' \
--header 'Authorization: Bearer &lt;SET_TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"query getCanvasesfromWorkspace($workspaceId: String!) {\n  elements(workspaceId: $workspaceId, type: Canvas) {\n    ... on Canvas {\n      type: __typename\n      id\n      name\n      transform {\n        x\n        y\n      }      \n    }\n  }    \n}","variables":{"workspaceId":"&lt;workspaceId&gt;"}}' | jq '.data.elements[] | select(.name|test("&lt;STRING_TO_MATCH&gt"))'
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

'''
Required modules:
   requests 2.22.0
'''

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql"
token = "&lt;SET_TOKEN&gt;"
workspaceId = "&lt;workspaceId&gt;"

# String to match on the Canvas "name" field
canvasNameToMatch = '&lt;STRING_TO_MATCH&gt;'

getCanvasesQuery = """
    query getCanvasesfromWorkspace($workspaceId: String!) {
        elements(workspaceId: $workspaceId, type: Canvas) {
            ... on Canvas {
            type: __typename
            id
            name
            transform {
                x
                y
            }      
            }
        }    
    }
    """

getCanvasContentQuery = """
    query getCanvasContent($workspaceId: String!, $canvasId: String!) {
        elements(workspaceId: $workspaceId, canvasId: $canvasId ) {            
            type: __typename
            id            
            transform {
                x
                y
            }     
            ...on Image {
                title
                filename
                asset { imageFormat }
            } 
            ... on Text {
                text
            }
            ... on Document {
                title
                filename
                asset { documentFormat }
            }
            
        }    
    }
    """

variables = {
    "workspaceId": workspaceId
}

def makePostQuery(query, variables):
    response = requests.post(url,
                             headers={"Authorization": "Bearer " + token
                                      },
                             json={
                                 'query': query,
                                 'variables': variables
                             })
    return response.json()

if __name__ == "__main__":
    response = makePostQuery(getCanvasesQuery, variables)
    listOfCanvases = response['data']['elements']
    for canvasItem in listOfCanvases:
        if canvasItem['name'] == canvasNameToMatch:
            # Get the content of the matching Canvas
            variablesLocal = {
                "workspaceId": workspaceId,
                "canvasId": canvasItem['id']
            }
            CanvasContent = makePostQuery(
                getCanvasContentQuery, variablesLocal)                
            listOfCanvasContent = CanvasContent['data']['elements'] # Process this list as needed            
            # pprint.pprint(ListCanvasContent) # uncomment to see the list 
            break  # leave the loop

</pre>
</p>

<p>
<pre class="lang lang-node">
// Node.js Javascript

/*

How to run:
node this_script_name.js

Requires "axios" module (0.19.0), run:
npm install axios

website: https://github.com/axios/axios

*/

const axios = require('axios');

const url = "https://api.uat.alpha.dev.bluescape.io/v3/graphql"
const token = "&lt;SET_TOKEN&gt;"
const workspaceId = "&lt;workspaceId&gt;"
// String to match on the Canvas "name" field
const canvasNameToMatch = 'January 2021 meeting'

const makeQuery = async (query, params) => {
  try {
    const response = await axios.post(url,
      {
        query: query,
        variables: params
      },
      {
        headers: { "Authorization": "Bearer " + token }
      })
    return response.data
  }
  catch (error) {
    console.error(error)
  }
}

async function getCanvasContentFoundByName() {

  const canvasListQuery =
    `query getCanvasesfromWorkspace($workspaceId: String!) {
      elements(workspaceId: $workspaceId, type: Canvas) {
          ... on Canvas {
          type: __typename
          id
          name
          transform {
              x
              y
          }      
          }
      }    
  }`

  const canvasListParams = {
    "workspaceId": workspaceId
  }
  const canvasResponse = await makeQuery(canvasListQuery, canvasListParams);
  const canvasList = canvasResponse.data.elements;
  var canvasID = ''

  // Search for the match in the "name" field
  for (var i in canvasList) {
    theCanvasName = canvasList[i].name;
    if (theCanvasName == canvasNameToMatch) {
      canvasID = canvasList[i].id
      break
    }
  }

  const getCanvasContentQuery =
    `query getCanvasContent($workspaceId: String!, $canvasId: String!) {
      elements(workspaceId: $workspaceId, canvasId: $canvasId ) {            
          type: __typename
          id            
          transform {
              x
              y
          }     
          ...on Image {
              title
              filename
              asset { imageFormat }
          } 
          ... on Text {
              text
          }
          ... on Document {
              title
              filename
              asset { documentFormat }
          }
          
      }    
    }`

  const textParamsGetCanvasContent = {
    "workspaceId": workspaceId,
    "canvasId": canvasID
  }

  const textResponse = await makeQuery(getCanvasContentQuery, textParamsGetCanvasContent);
  const listOfCanvasContent = textResponse.data.elements; // Process this list as needed 
  // console.log(JSON.stringify(listOfCanvasContent, null, "  ")); // uncomment to see the list 
}

// Run the requests
getCanvasContentFoundByName();
</pre>
</p>

<p>
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.
</p>
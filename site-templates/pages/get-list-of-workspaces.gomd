<h1>Get the list of your workspaces</h1>

<p>
<b>Objective</b>: get a list of all Workspaces you can access. You do not need to know your userId to perform this operation. From this list you can retrieve the workspace IDs to use on other APIs that require you to have the Workspace ID. This is a good test to verify the functionality of your Access Token.<br />
This page contains the implementation details for <a href="#rest">REST APIs</a> and for <a href="#graphql">v3 GraphQL APIs</a>.
</p>

<p>
    All API endpoints share the same base URL:
</p>

<pre>
<script type="text/javascript">document.write(apiBaseStr); </script>
</pre>

<p>
After you receive the authentication token, you can get a list of all the workspaces you can access.
</p>

<a name="rest" class="internal-anchor"><h2>Implementation using REST APIs</h2></a>

<table class="table table-striped">
  <tr>
    <td><b>Endpoint</b></td>
    <td>/v2/users/me/workspaces</td>
  </tr>
  <tr>
      <td><b>Method</b></td>
      <td>GET</td>
  </tr>  
  <tr>
    <td><b>Comments</b></td>
    <td>You do not need to know the userId to get this list of workspaces of the user.</td>
  </tr>
</table>



<h2>Code sample</h2>

<p>
  See below code samples in Python and Node.js.
</p>


<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-python">
# Python Code (python 3.5+)
import requests
import pprint

'''
Required modules:
    requests 2.22.0
'''

# Get the list of workspaces the user account associates to the Authentication Token can access

token = '&lt;SET_TOKEN&gt;'

if __name__ == "__main__":
   portal = "<script type="text/javascript">document.write(apiBaseStr); </script>"

   # Get all the workspaces for your user
   API_version = 'v2'

   API_endpoint = '/' + API_version + '/users/me/workspaces'

   the_request = requests.get(
       portal + API_endpoint,
       headers={"Authorization": "Bearer " + token}
   )

  # format answer to json
   json_response = the_request.json()
   # By default we get the first 25 workspaces

  # added to format display of json output
   pprint.pprint(json_response)
</pre>
</p>


<p>
<pre class="lang lang-node">
// NodeJS
var axios = require('axios');

/*

How to run:
node this_script_name.js

Requires "axios" module (0.19.0), run:
npm install axios

website: https://github.com/axios/axios

*/

const token = '&lt;SET_TOKEN&gt;';
const portal = '<script type="text/javascript">document.write(apiBaseStr); </script>';
const api_version = 'v2';
const api_endpoint = '/users/me/workspaces';

request_values = {
    method: 'GET',
    url: portal + '/' + api_version + api_endpoint,
    headers : {
        'Authorization': "Bearer " + token,
        'Content-Type' : 'application/json'    
    }
  };

axios(request_values)
    .then(function (response) {
      if (response.status == 200)
      {
          console.log("Success");
          console.log(response.data);
      }
    })
    .catch (function (error) {
        console.log('Error: ' + error.message);
    });
    
</pre>
</p>

<p>
<pre class="lang lang-curl">
curl --location --request GET '<script type="text/javascript">document.write(apiBaseStr); </script>/v2/users/me/workspaces' \
--header 'Authorization: Bearer &lt;TOKEN&gt;' 
</pre>
</p>

<h2>OUTPUT</h2>

<p>
What you should get: JSON with the list of the first 25 workspaces your user has access to.
</p>

<table class="table table-striped">
  <tr>
    <td><b>Element</b></td>
    <td><b>Json</b></td>
    <td><b>Comments</b></td>
  </tr>
  <tr>
      <td>Workspace ID</td>
      <td>['workspaces'][N]['id']</td>
      <td>where N is the N-th workspace in the list.</td>
  </tr>
  <tr>
      <td>Workspace name</td>
      <td>['workspaces'][N]['name']</td>
      <td>where N is the N-th workspace in the list.</td>
  </tr>

</table>


<h3>Output Json sample</h3>
<pre>
{'limit': 25,
'offset': 0,
'paging': {'next': '/v2/users/me/workspaces?offset=25&limit=25',
            'prev': None,
            'self': '/v2/users/me/workspaces?offset=0&limit=25'},
'size': 25,
'total': 121,
'workspaces': [{'active_users_count': 0,
            'created_at': '2016-11-18T01:34:10.000Z',
            'default_role_uid': None,
            'description': '',
            'favorite': 0,
            'has_meeting': False,
            'name': 'Hello',
            'organization': {'default_public_workspace_role_uid': 'mmFwoDayeaLnPGx3QTcZ',
                            'name': 'Bluescape',
                            'uid': '2M-EiUhza9MZgrw2CJ31'},
            'organization_uid': '2M-EiUhza9MZgrw2CJ31',
            'public': True,
            'publish_state': 'published',
            'publish_state_at': '2016-11-18T01:35:38.000Z',
            'published_at': '2016-11-18T01:35:38.000Z',
            'published_url': 'https://viewer.bluescape.com/9r1UGKtsoxRfv_x3kd-E',
            'uid': '9r1UGKtsoxRfv_x3kd-E',
            'updated_at': '2019-10-07T21:59:03.000Z',
            'users_count': 2,
            'workspace_owner': {'avatar_url': None,
                                'created_at': '2016-06-27T23:41:14.000Z',
                                'email': 'indiana.jones@bluescape.com',
                                'first_name': 'Indiana',
                                'industry': 'Other - not listed',
                                'last_name': 'Jones',
                                'locked_at': None,
                                'phone_number': '4085553848',
                                'title': None,
                                'uid': 'JnPiG6qd2EtFCjipWRE1',
                                'updated_at': '2019-02-04T11:11:32.000Z'},
            'workspace_role': {'can_at_mention': True,
                                'can_comment': True,
                                'can_download_assets': True,
                                'can_edit_workspace_content': True,
                                'can_list_collaborators': True,
                                'can_send_message': True,
                                'can_send_to_wall': True,
                                'can_view_workspace_content': True,
                                'can_view_workspace_settings': True,
                                'description': 'Editor can view workspace '
                                            'settings, can view, '
                                            'comment and edit '
                                            'workspaces content, and '
                                            'can view collaborators',
                                'display_order': 3,
                                'is_custom': False,
                                'name': 'Editor',
                                'type': 'user',
                                'uid': 'mmFwoDayeaLnPGx9QTcZ'}},
            {'active_users_count': 0,
            'created_at': '2016-12-12T20:32:57.000Z',
            'default_role_uid': None,  
            ... 
            ... 
</pre>

<!-- v3 output
<pre>
{
  "workspaces": [
      {
          "id": "jb37zzmsAvin16ti2A-9",
          "name": "test-workspace",
          "description": "",
          "isPublic": true,
          "defaultRoleId": "JuTasisnG_LWZ6VyE-d5",
          "organizationId": "ugNVBeehXBSc8wV3BzTG",
          "contentUpdatedAt": null,
          "updatedAt": "2021-02-25T19:51:12.000Z"
      }
  ],
  "prev": null,
  "next": null,
  "totalItems": 1
}
</pre>
-->

<a name="graphql" class="internal-anchor"><h2>Implementation using v3 GraphQL APIs</h2></a>

<table class="table table-striped">
    <tr>
      <td><b>Query</b></td>
      <td>me</td>
    </tr> 
    <tr>
      <td><b>Comments</b></td>
      <td>You do not need to know the userId to get this list of workspaces of the user.</td>
    </tr>
</table>

<h3>Example Query:</h3>
<pre>
query getWorkspaces{
    me {
        workspaces {
        totalItems
        results {
            name
            id
            }
        }
    }
}
</pre>

<h2>Code sample</h2>

<p>
    See below for full code examples of this implementation in Python and Node.js.
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<p>
<pre class="lang lang-curl">
curl --location --request POST '<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/' \
--header 'Authorization: Bearer &lt;TOKEN&gt;' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"query getWorkspaces{\n  me {\n    workspaces {\n      totalItems\n      results {\n        name\n        id\n      }\n    }\n  }\n}","variables":{}}'
</pre>
</p>

<p>
<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/"
const token = "&lt;SET_TOKEN&gt;"
const query = 
    `query getWorkspaces{
        me {
            workspaces {
            totalItems
            results {
                name
                id
                }
            }
        }
    }`
const getWorkspaces = async () => {
    try {
        const response = await axios.post(url,
            {query: query}, 
            {headers: {"Authorization": "Bearer " + token}})
        
        console.log(response.data);
        return response
    }
    catch(error) {
        console.error(error)
    }
}

getWorkspaces();
</pre>
</p>

<p>
<pre class="lang lang-python">
import requests
import pprint

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/"
token = "&lt;SET_TOKEN&gt;"
query = """
    query getWorkspaces{
        me {
            workspaces {
            totalItems
            results {
                name
                id
                }
            }
        }
    }
    """
def makeQuery():

    response = requests.post(url, 
    headers={"Authorization": "Bearer " + token
    },
    json={'query': query})

    return response.json()

if __name__ == "__main__":
    response = makeQuery()
    pprint.pprint(response)
</pre>
</p>

<h3>Output</h3>
<pre>
{
    "data": {
        "me": {
            "workspaces": {
                "totalItems": 2,
                "results": [
                    {
                        "name": "test ONE",
                        "id": "7nAUfna7R97bTo1l2i3N"
                    },
                    {
                        "name": "workspace - example 1",
                        "id": "k03Mis4g6m4X872j6ovj"
                    }
                ]
            }
        }
    }
}
</pre>

<br />
If you have any questions or comments, please contact us at <a href="https://support.bluescape.com" target="_blank">Bluescape support</a>.


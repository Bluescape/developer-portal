<style>  
  pre {
    font-size: 13px;
  }
  
</style>

<h1>What is new in v3?</h1>
<p>This page covers the new features in v3, as a comparison with v2.<br />

One new inclusion in v3 are the new <a href="/docs/page/what-is-graphql">GraphQL APIs</a>.<br />

Regarding the REST APIs, the main differences can be grouped in 3 sections:
<ul>
  <li><a href="#changes-in-rest-api-verbs">Changes in REST API verbs</a></li>
  <li><a href="#changes-in-request-response-body">Changes in Request and Response Body</a></li>
  <li><a href="#changes-in-path-rest-apis">Changes in the path of the REST APIs</a></li>
</ul>
</p>
<a name="changes-in-rest-api-verbs" class="internal-anchor"></a><h2>Changes in REST API verbs</h2>
<table class="table table-striped">
<td><b>Subject</b></td>
    <td><center><b>v2</b></center></td>
    <td><center><b>v3</b></center></td>
  <tr>
    <td>In V3, when you want to modify a property of an object that is <br />already created (its position, color, text, etc.), the REST API verb to use is PATCH.</td>
    <td>REST API verb: <b>PUT</b><br /><br />
    Specify the properties to change in the request body of the PUT call. 
    </td>
    <td>REST API verb: <b>PATCH</b> <br /><br />
    Specify the properties to change in the request body of the PATCH call.
    <br /><br >
    Please note the following v3 REST APIs that still use the <b>PUT</b> verb to make a change:
    <ul>
      <li>Progress Asset Upload to processing: <pre>PUT /v3/workspaces/{workspace}/assets/uploads/{id}</pre></li>
      <li>Update the Member's Role:<pre>PUT /v3/organizations/{organizationId}/members/{memberId}/role</pre></li>
      <li>Update Avatar: <pre>PUT /v3/users/me/avatar</pre></li>
      <li>Favourite a workspace: <pre>PUT /v3/users/me/favorites/workspaces/{workspaceId}</pre></li>
    </ul>     
    </td>
  </tr>
</table>
<a name="changes-in-request-response-body" class="internal-anchor"></a><h2>Changes in Request and Response Body</h2>
<!-- REST APIs -->
<table class="table table-striped">
  <tr>
    <td><b>Subject</b></td>
    <td><center><b>v2</b></center></td>
    <td><center><b>v3</b></center></td>
  </tr>
  <tr>
    <td>
      In V3, the fields containing the unique IDs for each object are no longer using the “uid” name or suffix, they are now called "id" or use the "id" suffix. 
      <br /><br />
      See the example of the response body for getting a workspace.
    </td>
    <td>
<pre>
{
  "workspace": {       
    <b>"uid"</b>: "vfg6CZFHqWqsVjyZNhmH",
    "name": "Vladimir - project, notes, etc.",
    ... 
    "organization": {
      "name": "Bluescape",
      "uid": "wOETxsWt3SAmuyUQbbLy",
      <b>"default_public_workspace_role_uid"</b>:
      "VJKO1MCvXQLfhMB6bzde"
    },
    "favorite": false,
    "users_count": 12,
    "workspace_owner": {
      "first_name": "Vladimir",
      ... 
      <b>"uid": "DbfcGpN-U30XIjjy0yjX"</b>
    },
    "workspace_role": {
      "name": "Owner",
      ...
      <b>"uid"</b>: "HLBI9sd-yyHWupboR7MH"
    },
    <b>"organization_uid"</b>: "wOETxsWt3SAmuyUQbbLy",
    <b>"default_role_uid"</b>: "VJKO1MCvXQLfhMB6bzde"
  }
}
</pre>
    </td>
    <td>
<pre>
{  
  <b>"id"</b>: "j5FIqcSmCpkJjXnWb8qk",
  "name": "Team Project",
  "description": "",
  "isPublic": true,
  <b>"defaultRoleId"</b>: "gQ2DA6mMC4Op-_EHuR6S",
  <b>"organizationId"</b>: "5JIGySFmJpfen3Jnozqx",
  <b>"ownerId"</b>: "qIN-MJbWD1fGByxm-qw4",
  "updatedAt": "2020-12-04T00:54:31.000Z"
}
</pre>
    </td>
  </tr>
  <tr>
    <td>In V3, the elements are not longer grouped by their type when running a GET API to get the list of elements the workspace.</td>
    <td>
      v2 response body delivers the elements of the workspace grouped by type:
      <br />
      <ul>
        <li>
          all text objects within this array:<br />
<pre>
"text": [...]
</pre>
        </li>
        <li>
          all strokes within this array:<br />
<pre>
"strokes": [...]
</pre>
        </li>
        <li>
          all images within this array:<br />
<pre>
"images": [...]
</pre>
        </li>
      </ul>
      List of Types in V3: text, images, browsers, documents, grids, notes, strokes, videos, canvas.
    </td>
    <td>
      v3 does not group the elements by type
      <ul>
        <li>
          the response body contains all the elements within this array: 
<pre>
"data": [...]
</pre>
        </li>
        <li>
          and each element contains its type definition, specified by the “type” key. E.g.:
          <ul>
            <li><pre>"type": "Text"</pre></li>
            <li><pre>"type": "Canvas"</pre></li>
            <li>etc.</li>
          </ul>
        </li>
      </ul>

<pre>
{
  <b>"data"</b>: [
    {
      "id": "5fc7f508e2db9d003ee5ee4c",
      "zIndex": 5,      
      ...
      <b>"type": "Text"</b>,
      "text": "Text - test 1",
      ...
    },
    {
      "id": "60249bc63fe6b011cc752a4d",
      "zIndex": 10,      
      ...
      <b>"type": "Canvas"</b>,
      "name": "Top Canvas",
      ...
    }
  ]
}
</pre>
List of Types in V3: Text, Note, Image, Document, Grid, Browser, Video, Stroke, Shape, Line, Canvas.
    </td>
  </tr>
  <tr>
    <td>
      In v3 there is a new way specify the position of objects in the workspace.<br />
    </td>
    <td>
    In v2: <br/><br />
<pre>
{
  "text": "Hello there!", 
  ...
  "x": 100,
  "y": 200,
  ...
}
</pre>  
    </td>
    <td>
      In v3 the position of an object is specified within the <b>transform</b> key:<br /><br />
<pre>
{
  "type": "Text",
  "text": "Hello there!",
  ... 
  <b>"transform" : {
      "x": 100,
      "y": 200
    }</b
  >
  ...
}
</pre>
    </td>
  </tr>
<tr>
    <td>
      In v3 there is a new way to specify the dimensions (height and width) of an element, this except for elements of the Image, Document or Video type.
    </td>
    <td> In v2, all the elements specify the width and height properties this way:<br /><br />
<pre>
{
  "text": "Hello there!", 
  ...
  "width": 300, 
  "height": 200, 
  ...
}
</pre>
    </td>
    <td>
      In v3 (except for elements of the Image, Document or Video type), the dimensions of an element are specified within the <b>style</b> key:<br /><br />
<pre>
{
  "type": "Text",
  "text": "Hello there!",
  ... 
  <b>"style": {
      "width": 300, 
      "height": 200, 
      ...       
      },
    }</b>
  ...
}</pre>
For the elements of the Image, Document or Video type, the width and height properties are specified as in v2:<br /><br />
<pre>
{
  "type": "Image",
  ... 
  <b>"width": 300, 
  "height": 200,  </b>
  ...       
}</pre>
    </td>
  </tr>

  <tr>
    <td>In v3 there is a new way to specify the color schema for elements.</td>
    <td>In v2, this is the way the color is specified, for example, for a Text object:<br /><br />
<pre>
{
    "text": "Hello, new text!",
    ...
    "fontColor" : "#ffffff",
    "backgroundColor": "Red"
}
</pre>   
    </td>
    <td>In v3 the color scheme is defined using RGBA color model.<br />
        What is RGBA? You can find a detailed explanation here: <a href="https://en.wikipedia.org/wiki/RGBA_color_model" target="_blank">RGBA Color Model</a> <br /><br />
        The color is defined by:
        <ul>
            <li>R: how much red</li>
            <li>G: how much green</li>
            <li>B: how much blue</li>
            <li>A: alpha channel, how opaque the color is (0: transparent, 1: solid color)</li>
        </ul>
        The color properties of an object are specified within the <b>style</b> key, also for a Text object:<br />

<pre>
{ 
  "type": "Text",
  "text": "Hello there!",
  ... 
  <b>"style": {
      ... 
      "color": {
        "r": 255,
        "g": 255,
        "b": 255,
        "a": 1
      },
      "backgroundColor": {
        "r": 255,
        "g": 0,
        "b": 0,
        "a": 1
      },
    }</b>
  ...
}</pre>   
 </td> 
  </tr>
  <tr>
    <td>Differently than as in v2, in the currently available version of V3, you cannot create elements associated directly into a Canvas, but you can list all the elements within a Canvas.
    </td>
    <td>In v2 you can create elements directly into a Canvas. These elements will be displayed in the Canvas, using the top-left corner as the (0,0) point of reference for their coordinates . If no set of (x,y) coordinates are specified, then they will be placed in the top-left corner of the Canvas.<br /><br />
    Example: Create Text in Canvas <pre>/v2/workspaces/{workspace_id}/elements/canvas/{canvas_id}/text</pre>
    To list the elements inside a Canvas, in v2 you can use: <pre>GET /v2/workspaces/{workspace_id}/elements/canvas/{canvas_id}/elements</pre>
    </td>
    <td>In the currently available version of V3, there is not a method to create an element into a Canvas, not even if you provide a parameter such as the one below to a POST call:<pre>?canvas={canvasID}</pre> But there is a way to list the elements inside a Canvas. In v3 you can use: <pre>GET /v3/workspaces/{workspace_id}/elements<b>?canvas={canvas_id}</b></pre></td>
  </tr>
  <!-- <tr>
    <td>In the currently available version of V3, when adding an element to a Canvas, the coordinates you specify are absolute for the workspace, not relative to the top-left corner of the canvas</td>
    <td>In v2, when you add an element to a canvas and specify a (x,y) set of coordinates, they are relative to the top-left corner of the Canvas.<br />If you do not specify the coordinates, it is assumed they are (0,0), and the new element will be added at the top-left corner of the Canvas</td>
    <td>In the currently available version of V3, when you create a new element in a Canvas, the coordinates you specify are absolute for the workspace.<br />If you do not specify the coordinates, it is assumed they are (0,0), and will be created in the (0,0) coordinates of the workspace, not of the Canvas.</td>
  </tr> -->
  <tr>
    <td>
      Let's see a summary example for how to specify the style properties of an object: position, height/width, color,
      background color. This is applied to a new Text element.
    </td>
    <td>In v2: <br /><br />
<pre>
{
  "text": "Hello there!", 
  ...
  "x": 1000,
  "y": 2000,
  "width": 300, 
  "height": 200, 
  "fontColor": "blue",
  "backgroundColor": "white",
  ...
}
</pre>
    </td>
    <td>
      In v3 the dimensions of an object are specified within the <b>style</b> key:<br />
<pre>
{
  "type": "Text",
  "text": "Hello there!",
  ...   
  <b>"transform" : {
    "x": 1000,
    "y": 2000
  },
  "style": {
      "width": 600, 
      "height": 400, 
      ... 
      "color": {
        "r": 0,
        "g": 0,
        "b": 255,
        "a": 1
      },
      "backgroundColor": {
        "r": 255,
        "g": 255,
        "b": 255,
        "a": 1
      },
    }</b>
  ...
}</pre>
    </td>
  </tr>
</table>
<a name="changes-in-path-rest-apis" class="internal-anchor"></a><h2>Changes in the path of the REST APIs</h2>
<table class="table table-striped">
<td><b>Subject</b></td>
    <td><center><b>v2</b></center></td>
    <td><center><b>v3</b></center></td>
  <tr>
    <td>How to get the list of all objects of an object type in the workspace.<br /><br />
    <b>NOTE</b>: The object types are different in v2 and V3, see the difference sin casing and names</td>
    <td>
    <pre>GET /v2/workspaces/{workspace_id}/elements/{object_type}</pre>
        List of Types in V3: text, images, browsers, documents, grids, notes, strokes, videos, canvas.
    </td>
    <td><pre>GET /v3/workspaces/{workspaceId}/elements<b>?type={object_type}</b></pre>
        List of Types in V3: Text, Note, Image, Document, Grid, Browser, Video, Stroke, Shape, Line, Canvas, Selection, Window.
    </td>
  </tr>
  <tr>
    <td>How to get the content of a Canvas</td>
    <td><pre>GET /v2/workspaces/{workspace_uid}/elements/canvas/{canvas_uid}</re></td>
    <td><pre>GET /v3/workspaces/{workspaceId}/elements<b>?canvas={canvasID}</b></pre></td>
  </tr>
  <tr>
    <td>How to get the content of a Canvas, for a specific object type</td>
    <td><pre>GET /v2/workspaces/{workspace_uid}/elements/canvas/{canvas_uid}/{object_type}</pre></td>
    <td><pre>GET /v3/workspaces/{workspaceId}/elements<b>?canvas={canvasID}&type={object_type}</b></pre></td>
  </tr>
  <tr>
    <td>How to create an element, e.g. a Text element</td>
    <td><pre>POST /v2/workspaces/{workspace_id}/elements/text</pre></td>
    <td><pre>POST /v3/workspaces/{workspaceId}/elements</pre>Provide the type in the request body: 
<pre>
{
  "type": "Text"
  ...
}</pre></td>
  </tr>
  <tr>
    <td>How to create an element in a canvas, e.g. a Browser element</td>
    <td><pre>POST /v2/workspaces/{workspace_id}/elements/canvas/{canvas_id}/browsers</pre></td>
    <td><pre>POST /v3/workspaces/{workspaceId}/elements?canvas={canvasId}</pre> Provide the type in the request body: 
<pre>
{
  "type": "Browser"
  ...
}</pre></td>
  </tr>
  <tr>
    <td>How to get a my user's list of organizations</td>
    <td>In v2, this data is displayed in the response body of <br />
    <pre>GET /v2/users/me</pre> or <pre>GET /v2/users/me/organizations</pre>
    </td>
    <td>In V3, this data is only available as the response of <br />
    <pre>GET /v3/users/me/organizations</pre></td>
  </tr>  
</table>
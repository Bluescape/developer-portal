<style>
table td {
    width: 320px;
}
</style>
<h1>GraphQL vs REST APIs</h1>
<p>
Here we present a comparison of Bluescape REST and GraphQL APIs. You can appreciate the advantages of each implementation, and maybe use this list to as a help to port your queries from REST to GraphQL.
</p>
<h4>Filtering elements by Type</h4>
<p>something</p>
<table class="table table-striped">
    <tr>
        <td><center><b>REST</b></center></td>
        <td><center><b>GraphQL</b></center></td>
    </tr>
    <tr>
        <td>In REST APIs, you can query just one type at a time, or you can pull all the elements of the workspace or Canvas and filter down the answer, later, in your script.<br />
        e.g. If I need all the Canvases and Text elements in a workspace, I could run these 2 queries:
<pre>/v3/workspaces/{workspace_id}/elements?type=Canvas</pre>
<pre>/v3/workspaces/{workspace_id}/elements?type=Text</pre>
        </td>
        <td>In GraphQL, you can specify one or more types at a time. This feature allows you to add great flexibility to your scripts.
<pre>
query getTextAndCanvas{
  elements(workspace: "G1N2bS42uGwMhL_fGfzW", <b>type: [Text,Canvas]</b>) {
    type:__typename
    id
    transform {
      x y
    }
  }
}
</pre>
        </td>
    </tr>
</table>
<h4>For queries, some fields can be Unions in GraphQL</h4>
<p>LOREM</p>
<table class="table table-striped">
    <tr>
        <td style="width: 50%;"><center><b>REST</b></center></td>
        <td><center><b>GraphQL</b></center></td>
    </tr>
    <tr>
        <td>In REST APIs, for queries we use a GET. You can specify some filtering fields, but in general they are very easy to run. The results generally over fetch, they deliver all the fields available for those elements and you need to filter them later in tour script. </td>
        <td>In GraphQl, it is always an HTTP POST. You can specify exactly what fields will be returned, and in some cases those fields will need to be specified as Unions <b>(TODO: ADD LINK TO DEFINITION?)</b>. For example, for a Line element, when you query the <b>start</b> and <b>end</b> fields, you need to specify them as a Union (according to the current GraphQl Schema). See this example:<br />
<pre>
query GetLinesFromWorkspace($workspaceId: String!){
    elements(workspaceId: $workspaceId, type: Line) {        
        type: __typename
        id
        ... on Line {
            start{
                <b>... on AbsoluteLinePoint{
                    x y
                }</b>
            }
            end{
                <b>... on AbsoluteLinePoint{
                    x y
                }</b>
            }
        }
    }
}
</pre>
        </td>
    </tr>
</table>
<h4>AAAAA</h4>
<p>LOREM</p>
<table class="table table-striped">
    <tr>
        <td style="width: 50%;"><center><b>REST</b></center></td>
        <td><center><b>GraphQL</b></center></td>
    </tr>
    <tr>
        <td></td>
        <td></td>
    </tr>
</table>
<h4>AAAAA</h4>
<p>LOREM</p>
<table class="table table-striped">
    <tr>
        <td><center><b>REST</b></center></td>
        <td><center><b>GraphQL</b></center></td>
    </tr>
    <tr>
        <td></td>
        <td></td>
    </tr>
</table>


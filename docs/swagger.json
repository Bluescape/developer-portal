{
  "openapi": "3.0.0",
  "info": {
    "version": "19.7.1",
    "title": "Bluescape API",
    "description": "REST API for bluescape."
  },
  "security": [
    {
      "userAccessToken": [],
      "identityAccessToken": [],
      "wallAccessToken": [],
      "collabAccessToken": [],
      "OAUTH": [],
      "BASIC": [],
      "portalAccessToken": []
    }
  ],
  "components": {
    "securitySchemes": {
      "userAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "identityAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "wallAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "collabAccessToken": {
        "type": "http",
        "scheme": "bearer"
      },
      "OAUTH": {
        "type": "http",
        "scheme": "bearer"
      },
      "BASIC": {
        "type": "http",
        "scheme": "bearer"
      },
      "portalAccessToken": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "activation_token": {
        "name": "activation_token",
        "in": "path",
        "description": "This token get from welcome mail or resend activation mail",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "active": {
        "name": "active",
        "in": "query",
        "description": "active",
        "schema": {
          "type": "boolean"
        }
      },
      "app_ids": {
        "name": "app_ids",
        "in": "query",
        "description": "filter by app ids",
        "schema": {
          "type": "string"
        }
      },
      "authorization": {
        "name": "authorization",
        "in": "header",
        "description": "jwt bearer token",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "The JWT Token provided by the Bluescape Identity Service to acccess the protected resources",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "filter_by": {
        "name": "filter_by",
        "in": "query",
        "description": "Filter by field",
        "schema": {
          "type": "string"
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "limit",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 25
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "offset",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "order_by": {
        "name": "order_by",
        "in": "query",
        "description": "Order by fields",
        "schema": {
          "type": "string",
          "default": "uid"
        }
      },
      "order_by-saml": {
        "name": "order_by",
        "in": "query",
        "description": "Order by fields",
        "schema": {
          "type": "string",
          "enum": [
            "id",
            "admin_email",
            "name",
            "type",
            "metadata_url",
            "idp_domain",
            "primary_org_uid",
            "updated_at"
          ]
        }
      },
      "order_direction": {
        "name": "order_direction",
        "in": "query",
        "description": "ASC or DESC",
        "schema": {
          "type": "string",
          "enum": ["ASC", "DESC"],
          "default": "ASC"
        }
      },
      "query": {
        "name": "query",
        "in": "query",
        "description": "Search query",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "resource_type": {
        "name": "resource_type",
        "in": "query",
        "description": "resource_type",
        "schema": {
          "type": "string",
          "enum": ["application", "organization", "workspace"]
        }
      },
      "role": {
        "name": "role",
        "in": "query",
        "description": "Search user by role uid",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "[0-9,]+$"
        }
      },
      "saml_id": {
        "name": "saml_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "saml_provider_name": {
        "name": "saml_provider_name",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "token": {
        "name": "token",
        "in": "path",
        "description": "ResetToken",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "WorkspaceId": {
        "name": "workspace_id",
        "in": "path",
        "description": "The Unique ID of the workspace",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "SamlProvider": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SamlProvider"
            }
          }
        },
        "description": "The Saml provider to create"
      },
      "BroadcastMessageReq": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BroadcastMessageReq"
            }
          }
        },
        "required": true
      },
      "UpdateSamlProviderById": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateSamlProviderById"
            }
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BadRequestErrorObject"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "403": {
        "description": "ForbiddenError",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "404": {
        "description": "Resource Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "423": {
        "description": "LockedError",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "403-saml-delete": {
        "description": "ForbiddenError/Cannot delete a SAML provider if it has an associated organization",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          }
        }
      },
      "403WallAuthorize": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorObject"
            },
            "example": {
              "error": {
                "code": "Forbidden",
                "message": "Data Protection Policy non-compliance"
              }
            }
          }
        }
      }
    },
    "schemas": {
      "ActivateRequest": {
        "description": "Activate object",
        "required": ["first_name", "last_name", "password"],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First Name"
          },
          "last_name": {
            "type": "string",
            "description": "Last Name"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "industry": {
            "type": "string",
            "description": "Industry"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone Number"
          }
        }
      },
      "ActivateResendRequest": {
        "description": "Activate Resend object",
        "required": ["email", "is_guest"],
        "properties": {
          "email": {
            "type": "string",
            "description": "email"
          },
          "is_guest": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ActiveOrganizations": {
        "type": "object",
        "title": "UserOrganization",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "is_guest": {
            "type": "boolean"
          },
          "is_pending": {
            "type": "boolean"
          }
        }
      },
      "ActiveUser": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "leader": {
            "type": "boolean"
          }
        },
        "required": ["uid", "email", "first_name", "last_name", "leader"]
      },
      "Adhesions": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "App": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "auth_type": {
            "type": "string",
            "enum": ["STANDARD"]
          },
          "bot_uid": {
            "type": "string"
          },
          "redirect_uri": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["LIVE", "SUSPENDED"]
          },
          "logo": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ApplicationRole": {
        "type": "object",
        "title": "application_role",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "is_default": {
            "type": "boolean"
          },
          "display_order": {
            "type": "integer"
          },
          "can_list_users": {
            "type": "boolean"
          },
          "can_list_organizations": {
            "type": "boolean"
          },
          "can_create_organizations": {
            "type": "boolean"
          },
          "can_edit_organizations": {
            "type": "boolean"
          },
          "can_delete_organizations": {
            "type": "boolean"
          },
          "can_edit_users": {
            "type": "boolean"
          },
          "can_list_walls": {
            "type": "boolean"
          },
          "can_create_walls": {
            "type": "boolean"
          },
          "can_edit_walls": {
            "type": "boolean"
          },
          "can_delete_walls": {
            "type": "boolean"
          },
          "can_list_plans": {
            "type": "boolean"
          },
          "can_create_plans": {
            "type": "boolean"
          },
          "can_edit_plans": {
            "type": "boolean"
          },
          "can_delete_plans": {
            "type": "boolean"
          },
          "can_lock_users": {
            "type": "boolean"
          },
          "can_lock_organizations": {
            "type": "boolean"
          },
          "can_delete_users": {
            "type": "boolean"
          },
          "can_create_help_menu": {
            "type": "boolean"
          },
          "can_edit_help_menu": {
            "type": "boolean"
          },
          "can_delete_help_menu": {
            "type": "boolean"
          },
          "can_list_saml_providers": {
            "type": "boolean"
          },
          "can_create_saml_providers": {
            "type": "boolean"
          },
          "can_edit_saml_providers": {
            "type": "boolean"
          },
          "can_delete_saml_providers": {
            "type": "boolean"
          },
          "can_create_broadcast_messages": {
            "type": "boolean"
          },
          "can_edit_broadcast_messages": {
            "type": "boolean"
          },
          "can_delete_broadcast_messages": {
            "type": "boolean"
          },
          "can_create_permission_groups": {
            "type": "boolean"
          },
          "can_delete_permission_groups": {
            "type": "boolean"
          },
          "can_edit_permission_groups": {
            "type": "boolean"
          },
          "can_list_application_roles": {
            "type": "boolean"
          },
          "can_trigger_webhook": {
            "type": "boolean"
          }
        },
        "required": ["uid", "name"]
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AttachmentCreateRequest": {
        "type": "object",
        "required": ["sourceId"],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "sourceId": {
            "type": "string"
          }
        }
      },
      "AttachmentCreateResponse": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "source": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "surface": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      },
      "AuthenticateRequest": {
        "description": "Authenticate Request object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "email"
          },
          "password": {
            "type": "string",
            "description": "Password"
          },
          "remember_me": {
            "type": "boolean"
          }
        }
      },
      "BackgroundColor": {
        "type": "string",
        "default": "#ea3e35"
      },
      "BadRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error_1"
          }
        },
        "title": "ErrorRes"
      },
      "BadRequestErrorObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "BasicRole": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "display_order": {
            "type": "integer"
          },
          "organization_uid": {
            "type": "string"
          },
          "is_custom": {
            "type": "boolean"
          }
        },
        "required": ["uid", "name"]
      },
      "Bot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "BroadcastMessage": {
        "title": "BroadcastMessage",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "start_at": {
            "type": "string",
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_dismissable": {
            "type": "boolean",
            "default": true
          },
          "user": {
            "$ref": "#/components/schemas/BroadcastUser"
          },
          "type": {
            "$ref": "#/components/schemas/BroadcastMsgType"
          }
        }
      },
      "BroadcastMessageReq": {
        "title": "BroadcastMessageReq",
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "start_at": {
            "type": "string",
            "format": "date-time"
          },
          "end_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_dismissable": {
            "type": "boolean",
            "default": true
          },
          "type": {
            "$ref": "#/components/schemas/BroadcastMsgType"
          }
        }
      },
      "BroadcastMsgType": {
        "type": "string",
        "enum": ["PUBLIC", "INTERNAL"],
        "default": "PUBLIC"
      },
      "BroadcastUser": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "Browser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "height": {
            "type": "integer"
          },
          "width": {
            "type": "integer"
          },
          "contentWidth": {
            "type": "integer"
          },
          "contentHeight": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "BrowserCreateRequest": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "contentWidth": {
            "type": "integer"
          },
          "contentHeight": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          },
          "frameless": {
            "type": "boolean"
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "BrowserCreateResponse": {
        "type": "object",
        "properties": {
          "browser": {
            "$ref": "#/components/schemas/Browser"
          }
        }
      },
      "BrowserUpdateRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "BrushType": {
        "type": "string",
        "enum": ["Pen", "Eraser"],
        "default": "Pen"
      },
      "Canvas": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "example": "Text"
          },
          "borderColor": {
            "$ref": "#/components/schemas/CanvasBorderColor"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "children": {
            "$ref": "#/components/schemas/Children"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "CanvasBorderColor": {
        "type": "string",
        "enum": ["Red", "Yellow", "Green", "Blue"],
        "default": "Red"
      },
      "CanvasCreateRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "example": "Text"
          },
          "borderColor": {
            "$ref": "#/components/schemas/CanvasBorderColor"
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "CanvasCreateResponse": {
        "type": "object",
        "properties": {
          "canvas": {
            "$ref": "#/components/schemas/Canvas"
          }
        }
      },
      "CanvasUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Text"
          },
          "borderColor": {
            "$ref": "#/components/schemas/CanvasBorderColor"
          }
        }
      },
      "ChallengeRequest": {
        "description": "Challenge Request object",
        "required": ["wall_uid"],
        "properties": {
          "wall_uid": {
            "type": "string",
            "description": "Wall UID"
          }
        }
      },
      "ChallengeResponse": {
        "description": "Challenge Response object",
        "required": ["challenge"],
        "properties": {
          "challenge": {
            "type": "string",
            "description": "Challenge text"
          }
        }
      },
      "Children": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Collaborator": {
        "title": "Collaborator",
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "user_uid": {
            "type": "string"
          },
          "template_role_uid": {
            "type": "string"
          }
        }
      },
      "Comment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "actorType": {
            "type": "string"
          },
          "actorId": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CommentCreateRequest": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": {
            "type": "string",
            "description": "The body of the comment"
          },
          "parentId": {
            "type": "string",
            "description": "Optional ID of parent comment if this is to be a child response.  Only one level of nesting is supported."
          }
        }
      },
      "CommentCreateResponse": {
        "type": "object",
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/Comment"
          }
        }
      },
      "CreateARole": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "is_bot": {
                "type": "boolean"
              },
              "built_permissions": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/BasicRole"
          },
          {
            "type": "object",
            "properties": {
              "updated_at": {
                "type": "string"
              },
              "created_at": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "strokeIds": {
            "$ref": "#/components/schemas/StrokeIds"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "DocumentCreateResponse": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "DocumentUpdateRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          }
        }
      },
      "Domains": {
        "title": "GetOrgDomains",
        "type": "object",
        "properties": {
          "whitelist_domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "blacklist_domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error_2"
          }
        },
        "title": "ErrorRes"
      },
      "Error_1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "Error_2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ErrorObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "FontFamily": {
        "type": "string",
        "enum": [
          "Dosis",
          "Helvetica",
          "Times New Roman",
          "Source Code Pro",
          "Aleo",
          "Exo 2"
        ],
        "default": "Dosis"
      },
      "FontSize": {
        "type": "integer",
        "default": 64
      },
      "FontStyle": {
        "type": "string",
        "enum": ["normal", "italic"],
        "default": "normal"
      },
      "FontWeight": {
        "type": "string",
        "enum": ["normal", "bold"],
        "default": "normal"
      },
      "ForgotRequest": {
        "description": " Forgot Password Request object",
        "required": ["email"],
        "properties": {
          "email": {
            "type": "string",
            "description": "email"
          },
          "redirect_uri": {
            "type": "string",
            "description": "Redirect URI for after reset password"
          }
        }
      },
      "GetAllRoles": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicRole"
          },
          {
            "type": "object",
            "properties": {
              "built_permissions": {
                "type": "string"
              },
              "permission_groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              },
              "permission_keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "GetARole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicRole"
          },
          {
            "type": "object",
            "properties": {
              "permission_keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "permission_groups": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uid": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "is_visible": {
                      "type": "boolean"
                    },
                    "key": {
                      "type": "string"
                    },
                    "dependency_permission_group_uids": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "usage": {
                "type": "object",
                "properties": {
                  "user_count": {
                    "type": "integer"
                  },
                  "is_default_organization_user_role": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      },
      "GetAttachmentsListResponse": {
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            }
          }
        }
      },
      "GetBrowserByIdResponse": {
        "type": "object",
        "properties": {
          "browser": {
            "$ref": "#/components/schemas/Browser"
          }
        }
      },
      "GetBrowsersListResponse": {
        "type": "object",
        "properties": {
          "browsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Browser"
            }
          }
        }
      },
      "GetCanvasByIdResponse": {
        "type": "object",
        "properties": {
          "canvas": {
            "$ref": "#/components/schemas/Canvas"
          }
        }
      },
      "GetCanvasListResponse": {
        "type": "object",
        "properties": {
          "canvas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Canvas"
            }
          }
        }
      },
      "GetCommentsListResponse": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "GetDocumentByIdResponse": {
        "type": "object",
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "GetDocumentsListResponse": {
        "type": "object",
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        }
      },
      "GetGridByIdResponse": {
        "type": "object",
        "properties": {
          "grid": {
            "$ref": "#/components/schemas/Grid"
          }
        }
      },
      "GetGridsListResponse": {
        "type": "object",
        "properties": {
          "grids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grid"
            }
          }
        }
      },
      "GetImageByIdResponse": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "GetImagesListResponse": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            }
          }
        }
      },
      "GetNoteByIdResponse": {
        "type": "object",
        "properties": {
          "note": {
            "$ref": "#/components/schemas/Note"
          }
        }
      },
      "GetNotesListResponse": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
      },
      "GetPutPostTemplateRes": {
        "title": "GetPutPostTemplateRes",
        "type": "object",
        "properties": {
          "creator_uid": {
            "type": "string"
          },
          "organization_uid": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string"
          },
          "master_id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 128
          },
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "category": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "metadata": {
            "type": "object"
          },
          "parameters": {
            "type": "object"
          },
          "icon": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collaborator"
            }
          }
        }
      },
      "GetStrokeByIdResponse": {
        "type": "object",
        "properties": {
          "stroke": {
            "$ref": "#/components/schemas/Stroke"
          }
        }
      },
      "GetStrokesListResponse": {
        "type": "object",
        "properties": {
          "strokes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stroke"
            }
          }
        }
      },
      "GetTextByIdResponse": {
        "type": "object",
        "properties": {
          "text": {
            "$ref": "#/components/schemas/Text"
          }
        }
      },
      "GetTextListResponse": {
        "type": "object",
        "properties": {
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Text"
            }
          }
        }
      },
      "GetVideoByIdResponse": {
        "type": "object",
        "properties": {
          "video": {
            "$ref": "#/components/schemas/Video"
          }
        }
      },
      "GetVideosListResponse": {
        "type": "object",
        "properties": {
          "videos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Video"
            }
          }
        }
      },
      "Grid": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "horizontalMargin": {
            "type": "integer"
          },
          "verticalMargin": {
            "type": "integer"
          },
          "cellWidth": {
            "type": "integer"
          },
          "cellHeight": {
            "type": "integer"
          },
          "rows": {
            "type": "integer"
          },
          "columns": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GridElements"
            }
          }
        }
      },
      "GridElements": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "row": {
            "type": "integer"
          },
          "column": {
            "type": "integer"
          }
        }
      },
      "IdentityProvider": {
        "title": "IdentityProvider",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["okta", "onelogin", "pingfederate", "adfs", "f5"]
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "url": {
            "type": "string"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "strokeIds": {
            "$ref": "#/components/schemas/StrokeIds"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "ImageCreateResponse": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        }
      },
      "ImageUpdateRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          }
        }
      },
      "InviteRequest": {
        "description": "Invite Request Object",
        "required": ["emails", "user_uid"],
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "is_guest": {
                  "type": "boolean",
                  "default": false
                },
                "notify_admin": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          "user_uid": {
            "type": "string",
            "description": "Invitation sender user ID"
          },
          "saml_provider_id": {
            "type": "integer",
            "default": false
          }
        }
      },
      "InviteResponse": {
        "description": "Invite Response Object",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": ""
                },
                "user_uid": {
                  "type": "string",
                  "description": "created or already used user UID based on given email"
                }
              }
            }
          }
        }
      },
      "Listener": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "type": {
            "type": "string",
            "enum": ["organization", "workspace"]
          },
          "organizationId": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          },
          "targetType": {
            "type": "string"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          },
          "status": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["ACTIVE", "IN_ACTIVE"]
            }
          }
        }
      },
      "ListenerApi-BadRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ListenerApi-Error_1"
          }
        },
        "title": "ListenerApi-BadRequestError"
      },
      "ListenerApi-Error": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ListenerApi-Error_2"
          }
        },
        "title": "ListenerApi-Error"
      },
      "ListenerApi-Error_1": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "ListenerApi-Error_2": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ListenerApi-SuccessRes": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "title": "ListenerApi-SuccessRes"
      },
      "ListenerArchiveServiceRequest": {
        "type": "object",
        "properties": {
          "workspaceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "minimum": 1
            }
          }
        }
      },
      "ListenerCreateRequest": {
        "type": "object",
        "required": ["type", "url", "eventTypes"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["organization", "workspace"]
          },
          "url": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "workspaceId": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ListenerDeleteServiceRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "user": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "exclude": {
                  "type": "boolean",
                  "default": false
                }
              }
            },
            "workspaceIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "ListenerGetResponse": {
        "type": "object",
        "title": "ListenerGetResponse",
        "properties": {
          "listeners": {
            "$ref": "#/components/schemas/Listener"
          }
        }
      },
      "ListenerUpdateRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "targetId": {
            "type": "string"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": ["ACTIVE", "IN_ACTIVE"]
          }
        },
        "anyOf": [
          {
            "required": ["url"]
          },
          {
            "required": ["targetId", "eventTypes"]
          },
          {
            "required": ["status"]
          }
        ]
      },
      "ListenerUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "listener_id": {
            "type": "string"
          }
        }
      },
      "LoginDetails": {
        "title": "LoginDetails",
        "type": "object",
        "properties": {
          "user_uid": {
            "type": "string"
          },
          "login_count": {
            "type": "integer"
          },
          "failed_attempts": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time"
          },
          "current_login_at": {
            "type": "string",
            "format": "date-time"
          },
          "current_login_ip": {
            "type": "string"
          },
          "last_login_ip": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "description": "Login Request object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "email"
          },
          "remember_me": {
            "type": "boolean"
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "body": {
            "type": "string"
          },
          "message_type": {
            "type": "string",
            "enum": ["MESSAGE", "NOTIFICATION"]
          },
          "public": {
            "type": "boolean"
          },
          "target_id": {
            "type": "string"
          },
          "target_rect": {
            "type": "string"
          },
          "target_name": {
            "type": "string"
          },
          "target_type": {
            "type": "string"
          },
          "workspace_uid": {
            "type": "string"
          },
          "sender_uid": {
            "type": "string"
          },
          "message_recipients": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "archived": {
                  "type": "boolean"
                },
                "user_uid": {
                  "type": "string"
                }
              }
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Message_2": {
        "title": "Message",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "message_type": {
            "type": "string",
            "enum": ["MESSAGE", "NOTIFICATION"]
          },
          "body": {
            "type": "string"
          },
          "workspace_uid": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "target_type": {
            "type": "string"
          },
          "target_rect": {
            "type": "string"
          },
          "target_uid": {
            "type": "string"
          },
          "target_name": {
            "type": "string"
          },
          "sender_user_uid": {
            "type": "string"
          },
          "sender_first_name": {
            "type": "string"
          },
          "sender_last_name": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": ["key", "value"]
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer",
            "example": 560
          },
          "height": {
            "type": "integer",
            "example": 320
          },
          "text": {
            "type": "string",
            "example": "Text"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "fontSize": {
            "$ref": "#/components/schemas/FontSize"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/NoteBackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "strokeIds": {
            "$ref": "#/components/schemas/StrokeIds"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "NoteBackgroundColor": {
        "type": "string",
        "enum": ["Beige", "Blue", "Gold", "Grey", "Red", "Teal", "Yellow"],
        "default": "Teal"
      },
      "NoteCreateRequest": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "text": {
            "type": "string",
            "example": "Text"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/NoteBackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "NoteCreateResponse": {
        "type": "object",
        "properties": {
          "note": {
            "$ref": "#/components/schemas/Note"
          }
        }
      },
      "NoteUpdateRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "text": {
            "type": "string",
            "example": "Text"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/NoteBackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "scale": {
            "$ref": "#/components/schemas/Scale"
          }
        }
      },
      "OauthRequest": {
        "description": "Oauth Request Object",
        "required": ["grant_type"],
        "properties": {
          "grant_type": {
            "type": "string",
            "default": "client_credentials",
            "enum": [
              "client_credentials",
              "refresh_token",
              "authorization_code"
            ],
            "description": "We supported grant_type `client_credentials`,`authorization_code`,`refresh_token` "
          },
          "code": {
            "type": "string",
            "description": "authorization code, It's require if grant_type is authorization_code"
          },
          "client_id": {
            "type": "string",
            "description": "It's optional if you provided in basic auth"
          },
          "client_secret": {
            "type": "string",
            "description": "It's optional if you provided in basic auth"
          },
          "redirect_uri": {
            "type": "string",
            "description": "It's optional for `client_credentials` "
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token. It's require if grant_type is refresh_token"
          }
        }
      },
      "OauthResponse": {
        "description": "Oauth Response Object",
        "required": ["access_token", "token_type"],
        "properties": {
          "access_token": {
            "type": "string",
            "description": " Access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh token"
          },
          "token_type": {
            "type": "string",
            "description": "Token type ex:Bearer"
          },
          "expires_at": {
            "type": "number",
            "description": "Token expire time in seconds"
          }
        }
      },
      "Order": {
        "type": "integer",
        "default": 0
      },
      "Organization": {
        "title": "Organization",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "account_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "plan": {
            "title": "Plan",
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "owner": {
            "title": "Owner",
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "locked_at": {
                "type": "string",
                "format": "date-time"
              },
              "account_uid": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            }
          },
          "is_guest_invite_requires_approval": {
            "type": "boolean",
            "default": false
          },
          "default_public_workspace_role_uid": {
            "type": "string"
          },
          "default_organization_user_role_uid": {
            "type": "string"
          },
          "is_custom_role_enabled": {
            "type": "boolean",
            "default": false
          },
          "saml_provider": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "metadata_url": {
                "type": "string"
              },
              "admin_email": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["okta", "onelogin", "pingfederate", "adfs", "f5"]
              }
            }
          },
          "is_cam_enabled": {
            "type": "boolean",
            "default": false
          },
          "denyOnNoCamData": {
            "type": "boolean",
            "default": true
          },
          "pending_hard_delete": {
            "type": "string",
            "format": "date-time",
            "default": null
          },
          "org_can_have_guests": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "OrganizationAppPermission": {
        "title": "OrganizationAppPermission",
        "type": "object",
        "properties": {
          "organization_uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "app_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        }
      },
      "OrganizationCamConfig": {
        "type": "object",
        "title": "OrganizationCamConfig",
        "properties": {
          "version": {
            "type": "number",
            "description": "Version number of cam config",
            "default": 1,
            "example": 1
          },
          "denyOnNoCamData": {
            "type": "boolean",
            "default": true
          },
          "cnLookup": {
            "type": "object",
            "properties": {
              "url": {
                "$ref": "#/components/schemas/OrganizationCamConfigUrl"
              }
            },
            "required": ["url"]
          },
          "pdp": {
            "type": "object",
            "properties": {
              "auth": {
                "$ref": "#/components/schemas/OrganizationCamConfigAuthObject"
              },
              "url": {
                "$ref": "#/components/schemas/OrganizationCamConfigUrl"
              },
              "requestParams": {
                "$ref": "#/components/schemas/OrganizationCamConfigRequestParams"
              }
            },
            "required": ["url", "auth"]
          },
          "cmt": {
            "type": "object",
            "properties": {
              "auth": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OrganizationCamConfigAuthObject"
                  }
                ],
                "description": "Not Implemented",
                "example": {}
              },
              "url": {
                "$ref": "#/components/schemas/OrganizationCamConfigUrl"
              },
              "method": {
                "type": "string",
                "enum": ["POST", "GET"],
                "description": "Not Implemented",
                "example": "<Not Implemented>"
              },
              "bannerXPath": {
                "type": "string"
              },
              "embedded": {
                "type": "boolean",
                "default": false
              }
            },
            "required": ["url"]
          },
          "cam": {
            "type": "object",
            "properties": {
              "accessDeniedMsg": {
                "type": "string",
                "description": "Message shown when PDP decision is \"deny\" for single resource endpoints",
                "example": "Access denied, please contact your admin"
              }
            }
          }
        },
        "required": ["cmt"]
      },
      "OrganizationCamConfigAuthObject": {
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/OrganizationCamConfigUrl"
          },
          "tokenRequestContentType": {
            "type": "string",
            "enum": ["json", "form"],
            "example": "json",
            "default": "json"
          }
        },
        "additionalProperties": {
          "type": "string",
          "example": {
            "client_id": "client-uuid",
            "client_secret": "client-secret-string",
            "grant_type": "client_credentials"
          }
        },
        "example": {
          "url": "http://example.com/auth",
          "tokenRequestContentType": "json",
          "client_id": "some-uuid",
          "client_secret": "secret-string",
          "grant_type": "client_credentials"
        }
      },
      "OrganizationCamConfigEnvironmentAttribute": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "includeInResult": {
            "type": "boolean"
          }
        },
        "required": ["name", "value"],
        "example": {
          "name": "some-attribute",
          "value": "some-value",
          "includeInResult": true
        }
      },
      "OrganizationCamConfigRequestParams": {
        "type": "object",
        "properties": {
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationCamConfigEnvironmentAttribute"
            }
          }
        }
      },
      "OrganizationCamConfigUrl": {
        "type": "string",
        "format": "uri",
        "example": "http://example.url"
      },
      "OrganizationRole": {
        "type": "object",
        "title": "OrganizationRole",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "is_default": {
            "type": "boolean"
          },
          "display_order": {
            "type": "integer"
          },
          "organization_uid": {
            "type": "string"
          },
          "is_custom": {
            "type": "boolean"
          },
          "can_add_user": {
            "type": "boolean"
          },
          "can_remove_user": {
            "type": "boolean"
          },
          "can_edit_user_info": {
            "type": "boolean"
          },
          "can_list_organization_users": {
            "type": "boolean"
          },
          "can_add_admin": {
            "type": "boolean"
          },
          "can_remove_admin": {
            "type": "boolean"
          },
          "can_edit_admin_info": {
            "type": "boolean"
          },
          "can_add_guest": {
            "type": "boolean"
          },
          "can_remove_guest": {
            "type": "boolean"
          },
          "can_edit_guest_info": {
            "type": "boolean"
          },
          "can_create_workspace": {
            "type": "boolean"
          },
          "can_view_public_workspace": {
            "type": "boolean"
          },
          "can_approve_guest_invite": {
            "type": "boolean"
          },
          "can_change_organization_settings": {
            "type": "boolean"
          },
          "can_add_organization_role": {
            "type": "boolean"
          },
          "can_edit_organization_role": {
            "type": "boolean"
          },
          "can_delete_organization_role": {
            "type": "boolean"
          },
          "can_add_workspace_role": {
            "type": "boolean"
          },
          "can_edit_workspace_role": {
            "type": "boolean"
          },
          "can_delete_workspace_role": {
            "type": "boolean"
          },
          "can_change_admin_role": {
            "type": "boolean"
          },
          "can_change_user_role": {
            "type": "boolean"
          },
          "can_change_guest_role": {
            "type": "boolean"
          },
          "can_upgrade_guest_to_user": {
            "type": "boolean"
          },
          "can_downgrade_user_to_guest": {
            "type": "boolean"
          },
          "can_upgrade_user_to_admin": {
            "type": "boolean"
          },
          "can_downgrade_admin_to_user": {
            "type": "boolean"
          },
          "can_list_organization_roles": {
            "type": "boolean"
          },
          "can_list_workspace_roles": {
            "type": "boolean"
          },
          "can_upgrade_guest_to_admin": {
            "type": "boolean"
          },
          "can_downgrade_admin_to_guest": {
            "type": "boolean"
          }
        },
        "required": ["uid", "name"]
      },
      "Organizations": {
        "title": "OrganizationList",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "account_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "plan": {
            "title": "Plan",
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "owner": {
            "title": "Owner",
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "locked_at": {
                "type": "string",
                "format": "date-time"
              },
              "account_uid": {
                "type": "string"
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "is_guest_invite_requires_approval": {
            "type": "boolean",
            "default": false
          },
          "default_public_workspace_role_uid": {
            "type": "string"
          },
          "default_organization_user_role_uid": {
            "type": "string"
          },
          "is_custom_role_enabled": {
            "type": "boolean",
            "default": false
          },
          "saml_provider": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "metadata_url": {
                "type": "string"
              },
              "admin_email": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": ["okta", "onelogin", "pingfederate", "adfs", "f5"]
              }
            }
          },
          "is_cam_enabled": {
            "type": "boolean",
            "default": false
          },
          "denyOnNoCamData": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "OrganizationUser": {
        "title": "OrganizationUser",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "avatar_url": {
            "type": "string"
          },
          "inviter_uid": {
            "type": "string"
          },
          "invited_state": {
            "type": "string",
            "enum": [
              "PENDING_INVITE",
              "INVITED_USER",
              "INVITED_GUEST",
              "ACCEPTED"
            ]
          },
          "organization_role": {
            "$ref": "#/components/schemas/OrganizationRole"
          }
        }
      },
      "OrganizationWorkspacesOrganization": {
        "title": "Organization",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "account_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_guest_invite_requires_approval": {
            "type": "boolean",
            "default": false
          },
          "default_public_workspace_role_uid": {
            "type": "string"
          },
          "default_organization_user_role_uid": {
            "type": "string"
          },
          "is_custom_role_enabled": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "Paging": {
        "type": "object",
        "properties": {
          "prev": {
            "type": "string"
          },
          "self": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        }
      },
      "PenColor": {
        "type": "string",
        "enum": ["White", "Gray", "Yellow", "Red", "Green", "Purple", "Cyan"],
        "default": "White"
      },
      "Permission": {
        "title": "Permission",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "PermissionGroup": {
        "title": "PermissionGroup",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "resource_type": {
            "type": "string",
            "enum": ["organization", "workspace"]
          },
          "is_visible": {
            "type": "boolean",
            "default": true
          },
          "permission_uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dependency_permission_group_uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["name", "description", "resource_type", "is_visible"]
      },
      "PermissionGroupWithoutResourceType": {
        "title": "PermissionGroupWithoutResourceType",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "minLength": 1
          },
          "permission_uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dependency_permission_group_uids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["name", "description"]
      },
      "PermissionGroupWithUid": {
        "title": "PermissionGroupWithUid",
        "type": "object",
        "allOf": [
          {
            "required": ["uid"],
            "properties": {
              "uid": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PermissionGroup"
          }
        ]
      },
      "Pin": {
        "type": "boolean",
        "default": false
      },
      "Plan": {
        "title": "Plan",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "workspace_limit": {
            "type": "integer"
          },
          "collaborator_limit": {
            "type": "integer"
          },
          "storage_limit": {
            "type": "integer"
          },
          "monthly_cost": {
            "type": "number"
          },
          "yearly_cost": {
            "type": "number"
          }
        }
      },
      "PlanCreateReq": {
        "title": "PlanCreateReq",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "workspace_limit": {
            "type": "integer"
          },
          "collaborator_limit": {
            "type": "integer"
          },
          "storage_limit": {
            "type": "integer"
          },
          "monthly_cost": {
            "type": "number"
          },
          "yearly_cost": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "category",
          "workspace_limit",
          "collaborator_limit",
          "storage_limit",
          "monthly_cost",
          "yearly_cost"
        ]
      },
      "PlanUpdateReq": {
        "title": "PlanUpdateReq",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "workspace_limit": {
            "type": "integer"
          },
          "collaborator_limit": {
            "type": "integer"
          },
          "storage_limit": {
            "type": "integer"
          },
          "monthly_cost": {
            "type": "number"
          },
          "yearly_cost": {
            "type": "number"
          }
        }
      },
      "PortalApi-SuccessRes": {
        "title": "PortalApi-SuccessRes",
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "PostTemplateReq": {
        "title": "PostTemplateReq",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "organization_uid": {
            "type": "string"
          },
          "master_id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "category": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "metadata": {
            "type": "object"
          },
          "parameters": {
            "type": "object"
          },
          "icon": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateCollaborator"
            }
          }
        },
        "required": ["organization_id", "type", "name", "description"]
      },
      "PutTemplateReq": {
        "title": "PutTemplateReq",
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/TemplateType"
          },
          "master_id": {
            "type": "string",
            "minLength": 0,
            "maxLength": 128
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "category": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "metadata": {
            "type": "object"
          },
          "parameters": {
            "type": "object"
          },
          "icon": {
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "elements": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "collaborators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateCollaborator"
            }
          }
        }
      },
      "ResetRequest": {
        "description": "Reset Request object",
        "required": ["password"],
        "properties": {
          "password": {
            "type": "string",
            "description": "password"
          }
        }
      },
      "RGBColor": {
        "type": "string",
        "default": "#ffffff"
      },
      "RoleUserWorkspace": {
        "type": "object",
        "title": "RoleUserWorkspace",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_uid": {
            "type": "string"
          },
          "cam_data": {
            "type": "string"
          },
          "default_role_id": {
            "type": "integer"
          },
          "public": {
            "type": "boolean"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_url": {
            "type": "string"
          },
          "publish_state": {
            "type": "string"
          },
          "publish_state_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SamlProvider": {
        "title": "SamlProvider",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "admin_email": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["okta", "onelogin", "pingfederate", "adfs", "f5"]
          },
          "idp_domain": {
            "type": "string"
          },
          "saml_attribute_user_guid_key": {
            "type": "string",
            "nullable": true
          },
          "organizations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "primary_org_uid": {
            "type": "string"
          }
        },
        "required": ["name", "type", "metadata_url"]
      },
      "SamlProviders": {
        "title": "SamlProviders",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/SamlProviderWithId"
        }
      },
      "SamlProviderWithId": {
        "title": "SamlProviderWithId",
        "type": "object",
        "allOf": [
          {
            "required": ["id"],
            "properties": {
              "id": {
                "type": "integer"
              },
              "uid": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SamlProvider"
          },
          {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "Scale": {
        "type": "number",
        "default": 1,
        "minimum": 0.5,
        "maximum": 1000
      },
      "ScratchWorkspace": {
        "type": "object",
        "title": "ScratchWorkspace",
        "properties": {
          "uid": {
            "type": "string"
          },
          "workspace_uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "wall_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["uid", "workspace_uid", "wall_uid"]
      },
      "SearchRequest": {
        "type": "object",
        "required": ["query"],
        "properties": {
          "query": {
            "type": "string",
            "example": "Text"
          },
          "filterTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "note",
                "text",
                "comment",
                "image",
                "pdf",
                "word",
                "powerpoint",
                "excel",
                "video",
                "url",
                "canvas",
                "marker"
              ]
            }
          },
          "orderBy": {
            "type": "string",
            "enum": ["score", "modifiedTime"]
          },
          "orderDirection": {
            "type": "string",
            "enum": ["asc", "desc"]
          }
        }
      },
      "SearchRes": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "updatedAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "targetId": {
                  "type": "string"
                },
                "targetType": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": ["results"]
      },
      "SessionUserRes": {
        "type": "object",
        "title": "SessionUserRes",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserApplication"
          }
        }
      },
      "SessionUserWorkspace": {
        "type": "object",
        "title": "SessionUserWorkspace",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_uid": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "has_meeting": {
            "type": "boolean"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_url": {
            "type": "string"
          },
          "publish_state": {
            "type": "string"
          },
          "publish_state_at": {
            "type": "string",
            "format": "date-time"
          },
          "classification": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "accessed_at": {
            "type": "string",
            "format": "date-time"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/WorkspaceRole"
          },
          "workspace_owner": {
            "$ref": "#/components/schemas/WorkspaceOwner"
          },
          "users_count": {
            "type": "integer"
          },
          "active_users_count": {
            "type": "integer"
          },
          "favorite": {
            "type": "boolean"
          }
        }
      },
      "Stroke": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          },
          "penColor": {
            "$ref": "#/components/schemas/PenColor"
          },
          "size": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "brushType": {
            "$ref": "#/components/schemas/BrushType"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "targetId": {
            "type": "string"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "StrokeCreateRequest": {
        "type": "object",
        "required": ["points"],
        "properties": {
          "penColor": {
            "$ref": "#/components/schemas/PenColor"
          },
          "brushSize": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "brushType": {
            "$ref": "#/components/schemas/BrushType"
          },
          "points": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "StrokeCreateResponse": {
        "type": "object",
        "properties": {
          "stroke": {
            "$ref": "#/components/schemas/Stroke"
          }
        }
      },
      "StrokeIds": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "SuccessRes": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "title": "SuccessRes"
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Surface": {
        "type": "string",
        "default": null
      },
      "TemplateCollaborator": {
        "title": "TemplateCollaborator",
        "type": "object",
        "properties": {
          "user_uid": {
            "type": "string"
          },
          "template_role_uid": {
            "type": "string"
          }
        }
      },
      "TemplateType": {
        "type": "string",
        "enum": ["ORGANIZATION", "USER"]
      },
      "Text": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3000
          },
          "fontFamily": {
            "$ref": "#/components/schemas/FontFamily"
          },
          "fontSize": {
            "$ref": "#/components/schemas/FontSize"
          },
          "fontColor": {
            "$ref": "#/components/schemas/RGBColor"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "fontStyle": {
            "$ref": "#/components/schemas/FontStyle"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/BackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "surface": {
            "$ref": "#/components/schemas/Surface"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "TextCreateRequest": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3000
          },
          "fontFamily": {
            "$ref": "#/components/schemas/FontFamily"
          },
          "fontSize": {
            "$ref": "#/components/schemas/FontSize"
          },
          "fontColor": {
            "$ref": "#/components/schemas/RGBColor"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "fontStyle": {
            "$ref": "#/components/schemas/FontStyle"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/BackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          },
          "traits": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
              "additionalProperties": true
            },
            "example": [
              {
                "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
              }
            ]
          }
        }
      },
      "TextCreateResponse": {
        "type": "object",
        "properties": {
          "text": {
            "$ref": "#/components/schemas/Text"
          }
        }
      },
      "TextTransform": {
        "type": "string",
        "enum": ["inherit", "uppercase"],
        "default": "inherit"
      },
      "TextUpdateRequest": {
        "type": "object",
        "properties": {
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 3000
          },
          "fontFamily": {
            "$ref": "#/components/schemas/FontFamily"
          },
          "fontSize": {
            "$ref": "#/components/schemas/FontSize"
          },
          "fontColor": {
            "$ref": "#/components/schemas/RGBColor"
          },
          "fontWeight": {
            "$ref": "#/components/schemas/FontWeight"
          },
          "fontStyle": {
            "$ref": "#/components/schemas/FontStyle"
          },
          "textTransform": {
            "$ref": "#/components/schemas/TextTransform"
          },
          "backgroundColor": {
            "$ref": "#/components/schemas/BackgroundColor"
          },
          "pin": {
            "$ref": "#/components/schemas/Pin"
          }
        }
      },
      "Traits": {
        "type": "array",
        "items": {
          "type": "object",
          "description": "JSON-LD-conforming JSON document containing arbitrary persistent metadata",
          "additionalProperties": true
        },
        "example": [
          {
            "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
          }
        ]
      },
      "UpdateSamlProviderById": {
        "title": "UpdateSamlProviderById",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "metadata_url": {
            "type": "string"
          },
          "admin_email": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["okta", "onelogin", "pingfederate", "adfs", "f5"]
          },
          "idp_domain": {
            "type": "string"
          },
          "primary_org_uid": {
            "type": "string"
          },
          "saml_attribute_user_guid_key": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateUserEmailRequestDomainUpdate": {
        "title": "UpdateUserEmailRequestDomainUpdate",
        "type": "object",
        "properties": {
          "domainUpdate": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "oldDomain": {
                  "type": "string",
                  "example": "oldDomain.com"
                },
                "newDomain": {
                  "type": "string",
                  "example": "newDomain.com"
                }
              }
            }
          }
        }
      },
      "UpdateUserEmailRequestEmailUpdate": {
        "title": "UpdateUserEmailRequestEmailUpdate",
        "type": "object",
        "properties": {
          "emailUpdate": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "oldEmail": {
                  "type": "string",
                  "example": "user1@example.com"
                },
                "newEmail": {
                  "type": "string",
                  "example": "user_1@example.com"
                }
              }
            }
          }
        }
      },
      "UpdateUserEmailRequestUserSSOUidUpdate": {
        "title": "UpdateUserEmailRequestUserSSOUidUpdate",
        "type": "object",
        "properties": {
          "userSSOUidUpdate": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "user1@example.com"
                },
                "samlProviderId": {
                  "type": "number",
                  "example": 10
                },
                "userGuidFromIdP": {
                  "type": "string",
                  "example": "1a2b3c4d"
                },
                "clear": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "avatar_url": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "invitation_sent_at": {
            "type": "string",
            "format": "date-time"
          },
          "invitation_accepted_at": {
            "type": "string",
            "format": "date-time"
          },
          "invitation_created_at": {
            "type": "string",
            "format": "date-time"
          },
          "invited_state": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["uid", "email"]
      },
      "UserApplication": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "application_role": {
            "$ref": "#/components/schemas/ApplicationRole"
          },
          "user_preference": {
            "type": "object",
            "properties": {
              "notify_on_new_message": {
                "type": "boolean"
              }
            }
          }
        },
        "required": ["uid", "email"]
      },
      "UserApplicationOrganization": {
        "title": "UserApplicationOrganization",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "archived": {
            "type": "boolean"
          },
          "invited_state": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "application_role": {
            "$ref": "#/components/schemas/ApplicationRole"
          },
          "last_login_at": {
            "type": "string",
            "format": "date-time"
          },
          "organizations": {
            "type": "array",
            "items": {
              "title": "Organization",
              "type": "object",
              "properties": {
                "uid": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "user_preference": {
            "type": "object",
            "properties": {
              "notify_on_new_message": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "UserInfoResponse": {
        "description": "UserInfo Response Object",
        "required": ["sub", "email"],
        "properties": {
          "sub": {
            "type": "string",
            "description": "user_id"
          },
          "name": {
            "type": "string",
            "description": "user name"
          },
          "given_name": {
            "type": "string",
            "description": "Given name"
          },
          "family_name": {
            "type": "string",
            "description": "Family or last name"
          },
          "email": {
            "type": "string",
            "description": "Email"
          },
          "picture": {
            "type": "string",
            "description": "profile image"
          },
          "phone_number": {
            "type": "string",
            "description": "user phone number"
          },
          "updated_at": {
            "type": "string",
            "description": "user records updated date"
          }
        }
      },
      "UserOrganization": {
        "type": "object",
        "title": "UserOrganization",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "account_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          },
          "is_guest_invite_requires_approval": {
            "type": "boolean",
            "default": false
          },
          "is_cam_enabled": {
            "type": "boolean",
            "default": false
          },
          "is_custom_role_enabled": {
            "type": "boolean",
            "default": false
          },
          "denyOnNoCamData": {
            "type": "boolean",
            "default": true
          },
          "organization_role": {
            "$ref": "#/components/schemas/OrganizationRole"
          },
          "plan": {
            "title": "Plan",
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserRoleChange": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "user_uid": {
            "type": "string"
          },
          "resource_uid": {
            "type": "string"
          },
          "resource_type": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "updated_user_uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserWorkspace": {
        "type": "object",
        "title": "UserWorkspace",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_uid": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "has_meeting": {
            "type": "boolean"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_url": {
            "type": "string"
          },
          "publish_state": {
            "type": "string"
          },
          "publish_state_at": {
            "type": "string",
            "format": "date-time"
          },
          "classification": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "workspace_role": {
            "$ref": "#/components/schemas/WorkspaceRole"
          },
          "workspace_owner": {
            "$ref": "#/components/schemas/WorkspaceOwner"
          },
          "users_count": {
            "type": "integer"
          },
          "active_users_count": {
            "type": "integer"
          },
          "favorite": {
            "type": "boolean"
          }
        }
      },
      "VerifyChallengeRequest": {
        "description": "Challenge Request object",
        "required": ["wall_uid", "answer"],
        "properties": {
          "wall_uid": {
            "type": "string",
            "description": "Wall UID"
          },
          "answer": {
            "type": "string",
            "description": "The decrypted challenge"
          }
        }
      },
      "VerifyChallengeResponse": {
        "description": "Verify Challenge Response object",
        "required": ["access_token"],
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          }
        }
      },
      "Video": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "507f191e810c19729de860ea"
          },
          "workspace_id": {
            "type": "string"
          },
          "x": {
            "$ref": "#/components/schemas/X"
          },
          "y": {
            "$ref": "#/components/schemas/Y"
          },
          "width": {
            "type": "integer"
          },
          "height": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "example": "Text"
          },
          "order": {
            "$ref": "#/components/schemas/Order"
          },
          "adhesions": {
            "$ref": "#/components/schemas/Adhesions"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
      },
      "WallBase": {
        "title": "Wall",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "my wall"
          },
          "public_key": {
            "type": "string",
            "example": "-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqGKukO1De7zhZj6+H0qtjTkVxwTCpvKe4eCZ0FPqri0cb2JZfXJ/DgYSF6vUpwmJG8wVQZKjeGcjDOL5UlsuusFncCzWBQ7RKNUSesmQRMSGkVb1/3j+skZ6UtW+5u09lHNsj6tQ51s1SPrCBkedbNf0Tp0GbMJDyR4e9T04ZZwIDAQAB-----END PUBLIC KEY-----"
          },
          "asset_id": {
            "type": "string",
            "example": 1234
          },
          "location": {
            "type": "string"
          },
          "organization": {
            "type": "string",
            "example": "my org"
          },
          "metadata": {
            "type": "array",
            "description": "array of metadata",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "example": [
              {
                "key": "key1",
                "value": "val1"
              }
            ]
          }
        }
      },
      "WallByUserMeGet": {
        "title": "WallByUserMeGet",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "06AEUFOgV5x439WTL5lf"
          },
          "name": {
            "type": "string",
            "example": "sampleWall"
          },
          "senderUid": {
            "type": "string",
            "example": "qIN-MJbWD1fGByxm-qw4"
          },
          "workspaceUid": {
            "type": "string",
            "example": "wbGjnfpeWvat9kW5E7G1"
          }
        }
      },
      "WallByWorkspaceIdGet": {
        "title": "WallByWorkspaceIdGet",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "06AEUFOgV5x439WTL5lf"
          },
          "name": {
            "type": "string",
            "example": "sampleWall"
          },
          "senderUid": {
            "type": "string",
            "example": "qIN-MJbWD1fGByxm-qw4"
          },
          "location": {
            "type": "string"
          },
          "asset_id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        }
      },
      "WallGet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WallResponse"
          },
          {
            "type": "object",
            "properties": {
              "owner_org": {
                "type": "object",
                "properties": {
                  "uid": {
                    "type": "string",
                    "example": "ABCDE1234567890abcd1"
                  },
                  "name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      }
                    }
                  },
                  "archived": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        ]
      },
      "WallInOrganizationGet": {
        "title": "WallInOrganizationGet",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "example": "06AEUFOgV5x439WTL5lf"
          },
          "name": {
            "type": "string",
            "example": "sampleWall"
          },
          "location": {
            "type": "string",
            "example": "Sample Wall Location"
          },
          "asset_id": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          }
        }
      },
      "WallPost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WallResponse"
          },
          {
            "type": "object",
            "properties": {
              "org_uid": {
                "type": "string",
                "example": "ABCDE1234567890abcd1"
              }
            }
          }
        ]
      },
      "WallRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WallBase"
          },
          {
            "type": "object",
            "properties": {
              "org_uid": {
                "type": "string",
                "example": "ABCDE1234567890abcd1"
              }
            }
          }
        ]
      },
      "WallRequestPOST": {
        "allOf": [
          {
            "$ref": "#/components/schemas/WallRequest"
          },
          {
            "type": "object",
            "required": ["name", "organization", "public_key", "asset_id"]
          }
        ]
      },
      "WallResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "$ref": "#/components/schemas/WallBase"
          }
        ]
      },
      "WallSession": {
        "title": "WallSession",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          },
          "default_workspace": {
            "type": "string"
          },
          "authorized_workspace": {
            "type": "string"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            }
          }
        },
        "required": ["id", "name", "uid", "metadata"]
      },
      "Whiteboard": {
        "title": "Whiteboard",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "uid": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "workspace": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "uid": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        }
      },
      "Workspace": {
        "type": "object",
        "title": "Workspace",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "organization_uid": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "has_meeting": {
            "type": "boolean"
          },
          "default_role_uid": {
            "type": "string"
          },
          "published_at": {
            "type": "string",
            "format": "date-time"
          },
          "published_url": {
            "type": "string"
          },
          "publish_state": {
            "type": "string"
          },
          "publish_state_at": {
            "type": "string",
            "format": "date-time"
          },
          "classification": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WorkspaceOrganizationWorkspace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Workspace"
          },
          {
            "type": "object",
            "required": ["organization"],
            "properties": {
              "organization": {
                "$ref": "#/components/schemas/OrganizationWorkspacesOrganization"
              }
            }
          },
          {
            "type": "object",
            "required": ["workspace_owner"],
            "properties": {
              "workspace_owner": {
                "properties": {
                  "uid": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "WorkspaceOwner": {
        "title": "WorkspaceOwner",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "industry": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "locked_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "WorkspaceRole": {
        "title": "WorkspaceRole",
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "is_default": {
            "type": "boolean"
          },
          "display_order": {
            "type": "integer"
          },
          "organization_uid": {
            "type": "string"
          },
          "is_custom": {
            "type": "boolean"
          },
          "is_saml": {
            "type": "boolean"
          },
          "can_edit_workspace_settings": {
            "type": "boolean"
          },
          "can_edit_workspace_content": {
            "type": "boolean"
          },
          "can_duplicate_workspace": {
            "type": "boolean"
          },
          "can_delete_workspace": {
            "type": "boolean"
          },
          "can_add_user": {
            "type": "boolean"
          },
          "can_remove_user": {
            "type": "boolean"
          },
          "can_add_guest": {
            "type": "boolean"
          },
          "can_remove_guest": {
            "type": "boolean"
          },
          "can_send_to_wall": {
            "type": "boolean"
          },
          "can_change_publish_state": {
            "type": "boolean"
          },
          "can_change_public_state": {
            "type": "boolean"
          },
          "can_download_assets": {
            "type": "boolean"
          },
          "can_change_user_role": {
            "type": "boolean"
          },
          "can_change_owner": {
            "type": "boolean"
          },
          "can_change_organization": {
            "type": "boolean"
          },
          "can_list_collaborators": {
            "type": "boolean"
          },
          "can_send_message": {
            "type": "boolean"
          },
          "can_view_workspace_settings": {
            "type": "boolean"
          },
          "can_comment": {
            "type": "boolean"
          },
          "can_at_mention": {
            "type": "boolean"
          },
          "can_view_workspace_content": {
            "type": "boolean"
          },
          "can_export_workspace": {
            "type": "boolean"
          },
          "can_import_workspace": {
            "type": "boolean"
          }
        },
        "required": ["uid", "name"]
      },
      "X": {
        "type": "integer",
        "default": 0
      },
      "Y": {
        "type": "integer",
        "default": 0
      }
    }
  },
  "paths": {
    "/api/v2/activate/{activation_token}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/activation_token"
        }
      ]
    },
    "/api/v2/authenticate/{saml_provider_name}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/saml_provider_name"
        }
      ]
    },
    "/api/v2/logout/{saml_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/saml_id"
        }
      ]
    },
    "/api/v2/reset/{token}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/token"
        }
      ]
    },
    "/apps/{app_id}": {
      "parameters": [
        {
          "name": "app_id",
          "in": "path",
          "description": "Application id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/broadcast_messages/{message_uid}": {
      "parameters": [
        {
          "name": "message_uid",
          "in": "path",
          "description": "Message uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/help_menus/{help_menu_uid}": {
      "parameters": [
        {
          "name": "help_menu_uid",
          "in": "path",
          "description": "Help menu uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/import_export/workspaces/{workspace_uid}": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/listeners": {
      "get": {
        "tags": ["Listeners"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "getAllListeners",
        "summary": "Get all listeners",
        "description": "Get all listeners for the user. You can filter listeners using workspace_uid or organization_uid.",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "query",
            "description": "workspace UID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_id",
            "in": "query",
            "description": "organization UID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 25
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all listeners for the user. You can filter listeners using workspace_uid or organization_uid."
          }
        }
      },
      "post": {
        "tags": ["Listeners"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addListenerToWorkspace",
        "summary": "Listener Create",
        "description": "Add a Listener to a workspace. The list of possible values for the <span class='pre'>eventTypes</span> can be found <a href='/reference/listener-events'>here</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListenerCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Listener"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Create a Listener",
            "description": "Add a Listener to a workspace. The list of possible values for the <span class='pre'>eventTypes</span> can be found <a href='/reference/listener-events'>here</a>."
          }
        }
      }
    },
    "/listeners/{listener_id}": {
      "get": {
        "tags": ["Listeners"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "getAListener",
        "summary": "Get a Listener",
        "description": "Get the Listener details by its ID.",
        "parameters": [
          {
            "name": "listener_id",
            "in": "path",
            "description": "The ID of the listener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Get Listener Details by ID",
            "description": "Get the Listener details by its ID."
          }
        }
      },
      "put": {
        "tags": ["Listeners"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "updateListener",
        "summary": "Update a listener in workspace",
        "description": "Update the specified Listener in the workspace. The list of possible values for the <span class='pre'>eventTypes</span> can be found <a href='/reference/listener-events'>here</a>.",
        "parameters": [
          {
            "name": "listener_id",
            "in": "path",
            "description": "The Unique ID of the listener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListenerUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Listener Update",
            "description": "Update the specified Listener in the workspace. The list of possible values for the <span class='pre'>eventTypes</span> can be found <a href='/reference/listener-events'>here</a>."
          }
        }
      },
      "delete": {
        "tags": ["Listeners"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "deleteListener",
        "summary": "Listener Delete",
        "description": "Delete the specified Listener from the workspace.",
        "parameters": [
          {
            "name": "listener_id",
            "in": "path",
            "description": "The Unique ID of the listener",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerApi-Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Listener Delete",
            "description": "Delete the specified Listener from the workspace."
          }
        }
      }
    },
    "/messages/{message_uid}": {
      "parameters": [
        {
          "name": "message_uid",
          "in": "path",
          "description": "Message uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/messages/{message_uid}/move_to_inbox": {
      "parameters": [
        {
          "name": "message_uid",
          "in": "path",
          "description": "Message uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": [],
            "identityAccessToken": []
          }
        ],
        "summary": "Get an Organization",
        "description": "Get an organization by organization uid. If the user is NOT in the organization, require <b>Manage Application Organizations</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetOrganizationByUid",
                  "type": "object",
                  "properties": {
                    "organization": {
                      "$ref": "#/components/schemas/Organization"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get an organization by organization uid. If the user is NOT in the organization, require <b>Manage Application Organizations</b> permission group."
          }
        }
      }
    },
    "/organizations/{organization_uid}/apps": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/apps/{app_id}": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "app_id",
          "in": "path",
          "description": "application id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/cam/config": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/cam/enable": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/domain_filters": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/lock": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/organization_roles": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get Organization Roles of an Organization",
        "description": "Get organization roles within an organization. Require <b>List Roles</b> permission group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetOrganizationRoleRes",
                  "properties": {
                    "organization_roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationRole"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "organization_roles",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get organization roles within an organization. Require <b>List Roles</b> permission group."
          }
        }
      }
    },
    "/organizations/{organization_uid}/users": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get all Users in an Organization",
        "description": "Get all the users in an organization. Require <b>Manage Application Users</b> and <b>Manage Application Organizations</b> permission groups OR only <b>View Organization User List</b> permission group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/filter_by"
          },
          {
            "name": "role",
            "in": "query",
            "description": "Support multiple organization role uids separated with commas",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetOrganizationUsersRes",
                  "type": "object",
                  "properties": {
                    "organization_users": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationUser"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "organization_users",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all the users in an organization. Require <b>Manage Application Users</b> and <b>Manage Application Organizations</b> permission groups OR only <b>View Organization User List</b> permission group."
          }
        }
      },
      "post": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Add a User to an Organization",
        "description": "Add a user to an organization. Require <b>Manage Organization users</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "AddUserOrganizationReq",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "organization_role_uid": {
                    "type": "string"
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Add a user to an organization. Require <b>Manage Organization users</b> permission group."
          }
        }
      }
    },
    "/organizations/{organization_uid}/users/{user_uid}": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Update a User in an Organization",
        "description": "Update user in an organization. Based on the target user's type, require <b>Manage Organization Users</b>, or <b?Manage Admins</b>, or <Manage Guests> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "UpdateUserOrganizationReq",
                "properties": {
                  "organization_role_uid": {
                    "type": "string"
                  }
                },
                "required": ["organization_role_uid"]
              }
            }
          },
          "required": true
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Update user in an organization. Based on the target user's type, require <b>Manage Organization Users</b>, or <b?Manage Admins</b>, or <Manage Guests> permission group."
          }
        }
      },
      "delete": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Remove a User from an Organization",
        "description": "Remove a user from an organization. Based on the target user type, require <b>Manage Organization Users</b>, or <b>*Manage Guests</b>, or <b>Manage Admins</b> permission group.",
        "parameters": [
          {
            "name": "new_workspace_owner_uid",
            "in": "query",
            "description": "UID of a user in the Org, to whom the deleted user's workspaces need to be assigned",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Remove a user from an organization. Based on the target user type, require <b>Manage Organization Users</b>, or <b>*Manage Guests</b>, or <b>Manage Admins</b> permission group."
          }
        }
      }
    },
    "/organizations/{organization_uid}/users/{user_uid}/approve_invite": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/users/{user_uid}/invitation_link": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/users/bulk_upload": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/organizations/{organization_uid}/walls": {
      "get": {
        "tags": ["Walls"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get all walls owned by the organization",
        "description": "Authenticated User must have <b>Can List Organization Walls</b> permission group to get all 'Walls' in an organization.<br /> <br />The query parameter 'order_by' supports fields 'name', 'location'. You can define multiple 'order_by' and 'order_direction' values. Example '[ASC, DESC]'. The filter parameter 'filter_by' supports fields 'name', 'location'. Only one filter parameter may be provided at a time, any extras will be ignored. Example 'filter_by=name:testwall'. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>.",
        "parameters": [
          {
            "name": "organization_uid",
            "in": "path",
            "description": "Organization uid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/filter_by"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetWallInOrganizationRes",
                  "properties": {
                    "walls": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WallInOrganizationGet"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "walls",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Get All Walls Owned by an Organization",
            "description": "Authenticated User must have <b>Can List Organization Walls</b> permission group to get all 'Walls' in an organization.<br /> <br />The query parameter 'order_by' supports fields 'name', 'location'. You can define multiple 'order_by' and 'order_direction' values. Example '[ASC, DESC]'. The filter parameter 'filter_by' supports fields 'name', 'location'. Only one filter parameter may be provided at a time, any extras will be ignored. Example 'filter_by=name:testwall'. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>."
          }
        }
      }
    },
    "/organizations/{organization_uid}/workspace_roles": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Organizations"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get Workspace Roles in an Organization",
        "description": "Get workspace roles within an organization. Require <b>List Roles</b> permission group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetWorkspaceRoleRes",
                  "properties": {
                    "workspace_roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WorkspaceRole"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "workspace_roles",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get workspace roles within an organization. Require <b>List Roles</b> permission group."
          }
        }
      }
    },
    "/organizations/{organization_uid}/workspaces": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Create a new Workspace in an Organization",
        "description": "Create a new workspace in an organization. Require <b>Create Workspace</b> permission group.",
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "AddWorkspaceRes",
                  "properties": {
                    "workspace": {
                      "type": "object",
                      "title": "Workspace",
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "publish_state": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "organization_uid": {
                          "type": "string"
                        },
                        "public": {
                          "type": "boolean"
                        },
                        "permanent_delete_pending": {
                          "type": "boolean",
                          "default": false
                        },
                        "has_meeting": {
                          "type": "boolean"
                        },
                        "default_role_uid": {
                          "type": "string"
                        },
                        "users": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "title": "User",
                            "properties": {
                              "user_uid": {
                                "type": "string"
                              },
                              "workspace_uid": {
                                "type": "string"
                              },
                              "workspace_role_uid": {
                                "type": "string"
                              },
                              "created_at": {
                                "type": "string",
                                "format": "date-time"
                              },
                              "updated_at": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "AddWorkspaceReq",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "public": {
                    "type": "boolean",
                    "default": false
                  },
                  "has_meeting": {
                    "type": "boolean",
                    "default": false
                  },
                  "default_role_uid": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "User_1",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "workspace_role_uid": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": ["name"]
              }
            }
          },
          "required": true
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create a new workspace in an organization. Require <b>Create Workspace</b> permission group.",
            "summary": "Create a Workspace."
          }
        }
      }
    },
    "/permission_groups/{uid}": {
      "parameters": [
        {
          "name": "uid",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/plans/{plan_uid}": {
      "parameters": [
        {
          "name": "plan_uid",
          "in": "path",
          "description": "Plan uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/roles": {
      "get": {
        "tags": ["Role"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get all Roles",
        "description": "Get all the roles in the application. Based on the desired result, require <b>List Application Roles</b> or <b>List Roles</b> permission group.",
        "parameters": [
          {
            "name": "resource_type",
            "in": "query",
            "description": "resource_type => application, organization, workspace, template",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "type => owner, admin, user, guest",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organization_uid",
            "in": "query",
            "description": "Organization uid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_custom",
            "in": "query",
            "description": "is_custom",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "Order by fields",
            "schema": {
              "type": "string",
              "default": "resource_type,display_order"
            }
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Roles",
                  "properties": {
                    "roles": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/GetAllRoles"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all the roles in the application. Based on the desired result, require <b>List Application Roles</b> or <b>List Roles</b> permission group."
          }
        }
      }
    },
    "/roles/{role_uid}": {
      "parameters": [
        {
          "name": "role_uid",
          "in": "path",
          "description": "Role uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/saml_providers_by_name/{saml_provider_name}": {
      "parameters": [
        {
          "name": "saml_provider_name",
          "in": "path",
          "description": "SAML provider name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/saml_providers_by_org_name/{org_name}": {
      "parameters": [
        {
          "name": "org_name",
          "in": "path",
          "description": "Org name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/saml_providers/{saml_provider_id}": {
      "parameters": [
        {
          "name": "saml_provider_id",
          "in": "path",
          "description": "SAML provider id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/scratch_workspaces/{scratch_workspace_uid}": {
      "parameters": [
        {
          "name": "scratch_workspace_uid",
          "in": "path",
          "description": "Scratch workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/{wall_uid}/last_sent_user": {
      "parameters": [
        {
          "name": "wall_uid",
          "in": "path",
          "description": "Wall uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/{workspace_uid}/wall_authorize": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/{workspace_uid}/workspace_update": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/session/{workspace_uid}/notify_delete": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/session/{workspace_uid}/notify_publish_complete": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/session/{workspace_uid}/notify_unpublish_complete": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/work_sessions/{sessionId}/notify_user_subscription": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/work_sessions/{workspace_uid}/notify_copy_complete": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/services/workspaces/{workspace_uid}/whiteboards": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace UID",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/session/user": {
      "get": {
        "tags": ["Session"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get Session User",
        "description": "Get the current session user",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUserRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get the current session user"
          }
        }
      }
    },
    "/templates/{template_uid}": {
      "parameters": [
        {
          "name": "template_uid",
          "in": "path",
          "description": "Template uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get all Users",
        "description": "Get all users in the application. Require <b>Manage Application Users</b> permission group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/filter_by"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "is_organization",
            "in": "query",
            "description": "is_organization",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "exclude_guest",
            "in": "query",
            "description": "exclude_guest",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetUserListRes",
                  "type": "object",
                  "properties": {
                    "users": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/UserApplicationOrganization"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "user_sso_uid": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "users",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all users in the application. Require <b>Manage Application Users</b> permission group."
          }
        }
      }
    },
    "/users/{user_uid}": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get a User",
        "description": "Get a user by its user uid. Require <b>User Authentication</b> OR <b>Manage Application Users</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetUserByUidRes",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/UserApplicationOrganization"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get a user by its user uid. Require <b>User Authentication</b> OR <b>Manage Application Users</b> permission group."
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Update a User",
        "description": "Update user metadata by user uid. Require <b> User Authentication</b> OR <b>Manage Application Users</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "UpdateUserByUidReq",
                "properties": {
                  "application_role_uid": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "new_password": {
                    "type": "string"
                  },
                  "current_password": {
                    "type": "string"
                  },
                  "user_preference": {
                    "type": "object",
                    "properties": {
                      "notify_on_new_message": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Update user metadata by user uid. Require <b> User Authentication</b> OR <b>Manage Application Users</b> permission group."
          }
        }
      }
    },
    "/users/{user_uid}/active_organizations": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/apps": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/identity_providers": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/lock": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/login_info": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/organizations": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get User's Organizations",
        "description": "Get all organizations of a user by user uid. Require <b>User Authentication</b> OR <b>Manage Application Organizations</b> permission group.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/filter_by"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetAllOrganizationsByUser",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOrganization"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "organizations",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all organizations of a user by user uid. Require <b>User Authentication</b> OR <b>Manage Application Organizations</b> permission group."
          }
        }
      }
    },
    "/users/{user_uid}/organizations/{organization_uid}/roles": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/{user_uid}/organizations/{organization_uid}/workspaces": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get User's Workspaces in an Organization",
        "description": "Get all the workspaces of a user in an organization. Require <b>User Authentication</b>.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetWorkspacesByUserByOrganization",
                  "properties": {
                    "workspaces": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserWorkspace"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "workspaces",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all the workspaces of a user in an organization. Require <b>User Authentication</b>."
          }
        }
      }
    },
    "/users/{user_uid}/workspaces": {
      "parameters": [
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get User's Workspaces",
        "description": "Get all the workspaces of a user. Require <b>User Authentication</b>.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetWorkspacesByUser",
                  "properties": {
                    "workspaces": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserWorkspace"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "workspaces",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all the workspaces of a user. Require <b>User Authentication</b>."
          }
        }
      }
    },
    "/users/login/{login_id}": {
      "parameters": [
        {
          "name": "login_id",
          "in": "path",
          "description": "Login id",
          "required": true,
          "schema": {
            "type": "integer"
          }
        }
      ]
    },
    "/users/me": {
      "put": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Update Session User's Application Role",
        "description": "Update the application role for the current session user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "UpdateSessionUserByUidReq",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "new_password": {
                    "type": "string"
                  },
                  "current_password": {
                    "type": "string"
                  },
                  "user_preference": {
                    "type": "object",
                    "properties": {
                      "notify_on_new_message": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Update the application role for the current session user."
          }
        }
      }
    },
    "/users/me/organizations": {
      "get": {
        "tags": ["Users"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get Session User's Organizations",
        "description": "Get all organizations of the current session user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetAllOrganizationsBySessionUser",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserOrganization"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "organizations",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all organizations of the current session user."
          }
        }
      }
    },
    "/users/me/organizations/{organization_uid}/apps/{app_id}": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "app_id",
          "in": "path",
          "description": "application id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/me/organizations/{organization_uid}/roles": {
      "parameters": [
        {
          "name": "organization_uid",
          "in": "path",
          "description": "Organization uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/users/me/workspaces": {
      "get": {
        "tags": ["Users"],
        "summary": "Get Session User's Workspaces",
        "description": "Get all the workspaces of the current session user. Require <b>User Authentication</b>",
        "parameters": [
          {
            "$ref": "#/components/parameters/query"
          },
          {
            "$ref": "#/components/parameters/filter_by"
          },
          {
            "$ref": "#/components/parameters/order_by"
          },
          {
            "$ref": "#/components/parameters/order_direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "name": "my_workspace",
            "in": "query",
            "description": "Exclude all public Workspaces that session user have NOT been explicitly invited to collaborate or Return all the workspace list",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetWorkspacesBySessionUser",
                  "properties": {
                    "workspaces": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SessionUserWorkspace"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "size": {
                      "type": "integer"
                    },
                    "paging": {
                      "$ref": "#/components/schemas/Paging"
                    }
                  },
                  "required": [
                    "workspaces",
                    "total",
                    "limit",
                    "offset",
                    "size",
                    "paging"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all the workspaces of the current session user. Require <b>User Authentication</b>"
          }
        }
      }
    },
    "/utility/pseudonymize": {
      "summary": "Pseudonymize Data for External System Consumption",
      "description": "Takes in key-value pairs and returns key-pseudonymized(value) pairs"
    },
    "/walls/{wall_uid}": {
      "parameters": [
        {
          "name": "wall_uid",
          "in": "path",
          "description": "Wall uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/walls/{wall_uid}/archive": {
      "parameters": [
        {
          "name": "wall_uid",
          "in": "path",
          "description": "Wall uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/whitelist_domains/validate": {
      "parameters": [
        {
          "name": "domain",
          "in": "query",
          "description": "Domain Name",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/{object_type}/{object_id}/comments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ],
      "post": {
        "tags": ["Comments"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addCommentToObject",
        "summary": "Comment Create",
        "description": "Add a comment to the specified object. This comment has a 255 character limit.",
        "parameters": [
          {
            "name": "object_type",
            "in": "path",
            "description": "The type of object to receive the comment",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "documents",
                "notes",
                "images",
                "text",
                "canvas",
                "browsers"
              ]
            }
          },
          {
            "name": "object_id",
            "in": "path",
            "description": "The ID of the object to receive the comment",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "Create Comment in Workspace",
            "description": "Add a comment to the specified object. This comment has a 255 character limit."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/{object_type}/{object_id}/traits": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "in": "path",
          "name": "object_type",
          "required": true,
          "description": "Object type that can have traits associated with it",
          "schema": {
            "type": "string",
            "enum": [
              "text",
              "notes",
              "documents",
              "canvas",
              "images",
              "browsers",
              "strokes"
            ]
          }
        },
        {
          "in": "path",
          "name": "object_id",
          "description": "Unique ID of the object that can have traits associated with it",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Traits"],
        "operationId": "getTraitsListInElement",
        "parameters": [],
        "summary": "Traits List",
        "description": "Get a list of traits in an object. See more details in the <a href='/guides/traits-api'>Traits API page</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "traits": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Traits"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "List Traits",
            "description": "Get a list of traits in an object. See more details in the <a href='/guides/traits-api'>Traits API page</a>."
          }
        }
      },
      "post": {
        "tags": ["Traits"],
        "operationId": "addTraitsToElement",
        "summary": "Create Traits",
        "parameters": [],
        "description": "Create a traits in the object, or add traits to the list of already existing traits in the object. See more details in the <a href='/guides/traits-api' target='_blank'>Traits API page</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Traits"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Traits"
              },
              "examples": {
                "simple": {
                  "value": [
                    {
                      "http://acme.com/bluescape#assetId": "905AF9EC-671E-4EA0-816C-5334D42ECE06"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create a traits in the object, or add traits to the list of already existing traits in the object. See more details in the <a href='/guides/traits-api' target='_blank'>Traits API page</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/{surface_type}/{surface_id}/attachments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "surface_type",
          "in": "path",
          "description": "The type of the surface element",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["documents", "notes", "images", "browsers", "videos"]
          }
        },
        {
          "name": "surface_id",
          "in": "path",
          "description": "The id of the surface element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Attachments"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addAttachmentToSurface",
        "summary": "Attachment Create",
        "description": "Create an attachment in the specified surface. You attach the <span class='pre'>sourceId</span> object defined in the Request Body to the object defined in the API endopint (<span class='pre'>/&lt;surface_type&gt;/&lt;surface_id&gt;/</span>). In the Workspace, a fading yellow frame is shown around the attached object when this API call is executed.<br /> See more details in the <a href='/guides/attachments-api' target='_blank'>Attachments API page</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachmentCreateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create an attachment in the specified surface. You attach the <span class='pre'>sourceId</span> object defined in the Request Body to the object defined in the API endopint (<span class='pre'>/&lt;surface_type&gt;/&lt;surface_id&gt;/</span>). In the Workspace, a fading yellow frame is shown around the attached object when this API call is executed.<br /> See more details in the <a href='/guides/attachments-api' target='_blank'>Attachments API page</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/{surface_type}/{surface_id}/attachments/{target_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "surface_type",
          "in": "path",
          "description": "The type of the surface element",
          "required": true,
          "schema": {
            "type": "string",
            "enum": ["documents", "notes", "images", "browsers", "videos"]
          }
        },
        {
          "name": "surface_id",
          "in": "path",
          "description": "The id of the surface element",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "target_id",
          "in": "path",
          "description": "The id of the target element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "delete": {
        "tags": ["Attachments"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "deleteAttachmentInASurface",
        "summary": "Attachments Delete",
        "description": "Delete attachment in a surface. This operation will remove the attachment of the <span class='pre'>&lt;target_id&gt;</span> object from the <span class='pre'>/&lt;surface_type&gt;/&lt;surface_id&gt;/</span> object. In the Workspace, a fading blue frame is shown around the unattached object <span class='pre'>&lt;target_id&gt;</span> object when this API call is executed.<br /> See more details in the <a href='/guides/attachments-api' target='_blank'>Attachments API page</a>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessRes"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Delete attachment in a surface. This operation will remove the attachment of the <span class='pre'>&lt;target_id&gt;</span> object from the <span class='pre'>/&lt;surface_type&gt;/&lt;surface_id&gt;/</span> object. In the Workspace, a fading blue frame is shown around the unattached object <span class='pre'>&lt;target_id&gt;</span> object when this API call is executed.<br /> See more details in the <a href='/guides/attachments-api' target='_blank'>Attachments API page</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/browsers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/browsers/{browser_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "browser_id",
          "in": "path",
          "description": "The Unique ID of the text element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/{object_type}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "object_type",
          "in": "path",
          "description": "The type of object details which are placed inside the canvas ",
          "required": true,
          "schema": {
            "type": "string",
            "enum": [
              "documents",
              "notes",
              "images",
              "text",
              "canvas",
              "browsers",
              "strokes",
              "videos",
              "grids"
            ]
          }
        }
      ],
      "get": {
        "tags": ["Canvas"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "getObjectsListInCanvas",
        "summary": "Get objects list in canvas",
        "description": "Get list of the specified type of object in a canvas. If you specify <span class='pre'>&lt;object_type&gt;</span> as 'images', you will get the list of all the images contained in the specified Canvas.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canvas": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Canvas"
                      }
                    },
                    "notes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Note"
                      }
                    },
                    "browsers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Browser"
                      }
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Image"
                      }
                    },
                    "documents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    },
                    "text": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Text"
                      }
                    },
                    "strokes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Stroke"
                      }
                    },
                    "videos": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "grids": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Grid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "List Objects in Canvas",
            "description": "Get list of the specified type of object in a canvas. If you specify <span class='pre'>&lt;object_type&gt;</span> as 'images', you will get the list of all the images contained in the specified Canvas."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/browsers": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/canvas": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/documents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Documents"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addDocumentToCanvas",
        "summary": "Create Document in Canvas",
        "description": "Create a document in the Canvas.<br />The supported file extensions are: pdf, docx, pptx, xlsx, doc, ppt, xls.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - X"
                  },
                  "y": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - Y"
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "Title of document"
                  },
                  "pin": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to pin the item"
                  },
                  "scale": {
                    "type": "number",
                    "default": 1,
                    "minimum": 0.5,
                    "maximum": 1000,
                    "description": "Document Size"
                  },
                  "document": {
                    "description": "The Document to upload.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["title", "document"]
              }
            },
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {},
            "application/vnd.ms-excel": {},
            "application/vnd.openxmlformats-officedocument.presentationml.presentation": {},
            "application/vnd.ms-powerpoint": {},
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {},
            "application/msword": {},
            "application/pdf": {}
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create a document in the Canvas.<br />The supported file extensions are: pdf, docx, pptx, xlsx, doc, ppt, xls.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>"
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/elements": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "element_type",
          "in": "query",
          "description": "Get elements types like notes, text, canvas, documents, images, browsers, strokes in canvas",
          "required": false,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Canvas"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "getElementListInCanvas",
        "summary": "Get elements in canvas",
        "description": "Get a list of elements in the canvas. The Response Body returns a list of all the elements in the Canvas, grouped by their object type: 'notes, 'browsers', 'images', 'documents', 'text', 'strokes', 'videos' and 'grids'.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "canvas": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Canvas"
                      }
                    },
                    "notes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Note"
                      }
                    },
                    "browsers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Browser"
                      }
                    },
                    "images": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Image"
                      }
                    },
                    "documents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Document"
                      }
                    },
                    "text": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Text"
                      }
                    },
                    "strokes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Stroke"
                      }
                    },
                    "videos": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Video"
                      }
                    },
                    "grids": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Grid"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "summary": "List Elements in Canvas",
            "description": "Get a list of elements in the canvas. The Response Body returns a list of all the elements in the Canvas, grouped by their object type: 'notes, 'browsers', 'images', 'documents', 'text', 'strokes', 'videos' and 'grids'."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/images": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Images"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addImageToCanvas",
        "summary": "Create Image in Canvas",
        "description": "Create an image in the canvas. The image may be uploaded as a binary attachment, multipart form data, or via a remote url.<br />The supported file extensions are: jpg, png, jpeg, tiff.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - X"
                  },
                  "y": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - Y"
                  },
                  "url": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "description": "The Image to upload.",
                    "format": "binary"
                  },
                  "pin": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to pin the item"
                  },
                  "scale": {
                    "type": "number",
                    "default": 1,
                    "minimum": 0.5,
                    "maximum": 1000,
                    "description": "Image Size"
                  }
                },
                "required": ["image"]
              }
            },
            "image/jpeg": {},
            "image/gif": {},
            "image/png": {},
            "image/tif": {},
            "image/tiff": {}
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create an image in the canvas. The image may be uploaded as a binary attachment, multipart form data, or via a remote url.<br />The supported file extensions are: jpg, png, jpeg, tiff.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/notes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/canvas/{canvas_id}/text": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "canvas_id",
          "in": "path",
          "description": "The Unique ID of the canvas",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/documents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ],
      "post": {
        "tags": ["Documents"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addDocumentToWorkspace",
        "summary": "Create Document in Workspace",
        "description": "Create a document in the workspace.<br />The supported file extensions are: pdf, docx, pptx, xlsx, doc, ppt, xls.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - X"
                  },
                  "y": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - Y"
                  },
                  "title": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "Title of document"
                  },
                  "pin": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to pin the item"
                  },
                  "scale": {
                    "type": "number",
                    "default": 1,
                    "minimum": 0.5,
                    "maximum": 1000,
                    "description": "Document Size"
                  },
                  "document": {
                    "description": "The Document to upload.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["title", "document"]
              }
            },
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {},
            "application/vnd.ms-excel": {},
            "application/vnd.openxmlformats-officedocument.presentationml.presentation": {},
            "application/vnd.ms-powerpoint": {},
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {},
            "application/msword": {},
            "application/pdf": {}
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create a document in the workspace.<br />The supported file extensions are: pdf, docx, pptx, xlsx, doc, ppt, xls.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>"
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/documents/{document_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "document_id",
          "in": "path",
          "description": "The Unique ID of the document",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/grids": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/grids/{grid_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "grid_id",
          "in": "path",
          "description": "The Unique ID of the grid element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/images": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ],
      "post": {
        "tags": ["Images"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "addImageToWorkspace",
        "summary": "Create Image in Workspace",
        "description": "Create an image in the Workspace. The image may be uploaded as a binary attachment, multipart form data, or via a remote url.<br />The supported file extensions are: jpg, png, jpeg, tiff.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - X"
                  },
                  "y": {
                    "type": "integer",
                    "default": 0,
                    "description": "Position - Y"
                  },
                  "url": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "description": "The Image to upload.",
                    "format": "binary"
                  },
                  "pin": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether or not to pin the item"
                  },
                  "scale": {
                    "type": "number",
                    "default": 1,
                    "minimum": 0.5,
                    "maximum": 1000,
                    "description": "Image Size"
                  }
                },
                "required": ["image"]
              }
            },
            "image/jpeg": {},
            "image/gif": {},
            "image/png": {},
            "image/tif": {},
            "image/tiff": {}
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Create an image in the Workspace. The image may be uploaded as a binary attachment, multipart form data, or via a remote url.<br />The supported file extensions are: jpg, png, jpeg, tiff.<br />See examples of its use in the <a href='/guides/upload-from-local-drive-into-a-canvas'>Guides section</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/elements/images/{image_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "image_id",
          "in": "path",
          "description": "The Unique ID of the image",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/notes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/notes/{note_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/strokes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/strokes/{stroke_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "stroke_id",
          "in": "path",
          "description": "The Unique ID of the stroke",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/text": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/text/{text_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "text_id",
          "in": "path",
          "description": "The Unique ID of the text element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/videos": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ]
    },
    "/workspaces/{workspace_id}/elements/videos/{video_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        },
        {
          "name": "video_id",
          "in": "path",
          "description": "The Unique ID of the video element",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_id}/session/send_to_wall": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ],
      "put": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Send Workspace to Wall",
        "description": "Send workspace to wall. Require <b>Send to Wall</b> permission group. The user must also belong to the organization that owns the wall. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "SendToWallByUid",
                "properties": {
                  "wallUid": {
                    "type": "string",
                    "description": "The Unique ID of the wall"
                  }
                },
                "required": ["wallUid"]
              },
              "example": {
                "wallUid": "5rt6WWjT-oogAfu2eaN9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "SuccessResponse",
                  "properties": {
                    "wallUid": {
                      "type": "string"
                    },
                    "wallName": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "wallUid": "5rt6WWjT-oogAfu2eaN9",
                  "wallName": "a test wall"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "code": "Unauthorized",
                    "message": "Bearer realm=\"Users\", error=\"invalid_token\""
                  }
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "code": "Forbidden",
                    "message": "No permission to send by wall uid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "Not Found"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "Internal Server Error"
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Send workspace to wall. Require <b>Send to Wall</b> permission group. The user must also belong to the organization that owns the wall. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_id}/session/unsend_from_wall": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspaceId"
        }
      ],
      "put": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Unsend Workspace from Wall",
        "description": "Unsend workspace from wall. Require <b>Send to Wall</b> or <b>Unsend Workspace From Walls</b> permission group. A workspace <i>owner</i> can unsend the workspace from any wall. A workspace user with <i>Editor</i> or <i>Editor+</i> role can unsend the workspace if they were the sender of the workspace previously. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "SendToWallByUid",
                "properties": {
                  "wallUid": {
                    "type": "string",
                    "description": "The Unique ID of the wall"
                  }
                },
                "required": ["wallUid"]
              },
              "example": {
                "wallUid": "5rt6WWjT-oogAfu2eaN9"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                },
                "example": "OK"
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "code": "BadRequest",
                    "message": "Unable to unsend workspace from wall"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "code": "Unauthorized",
                    "message": "Bearer realm=\"Users\", error=\"invalid_token\""
                  }
                }
              }
            }
          },
          "403": {
            "description": "ForbiddenError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": {
                    "code": "Forbidden",
                    "message": "No permission to unsend workspace from wall"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Unsend workspace from wall. Require <b>Send to Wall</b> or <b>Unsend Workspace From Walls</b> permission group. A workspace <i>owner</i> can unsend the workspace from any wall. A workspace user with <i>Editor</i> or <i>Editor+</i> role can unsend the workspace if they were the sender of the workspace previously. <br /> See more details in the <a href='/guides/wall-apis' target='_blank'>Wall APIs page</a>."
          }
        }
      }
    },
    "/workspaces/{workspace_uid}": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Get a Workspace",
        "description": "Get workspace by workspace uid. Require the user is a member of workspace OR can use <b>Wall Access Token</b>.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "title": "GetWorkspaceByUidRes",
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "type": "object",
                      "title": "Workspace",
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "organization_uid": {
                          "type": "string"
                        },
                        "public": {
                          "type": "boolean"
                        },
                        "has_meeting": {
                          "type": "boolean"
                        },
                        "default_role_uid": {
                          "type": "string"
                        },
                        "published_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "published_url": {
                          "type": "string"
                        },
                        "publish_state": {
                          "type": "string"
                        },
                        "publish_state_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "classification": {
                          "type": "string"
                        },
                        "created_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_at": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "workspace_role": {
                          "$ref": "#/components/schemas/WorkspaceRole"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get workspace by workspace uid. Require the user is a member of workspace OR can use <b>Wall Access Token</b>."
          }
        }
      },
      "put": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Update a Workspace",
        "description": "Update the metadata of a workspace. Based on the update target field, require <b>Edit Workspace Settings</b> or <b>Manage Workspace</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "UpdateWorkspaceReq",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "public": {
                    "type": "boolean"
                  },
                  "has_meeting": {
                    "type": "boolean"
                  },
                  "default_role_uid": {
                    "type": "string"
                  },
                  "user_uid": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Update the metadata of a workspace. Based on the update target field, require <b>Edit Workspace Settings</b> or <b>Manage Workspace</b> permission group."
          }
        }
      },
      "delete": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Delete a Workspace",
        "description": "Delete a workspace temporarily or permanently. Require <b>Manage Workspace</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "DeleteWorkspaceReq",
                "properties": {
                  "is_permanent": {
                    "type": "boolean",
                    "default": false
                  }
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Delete a workspace temporarily or permanently. Require <b>Manage Workspace</b> permission group."
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/active_users": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_uid}/all_users": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace UID",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/filter_by"
        }
      ],
      "get": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "operationId": "getWorkspaceUsers",
        "summary": "Get Workspace Users",
        "description": "Get all users from a specific workspace by workspace uid. Require <b>View Workspace Collaborators</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GetAllUserByWorkspaceRes",
                  "properties": {
                    "workspace_users": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "title": "WorkspaceUser",
                        "properties": {
                          "uid": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "first_name": {
                            "type": "string"
                          },
                          "last_name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  },
                  "required": ["workspace_users", "total"]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Get all users from a specific workspace by workspace uid. Require <b>View Workspace Collaborators</b> permission group."
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/cam/data": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_uid}/cam/endpoint": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_uid}/change_organization": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_uid}/copy": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Copy a Workspace",
        "description": "Make a copy of a specific workspace by workspace uid. Require <b>Manage Workspace</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "CopyWorkspaceReq",
                "properties": {
                  "new_workspace_name": {
                    "type": "string"
                  },
                  "new_workspace_description": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Make a copy of a specific workspace by workspace uid. Require <b>Manage Workspace</b> permission group."
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/favorite": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Make a Workspace Favorite",
        "description": "Mark a specific workspace as user favorite workspace",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "FavoriteWorkspaceReq",
                "properties": {
                  "favorite": {
                    "type": "boolean",
                    "default": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Mark a specific workspace as user favorite workspace"
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/users": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Add a User to a Workspace",
        "description": "Add a user by user uid to a specific workspace by workspace uid",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "AddUserInWorkspaceReq",
                "properties": {
                  "users": {
                    "type": "array",
                    "description": "array of users => email (string), workspace_role_uid (string)",
                    "items": {
                      "type": "object",
                      "title": "AddUserWorkspace",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "workspace_role_uid": {
                          "type": "string"
                        }
                      },
                      "required": ["email", "workspace_role_uid"]
                    }
                  }
                },
                "required": ["users"]
              }
            }
          },
          "required": true
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Add a user by user uid to a specific workspace by workspace uid"
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/users/{user_uid}": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "user_uid",
          "in": "path",
          "description": "User uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Update a User in a Workspace",
        "description": "Update a user's role in a specific workspace. Require <b>Edit Workspace Collaborators</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "ChangeUserWorkspaceRoleReq",
                "properties": {
                  "workspace_role_uid": {
                    "type": "string"
                  }
                },
                "required": ["workspace_role_uid"]
              }
            }
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Update a user's role in a specific workspace. Require <b>Edit Workspace Collaborators</b> permission group."
          }
        }
      },
      "delete": {
        "tags": ["Workspaces"],
        "security": [
          {
            "userAccessToken": []
          }
        ],
        "summary": "Remove a User or Guest from a Workspace",
        "description": "Remove a user or guest from a workspace. Require <b>Edit Workspace Collaborators</b> permission group.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalApi-SuccessRes"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        },
        "x-bluescape": {
          "access": "public",
          "developerPortal": {
            "description": "Remove a user or guest from a workspace. Require <b>Edit Workspace Collaborators</b> permission group."
          }
        }
      }
    },
    "/workspaces/{workspace_uid}/users/bulk_upload": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/workspaces/{workspace_uid}/walls": {
      "parameters": [
        {
          "name": "workspace_uid",
          "in": "path",
          "description": "Workspace uid",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  }
}

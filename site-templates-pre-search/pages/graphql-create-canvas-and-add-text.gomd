<h1>Create a Canvas and add a Text Element to it</h1>

<p>
    <b>Objective</b>: Create a new Canvas in your Workspace and add a Text element to this new Canvas. You will learn how to get the
    IDs of newly created objects within your Workspace, and how to use them to associate other objects with them. You will need the <span class="pre">WorkspaceId</span>.  
</p>

<p>
    To begin, you will need to create a Canvas in your Workspace that can be used to group your elements in. To do this, you will need only the WorkspaceID
    in which you want to create the Canvas. For information on how to get this, see our previous guide on <a href="/docs/page/graphql-get-list-of-workspaces">Getting a List of Workspaces</a>.
    The information you'll need returned from this call is only the (x,y) coordinates of where it is placed, so that you can
    add a Text element to the Canvas in the next step. Many additional properties can be given to the Canvas upon creation, but it will be kept simple
    for the sake of this introduction. This can be specifcied in a relatively simple query as follows:
</p>

<pre>
mutation createCanvasExample($workspaceId: String!, $input: CreateCanvasInput!){
    createCanvas(workspaceId: $workspaceId, input: $input) {
        __typename
        name
        id
        transform { x y }
    }
}
</pre>
<p>
    Notice that this is a <i>mutation</i> operation and not a query. This is because it is a Create request instead of just retrieving data, similar to
    creating a POST request instead of a GET in typical REST APIs. This can be called with the following example parameters:
</p>

<pre>
{
    "workspaceId": "your_workspaceId_here",
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100}
    }
}
</pre>

<h3>Output</h3>

<pre>
{
    "data": {
        "createCanvas": {
            "__typename": "Canvas",
            "name": "Example Canvas",
            "id": "606216cdebc71453d4d758bf",
            "transform": {
                "x": 100,
                "y": 100
            }
        }
    }
}
</pre>

<p>
    With this you are able to extract the <span class="pre">x,y</span> coordinates which were returned in the previous response. You can now create a
    Text element within the newly created Canvas. To do this, construct another query to create a Text element, and specify these parameters.
    You will need to ensure that the Text position and size fit within the canvas. This can be done by defining the <span class="pre">transform</span>
    parameter, which allows you to specify the position of the Text element, as well as the <span class="pre">style</span> parameter which gives the ability
    to define additional properties such as <span class="pre">height</span>, <span class="pre">width</span>, and <span class="pre">font</span>.
</p>

<pre>
mutation createTextExample($workspaceId: String!, $input: CreateTextInput!){
    createText(workspaceId: $workspaceId, input: $input) {
        __typename
        id
        text
        transform {x y }
    }
}      
</pre>
<p>
    Which can be ran with parameters such as: 
</p>
<pre>
{
    "workspaceId": "lVbvis7g6m4X872j6ovj",
    "input": {
        "text": "Example text inside canvas",
        "transform": {
            "x": 150,
            "y": 150,
            "scaleX": 1,
            "scaleY": 1
        },
        "style": {
            "height": 100,
            "width": 300,
            "fontFamily": "Helvetica",
            "fontSize": 24
        }
    }
}
</pre>

<h2>Code sample</h2>

<p>
    See below for full code examples of this implementation in Python and Node.js.
</p>

<div class="lang-selector">
    <button data-lang="curl" type="button" class="btn btn-sm btn-primary curlButton">cURL</button>
    <button data-lang="node" type="button" class="btn btn-sm btn-primary nodeButton">Node.js</button>
    <button data-lang="python" type="button" class="btn btn-sm btn-primary pythonButton">Python</button>
</div>

<pre class="lang lang-node">
const axios = require('axios');

const url = "<script type="text/javascript">document.write(apiBaseStr);</script>/v3/graphql/"
const token = "&lt;SET_TOKEN&gt;"
const workspaceId = "&lt;SET_WORKSPACEID&gt; silly text"

const makeQuery = async (query, params) => {
    try {
        const response = await axios.post(url,
            {
                query: query,
                variables: params
            }, 
            {headers: {"Authorization": "Bearer " + token}
        })
        return response.data
    }
    catch(error) {
        console.error(error)
    }
}

async function startProcess() {

    const canvasQuery = 
        `mutation createCanvas($workspaceId: String!, $input: CreateCanvasInput!){
            createCanvas(workspaceId: $workspaceId, input: $input) {
                __typename
                name
                id
                transform { x y }
            }
        }`

    const canvasParams = {
        "workspaceId": workspaceId,
        "input": {
            "name": "Example Canvas",
            "transform": {
                "x": 100,
                "y": 100
                }
            }
        
        }
    const canvasResponse = await makeQuery(canvasQuery, canvasParams);
    console.log(canvasResponse);

    canvasX = canvasResponse.data.createCanvas.transform.x;
    canvasY = canvasResponse.data.createCanvas.transform.y;

    const textQuery =
        `mutation createText($workspaceId: String!, $input: CreateTextInput!){
            createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
            }
        }`

    const textParams = {
        "workspaceId": workspaceId,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": canvasX + 50,
                "y": canvasY + 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }

    const textResponse = await makeQuery(textQuery, textParams);
    console.log(textResponse);
}

startProcess();
</pre>

<pre class="lang lang-python">
import requests
import pprint

url = "<script type="text/javascript">document.write(apiBaseStr); </script>/v3/graphql/"
token = "&lt;SET_TOKEN&gt;"
workspaceId = "&lt;SET_WORKSPACEID&gt;"

def makeQuery(query, params):

    response = requests.post(url, 
    headers={"Authorization": "Bearer " + token
    },
    json={'query': query,
            'variables': params})

    return response.json()

if __name__ == "__main__":
    canvasQuery = """
    mutation createCanvas($workspaceId: String!, $input: CreateCanvasInput!){
        createCanvas(workspaceId: $workspaceId, input: $input) {
            __typename
            name
            id
            transform { x y }
        }
    }
    """

    canvasParams = {
    "workspaceId": workspaceId,
    "input": {
        "name": "Example Canvas",
        "transform": {
            "x": 100,
            "y": 100
            }
        }
    }

    canvasResponse = makeQuery(canvasQuery, canvasParams)
    pprint.pprint(canvasResponse)

    canvasX = canvasResponse['data']['createCanvas']['transform']['x']
    canvasY = canvasResponse['data']['createCanvas']['transform']['y']

    textQuery = """
    mutation createText($workspaceId: String!, $input: CreateTextInput!){
        createText(workspaceId: $workspaceId, input: $input) {
            __typename
            id
            text
            transform { x y }
        }
    }
    """
    textParams = {
        "workspaceId": workspaceId,
        "input": {
            "text": "Example text inside canvas",
            "transform": {
                "x": canvasX + 50,
                "y": canvasY + 50,
                "scaleX": 1,
                "scaleY": 1
            },
            "style": {
                "height": 100,
                "width": 300,
                "fontFamily": "Helvetica",
                "fontSize": 24
            }
        }
    }
    
    textResponse = makeQuery(textQuery, textParams)
    pprint.pprint(textResponse)
</pre>
